syntax = "proto3";
package resource_manager;

import "gogoproto/gogo.proto";
import "rustproto.proto";

option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (rustproto.lite_runtime_all) = true;



service ResourceManager {
  rpc ListResourceGroups(ListResourceGroupsRequest) returns (ListResourceGroupsResponse) {}

  rpc GetResourceGroup(GetResourceGroupRequest) returns (GetResourceGroupResponse) {}

  rpc AddResourceGroup(AddResourceGroupRequest) returns (AddResourceGroupRespose) {}

  rpc AcquireTokenBuckets(stream TokenBucketsRequest) returns (stream TokenBucketsResponse) {}
}

message ListResourceGroupsRequest{}

message ListResourceGroupsResponse{
  Error error = 1;
  repeated ResourceGroup groups = 2;
}

message GetResourceGroupRequest {
  bytes resource_group_tag =1;
}

message GetResourceGroupResponse{
  Error error = 1;
  ResourceGroup group = 2;
}

message AddResourceGroupRequest {
  ResourceGroup group = 1;
}

message AddResourceGroupRespose {
  Error error = 1;
  bytes responses = 2;
}

message TokenBucketsRequest {
  repeated TokenBucketRequst requests = 1;
  uint64 target_request_period_ms = 2;
}

message TokenBucketRequst {
    bytes resource_group_tag =1;
    repeated ResourceDetail requested_resource = 2;
    repeated ResourceDetail consumption_since_last_request = 3 [(gogoproto.nullable) = false];
}


message TokenBucketsResponse {
  Error error = 1;
  repeated GrantedTokenBucket granted_tokens = 2;
}

message GrantedTokenBucket {
  bytes resource_group_tag = 1;
  TokenBucket granted_tokens = 2;
  int64 trickle_time_ms = 3;
}

message ResourceGroup {
  bytes resource_group_tag = 1;
  GroupSettings settings = 2;
}

enum ResourceType {
  RRU = 0;
  WRU = 1;
  KVReadRPCCount = 2;
  KVWriteRPCCount = 3;
  ReadBytes = 4;
  WriteBytes = 5;
  TotoalCPUTimeMs = 6;
  SQLLayerCPUTimeMs = 7;
}

message ResourceDetail {
   ResourceType type = 1;
   uint64 value = 2;
}

message GroupSettings {
  TokenBucket r_r_u = 1;
  TokenBucket w_r_u = 2;
  TokenBucket read_bandwidth = 3;
  TokenBucket write_bandwidth = 4;
}

message TokenBucket {
  TokenLimitSettings settings = 1;
  double tokens = 2;
} 

message TokenLimitSettings {
  uint64 fillrate = 1;
  int64 burst_limit = 2;
}

message Error {
    string message = 1;
}