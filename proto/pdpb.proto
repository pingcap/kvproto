syntax = "proto2";
package pdpb;

import "metapb.proto";

message Leader {
    optional string addr  = 1;
    optional int64 pid    = 2;
}

enum CommandType {
    Invalid             = 0;
    Tso                 = 1;
    Bootstrap           = 2;
    IsBootstrapped      = 3;
    AllocId             = 4;
    GetStore            = 5;
    PutStore            = 6;
    DeleteMeta          = 7;
    AskChangePeer       = 8;
    AskSplit            = 9;
    GetRegion           = 10;
    GetClusterConfig    = 11;
    PutClusterConfig    = 12;
}

message TsoRequest {
    optional uint32 number = 1;
}

message Timestamp {
    optional int64 physical = 1;
    optional int64 logical  = 2;
}

message TsoResponse {
    repeated Timestamp timestamps = 1;
}

message BootstrapRequest {
    optional metapb.Store store   = 1;
    optional metapb.Region region = 2;
}

message BootstrapResponse {
    
}

message IsBootstrappedRequest {
    
}

message IsBootstrappedResponse {
    optional bool bootstrapped = 1;
}

message AllocIdRequest {

}

message AllocIdResponse {
    optional uint64 id             = 1;
}

message GetStoreRequest {
    optional uint64 store_id       = 1;
}

message GetRegionRequest {
    optional bytes region_key      = 1;
}

message GetClusterConfigRequest {
    optional uint64 cluster_id     = 1;
}

message GetStoreResponse {
    optional metapb.Store store     = 1;
}

message GetRegionResponse {
    optional metapb.Region region   = 1;
}

message GetClusterConfigResponse {
    optional metapb.Cluster cluster = 1;
}

message PutStoreRequest {
    optional metapb.Store store     = 1;
}

message PutStoreResponse {
}

message PutClusterConfigRequest {
    optional metapb.Cluster cluster = 1;
}

message PutClusterConfigResponse {
}

message AskChangePeerRequest {
    optional metapb.Region region   = 1;
    // The current leader peer of the region.
    // Pd can first try to send command to this peer,
    // if the peer is not leader now, pd will try to
    // find the new leader of the region and then send
    // command again.
    optional metapb.Peer leader     = 2;
}

message AskChangePeerResponse {
    
}

message AskSplitRequest {
    optional metapb.Region region      = 1;
    optional bytes split_key           = 2;
    optional metapb.Peer leader        = 3;
}

message AskSplitResponse {
    
}

message RequestHeader {
    // 16 bytes, to distinguish request.  
    optional bytes uuid                = 1;
    optional uint64 cluster_id         = 2;
}

message ResponseHeader {
    // 16 bytes, to distinguish request.  
    optional bytes uuid                = 1;
    optional uint64 cluster_id         = 2;
    optional Error error               = 3;
}

message Request {
    optional RequestHeader header                           = 1;
    optional CommandType cmd_type                           = 2;
    optional TsoRequest tso                                 = 3;
    optional BootstrapRequest bootstrap                     = 4;
    optional IsBootstrappedRequest is_bootstrapped          = 5;
    optional AllocIdRequest alloc_id                        = 6;
    optional GetStoreRequest get_store                      = 7;
    optional PutStoreRequest put_store                      = 8;
    optional AskChangePeerRequest ask_change_peer           = 9;
    optional AskSplitRequest ask_split                      = 10;
    optional GetRegionRequest get_region                    = 11;
    optional GetClusterConfigRequest get_cluster_config     = 12;
    optional PutClusterConfigRequest put_cluster_config     = 13;
}

message Response {
    optional ResponseHeader header                          = 1;
    optional CommandType cmd_type                           = 2;
    optional TsoResponse tso                                = 3;
    optional BootstrapResponse bootstrap                    = 4;
    optional IsBootstrappedResponse is_bootstrapped         = 5;
    optional AllocIdResponse alloc_id                       = 6;
    optional GetStoreResponse get_store                     = 7;
    optional PutStoreResponse put_store                     = 8;
    optional AskChangePeerResponse ask_change_peer          = 9;
    optional AskSplitResponse ask_split                     = 10;
    optional GetRegionResponse get_region                   = 11;
    optional GetClusterConfigResponse get_cluster_config    = 12;
    optional PutClusterConfigResponse put_cluster_config    = 13;
}

message BootstrappedError {
    
}

message Error {
    optional string message                 = 1;
    optional BootstrappedError bootstrapped = 2;
}
