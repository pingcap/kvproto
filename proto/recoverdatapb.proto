syntax = "proto3";
package recover_data;

import "gogoproto/gogo.proto";
import "rustproto.proto";

option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (rustproto.lite_runtime_all) = true;

// request to read region meata from a store
message ReadRegionMetaRequest {
    uint64 store_id = 1;
}

message RegionMeta {
    uint64 region_id = 1;
    uint64 last_log_term = 2;
    uint64 last_index = 3;
    uint64 commit_index = 4;
    uint64 version = 5;
    bool tombstone = 6; //reserved, it may be used in late phase for peer check
    bytes start_key = 7;
    bytes end_key = 8;
}

// command to store for recovery data
message RecoverCmdRequest {
    uint64 region_id = 1;
    bool as_leader = 2; // force region_id as leader
    bool tombstone = 3; // set Peer to tombstoned in late phase
}

message RecoverCmdResponse {
    uint64 store_id = 1;
}

// resolve data by resolved_ts
message ResolveKvDataRequest {
    uint64 resolved_ts = 1;
}

message ResolveKvDataResponse {
    bool done = 1;
}

service RecoverData {
    // read region meta to ready region meta
    rpc ReadRegionMeta(ReadRegionMetaRequest) returns (stream RegionMeta) {}
    // execute the recovery command
    rpc RecoverCmd(stream RecoverCmdRequest) returns (RecoverCmdResponse) {}
    // execute delete data from kv db
    rpc ResolveKvData(ResolveKvDataRequest) returns (ResolveKvDataResponse) {}
    
}