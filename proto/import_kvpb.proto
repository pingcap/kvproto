syntax = "proto3";

package import_kvpb;

import "import_sstpb.proto";
import "gogoproto/gogo.proto";

option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

option java_package = "com.pingcap.tikv.kvproto";

// ImportKV provides a service to import key-value pairs to TiKV.
//
// In order to import key-value pairs to TiKV, the user should:
// 1. Open an engine identified by an UUID.
// 2. Open write streams to write key-value batch to the opened engine.
//    Different streams/clients can write to the same engine concurrently.
// 3. Close the engine after all write batches are finished. An engine can only
//    be closed when all write streams are closed. An engine can only be closed
//    once, and it can not be opened again once it is closed.
// 4. Import the data in the engine to TiKV. Note that the import process is not
//    atomic, it requires the data to be idempotent on retry. An engine can only
//    be imported after it is closed. An engine can be imported multiple times,
//    but can not be imported concurrently.
// 5. Clean up the engine after it is imported. Delete all data in the engine.
//    An engine can not be cleaned up when it is writing or importing.
service ImportKV {
    // Switch to normal/import mode.
    rpc SwitchMode(SwitchModeRequest) returns (SwitchModeResponse) {}
    // Open an engine.
    rpc Open(OpenRequest) returns (OpenResponse) {}
    // Open a write stream to the engine.
    rpc Write(stream WriteRequest) returns (WriteResponse) {}
    // Close the engine.
    rpc Close(CloseRequest) returns (CloseResponse) {}
    // Import the engine to TiKV.
    rpc Import(ImportRequest) returns (ImportResponse) {}
    // Clean up the engine.
    rpc Cleanup(CleanupRequest) returns (CleanupResponse) {}
    // Compact the specific range for better performance.
    rpc Compact(CompactRequest) returns (CompactResponse) {}
}

message SwitchModeRequest {
    string pd_addr = 1;
    import_sstpb.SwitchModeRequest request = 2;
}

message SwitchModeResponse {
}

message OpenRequest {
    bytes uuid = 1;
}

message OpenResponse {
}

message WriteHead {
    bytes uuid = 1;
}

message Mutation {
    enum OP {
        Put = 0;
    }
    OP op = 1;
    bytes key = 2;
    bytes value = 3;
}

message WriteBatch {
    uint64 commit_ts = 1;
    repeated Mutation mutations = 2;
}

message WriteRequest {
    oneof chunk {
        WriteHead head = 1;
        WriteBatch batch = 2;
    }
}

message WriteResponse {
    Error error = 1;
}

message CloseRequest {
    bytes uuid = 1;
}

message CloseResponse {
    Error error = 1;
}

message ImportRequest {
    bytes uuid = 1;
    string pd_addr = 2;
}

message ImportResponse {
}

message CleanupRequest {
    bytes uuid = 1;
}

message CleanupResponse {
}

message CompactRequest {
    string pd_addr = 1;
    import_sstpb.CompactRequest request = 2;
}

message CompactResponse {
}

message Error {
    message EngineNotFound {
        bytes uuid = 1;
    }
    // This can happen if the client hasn't opened the engine, or the server
    // restarts while the client is writing or closing. An unclosed engine will
    // be removed on server restart, so the client should not continue but
    // restart the previous job in that case.
    EngineNotFound engine_not_found = 1;
}
