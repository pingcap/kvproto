syntax = "proto3";
package gcpb;

import "pdpb.proto";

import "gogoproto/gogo.proto";
import "rustproto.proto";

option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (rustproto.lite_runtime_all) = true;

option java_package = "org.tikv.kvproto";

service GC {
  rpc ListGCSafePoints(ListGCSafePointsRequest) returns (ListGCSafePointsResponse) {}

  rpc UpdateGCSafePoint(UpdateGCSafePointRequest) returns (UpdateGCSafePointResponse) {}

  rpc UpdateServiceSafePoint(UpdateServiceSafePointRequest) returns (UpdateServiceSafePointResponse) {}
}

message GCSafePoint {
  uint32 space_id = 1;
  uint64 safe_point = 2;
}

message ListGCSafePointsRequest {
  pdpb.RequestHeader header = 1;
}

message ListGCSafePointsResponse {
  pdpb.ResponseHeader header = 1;
  repeated GCSafePoint safe_points = 2;
}

message UpdateGCSafePointRequest {
  pdpb.RequestHeader header = 1;
  uint32 space_id = 2;
  uint64 safe_point = 3;
}

message UpdateGCSafePointResponse {
  pdpb.ResponseHeader header = 1;
  uint64 new_safe_point = 2;
}

message UpdateServiceSafePointRequest {
  pdpb.RequestHeader header = 1;
  uint32 space_id = 2;
  bytes service_id = 3;
  // safe point will be set to expire on (PD Server time + TTL)
  // pass in a ttl < 0 to remove target safe point
  // pass in MAX_INT64 to set a safe point that never expire
  int64 TTL = 4;
  uint64 safe_point = 5;
}

message UpdateServiceSafePointResponse {
  pdpb.ResponseHeader header = 1;
  uint64 min_safe_point = 2;
}
