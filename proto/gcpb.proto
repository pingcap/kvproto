syntax = "proto3";
package gcpb;

import "pdpb.proto";

import "gogoproto/gogo.proto";
import "rustproto.proto";

option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (rustproto.lite_runtime_all) = true;

option java_package = "org.tikv.kvproto";

service GC {
  rpc GetGCSafePoint(GetGCSafePointRequest) returns (GetGCSafePointResponse) {}

  rpc UpdateGCSafePoint(UpdateGCSafePointRequest) returns (UpdateGCSafePointResponse) {}

  rpc UpdateServiceGCSafePoint(UpdateServiceGCSafePointRequest) returns (UpdateServiceGCSafePointResponse) {}

  rpc GetAllServiceGroups(GetAllServiceGroupsRequest) returns (GetAllServiceGroupsResponse) {}

  rpc GetMinServiceSafePointByServiceGroup(GetMinServiceSafePointByServiceGroupRequest) returns (GetMinServiceSafePointByServiceGroupResponse) {}

  rpc UpdateGCSafePointByServiceGroup(UpdateGCSafePointByServiceGroupRequest) returns (UpdateGCSafePointByServiceGroupResponse) {}

  rpc UpdateServiceSafePointByServiceGroup(UpdateServiceSafePointByServiceGroupRequest) returns (UpdateServiceSafePointByServiceGroupResponse) {}

  rpc GetAllServiceGroupGCSafePoints(GetAllServiceGroupGCSafePointsRequest) returns (GetAllServiceGroupGCSafePointsResponse) {}
}

message GetGCSafePointRequest {
  pdpb.RequestHeader header = 1;
}

message GetGCSafePointResponse {
  pdpb.ResponseHeader header = 1;
  uint64 safe_point = 2;
}

message UpdateGCSafePointRequest {
  pdpb.RequestHeader header = 1;
  uint64 safe_point = 2;
}

message UpdateGCSafePointResponse {
  pdpb.ResponseHeader header = 1;
  uint64 new_safe_point = 2;
}

message UpdateServiceGCSafePointRequest {
  pdpb.RequestHeader header = 1;
  bytes service_id = 2;
  int64 TTL = 3;
  uint64 safe_point = 4;
}

message UpdateServiceGCSafePointResponse {
  pdpb.ResponseHeader header = 1;
  bytes service_id = 2;
  int64 TTL = 3;
  uint64 min_safe_point = 4;
}

message GetAllServiceGroupsRequest {
  pdpb.RequestHeader header = 1;
}

message GetAllServiceGroupsResponse {
  pdpb.ResponseHeader header = 1;
  repeated bytes service_group_id = 2;
}

message GetMinServiceSafePointByServiceGroupRequest {
  pdpb.RequestHeader header = 1;
  bytes service_group_id = 2;
}

message GetMinServiceSafePointByServiceGroupResponse {
  pdpb.ResponseHeader header = 1;
  uint64 safe_point = 2;
  // revision here is to safeguard the validity of the obtained min,
  // preventing cases where new services register their safe points after min is obtained by gc worker
  int64 revision = 3;
}

message UpdateGCSafePointByServiceGroupRequest {
  pdpb.RequestHeader header = 1;
  bytes service_group_id = 2;
  uint64 safe_point = 3;
  // here client need to provide the revision obtained from GetMinServiceSafePointByServiceGroup,
  // so server can check if it's still valid
  int64 revision = 4;
}

message UpdateGCSafePointByServiceGroupResponse {
  pdpb.ResponseHeader header = 1;
  // update will be successful if revision is valid and new safepoint > old safe point
  // if failed, previously obtained min might be incorrect, should retry from GetMinServiceSafePointByService
  bool succeeded = 2;
  uint64 new_safe_point = 3;
}

message UpdateServiceSafePointByServiceGroupRequest {
  pdpb.RequestHeader header = 1;
  bytes service_group_id = 2;
  bytes service_id = 3;
  // safe point will be set to expire on (PD Server time + TTL)
  // pass in a ttl < 0 to remove target safe point
  // pass in MAX_INT64 to set a safe point that never expire
  int64 TTL = 4;
  uint64 safe_point = 5;
}

message UpdateServiceSafePointByServiceGroupResponse {
  pdpb.ResponseHeader header = 1;
  // update will be successful if ttl < 0 (a removal request)
  // or if new safe point >= old safe point and new safe point >= gc safe point
  bool succeeded = 2;
  uint64 gc_safe_point = 3;
  uint64 old_safe_point = 4;
  uint64 new_safe_point = 5;
}

message ServiceGroupSafePoint {
  bytes service_group_id = 1;
  uint64 safe_point = 2;
}

message GetAllServiceGroupGCSafePointsRequest {
  pdpb.RequestHeader header = 1;
}

message GetAllServiceGroupGCSafePointsResponse {
  pdpb.ResponseHeader header = 1;
  repeated ServiceGroupSafePoint safe_points = 2;
}
