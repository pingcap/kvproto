syntax = "proto2";
package kvrpcpb;
import "metapb.proto";
import "errorpb.proto";

enum MessageType {
    CmdGet              = 1;
    CmdScan             = 2;
    CmdPrewrite         = 3;
    CmdCommit           = 4;
    CmdCleanup          = 5;
    // Below types both use for Get failed. If Get failed, it may be locked.
    // So it tries to clean primary lock(CmdCleanup), and then server will return
    // either committed or rolled back. Finally, client will commit/rollback
    // primary lock and then Get again.
    CmdRollbackThenGet  = 6;
    CmdCommitThenGet    = 7;
    CmdBatchGet         = 8;
}

message LockInfo {
    optional bytes  primary_lock = 1;
    optional uint64 lock_version = 2;
    optional bytes  key          = 3;
}

message KeyError {
    optional LockInfo locked    = 1; // Client should backoff or cleanup the lock then retry.
    optional string   retryable = 2; // Client may restart the txn. e.g write conflict.
    optional string   abort     = 3; // Client should abort the txn.
}

message Context {
    optional uint64             region_id    = 1;
    optional metapb.RegionEpoch region_epoch = 2;
    optional metapb.Peer        peer         = 3;
}

message CmdGetRequest {
    optional bytes   key     = 1;
    optional uint64  version = 2;
}

message CmdGetResponse {
    optional KeyError error = 1;
    optional bytes    value = 2;
}

message CmdScanRequest {
    optional bytes   start_key = 1;
    optional uint32  limit     = 2;
    optional uint64  version   = 3;
}

message KvPair {
    optional KeyError error = 1;
    optional bytes    key   = 2;
    optional bytes    value = 3;
}

message CmdScanResponse {
    repeated KvPair pairs = 1;
}

enum Op {
    Put  = 1;
    Del  = 2;
    Lock = 3;
}

message Mutation {
    optional Op    op    = 1;
    optional bytes key   = 2;
    optional bytes value = 3;
}

message CmdPrewriteRequest {
    repeated Mutation mutations   = 1;
    // primary_lock_key
    optional bytes primary_lock   = 2;
    optional uint64 start_version = 3;
}

message CmdPrewriteResponse {
    repeated KeyError errors = 1;
}

message CmdCommitRequest {
    optional uint64  start_version  = 1;
    repeated bytes   keys           = 2;
    optional uint64  commit_version = 3;
}

message CmdCommitResponse {
    repeated KeyError errors = 1;
}

message CmdCleanupRequest {
    optional bytes   key           = 1;
    optional uint64  start_version = 2;
}

message CmdCleanupResponse {
    optional KeyError error          = 1;
    optional uint64   commit_version = 2; // set this if the key is already committed
}

message CmdRollbackThenGetRequest {
    optional bytes  key          = 1;
    optional uint64 lock_version = 2;
}

message CmdRollbackThenGetResponse {
    optional KeyError error = 1;
    optional bytes    value = 2;
}

message CmdCommitThenGetRequest {
    optional bytes  key            = 1;
    optional uint64 lock_version   = 2;
    optional uint64 commit_version = 3;
    optional uint64 get_version    = 4;
}

message CmdCommitThenGetResponse {
    optional KeyError error = 1;
    optional bytes    value = 2;
}

message CmdBatchGetRequest {
    repeated bytes  keys    = 1;
    optional uint64 version = 2;
}

message CmdBatchGetResponse {
    repeated KvPair pairs = 1;
}

message Request {
    optional MessageType               type               = 1;
    optional Context                   context            = 2;
    optional CmdGetRequest             cmd_get_req        = 3;
    optional CmdScanRequest            cmd_scan_req       = 4;
    optional CmdPrewriteRequest        cmd_prewrite_req   = 5;
    optional CmdCommitRequest          cmd_commit_req     = 6;
    optional CmdCleanupRequest         cmd_cleanup_req    = 7;
    optional CmdRollbackThenGetRequest cmd_rb_get_req     = 8;
    optional CmdCommitThenGetRequest   cmd_commit_get_req = 9;
    optional CmdBatchGetRequest        cmd_batch_get_req  = 10;
}

message Response {
    optional MessageType                type                = 1;
    optional errorpb.Error              region_error        = 2;
    optional CmdGetResponse             cmd_get_resp        = 3;
    optional CmdScanResponse            cmd_scan_resp       = 4;
    optional CmdPrewriteResponse        cmd_prewrite_resp   = 5;
    optional CmdCommitResponse          cmd_commit_resp     = 6;
    optional CmdCleanupResponse         cmd_cleanup_resp    = 7;
    optional CmdRollbackThenGetResponse cmd_rb_get_resp     = 8;
    optional CmdCommitThenGetResponse   cmd_commit_get_resp = 9;
    optional CmdBatchGetResponse        cmd_batch_get_resp  = 10;
}
