syntax = "proto2";
package kvrpcpb;
import "metapb.proto";
import "errorpb.proto";

enum MessageType {
    CmdGet              = 1;
    CmdScan             = 2;
    CmdPrewrite         = 3;
    CmdCommit           = 4;
    CmdCleanup          = 5;
    // Below types both use for Get failed. If Get failed, it may be locked.
    // So it tries to clean primary lock(CmdCleanup), and then server will return
    // either committed or rolled back. Finally, client will commit/rollback
    // primary lock and then Get again.
    CmdRollbackThenGet  = 6;
    CmdCommitThenGet    = 7;
}

message LockInfo {
    optional bytes primary_lock     = 1;
    optional uint64 lock_version    = 2;
}

// ResultType use for many different result, so dispose each Type prudently.
message ResultType {
    enum Type {
        Ok          = 1;
        Retryable   = 2;
        Locked      = 3;
        Committed   = 4;
        Rolledback  = 5;
        NotLeader   = 6;
        // Known result type add here.
        Other       = 9;
    }
    optional Type type                          = 1 [default = Other];
    optional string msg                         = 2;
    // If and only if Type == Locked
    optional LockInfo lock_info                 = 3;
    optional errorpb.NotLeader leader_info      = 4;
}

message Context {
    optional uint64             region_id    = 1;
    optional metapb.RegionEpoch region_epoch = 2;
    optional metapb.Peer        peer         = 3;
}

message CmdGetRequest {
    optional bytes   key     = 1;
    optional uint64  version = 2;
}

message CmdGetResponse {
    optional ResultType res_type    = 1;
    optional bytes value            = 2;
}

message CmdScanRequest {
    optional bytes   start_key = 1;
    optional uint32  limit     = 2;
    optional uint64  version   = 3;
}

message Item {
    optional ResultType res_type    = 1;
    optional bytes key              = 2;
    optional bytes value            = 3;
}

message CmdScanResponse {
    // ok if !ok then retry.
    optional bool ok        = 1;
    repeated Item results   = 2;
}

enum Op {
    Put       = 1;
    Del       = 2;
    Lock      = 3;
}

message Mutation {
    optional Op    op    = 1;
    optional bytes key   = 2;
    optional bytes value = 3;
}

message CmdPrewriteRequest {
    repeated Mutation mutations   = 1;
    // primary_lock_key
    optional bytes primary_lock   = 2;
    optional uint64 start_version = 3;
}

message CmdPrewriteResponse {
    optional bool ok        = 1;
    // This Item doesn't contain value = 3
    repeated Item results   = 2;
}

message CmdCommitRequest {
    optional uint64  start_version  = 1;
    repeated bytes   keys           = 2;
    optional uint64  commit_version = 3;
}

message CmdCommitResponse {
    optional bool ok = 1;
}

message CmdCleanupRequest {
    optional bytes   key           = 1;
    optional uint64  start_version = 2;
}

message CmdCleanupResponse {
    optional ResultType res_type    = 1;
    optional uint64 commit_version  = 2;
}

message CmdRollbackThenGetRequest {
    optional bytes   key          = 1;
    optional uint64  lock_version = 2;
}

message CmdRollbackThenGetResponse {
    optional bool ok        = 1;
    optional bytes value    = 2;
}

message CmdCommitThenGetRequest {
    optional bytes   key            = 1;
    optional uint64  lock_version   = 2;
    optional uint64  commit_version = 3;
    optional uint64  get_version    = 4;
}

message CmdCommitThenGetResponse {
    optional bool ok        = 1;
    optional bytes value    = 2;
}

message Request {
    optional MessageType               type               = 1;
    optional Context                   context            = 2;
    optional CmdGetRequest             cmd_get_req        = 3;
    optional CmdScanRequest            cmd_scan_req       = 4;
    optional CmdPrewriteRequest        cmd_prewrite_req   = 5;
    optional CmdCommitRequest          cmd_commit_req     = 6;
    optional CmdCleanupRequest         cmd_cleanup_req    = 7;
    optional CmdRollbackThenGetRequest cmd_rb_get_req     = 8;
    optional CmdCommitThenGetRequest   cmd_commit_get_req = 9;
}

message Response {
    optional MessageType                type                = 1;
    optional CmdGetResponse             cmd_get_resp        = 2;
    optional CmdScanResponse            cmd_scan_resp       = 3;
    optional CmdPrewriteResponse        cmd_prewrite_resp   = 4;
    optional CmdCommitResponse          cmd_commit_resp     = 5;
    optional CmdCleanupResponse         cmd_cleanup_resp    = 6;
    optional CmdRollbackThenGetResponse cmd_rb_get_resp     = 7;
    optional CmdCommitThenGetResponse   cmd_commit_get_resp = 8;
}
