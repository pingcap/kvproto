syntax = "proto2";
package kvrpcpb;

import "metapb.proto";
import "kvpb.proto";
import "errorpb.proto";

enum MessageType {
    CmdGet              = 1;
    CmdScan             = 2;
    CmdPrewrite         = 3;
    CmdCommit           = 4;
    CmdCleanup          = 5;
    // Below types both use for Get failed. If Get failed, it may be locked.
    // So it tries to clean primary lock(CmdCleanup), and then server will return
    // either committed or rolled back. Finally, client will commit/rollback
    // primary lock and then Get again.
    CmdRollbackThenGet  = 6;
    CmdCommitThenGet    = 7;
    CmdBatchGet         = 8;
    CmdBatchRollback    = 9;
}

message Context {
    optional uint64             region_id    = 1;
    optional metapb.RegionEpoch region_epoch = 2;
    optional metapb.Peer        peer         = 3;
}

message CmdGetRequest {
    optional bytes   row      = 1;
    repeated bytes   columns  = 2;
    optional uint64  ts       = 3;
}

message CmdGetResponse {
    optional kvpb.Row row = 1;
}

message CmdScanRequest {
    optional bytes  start_row = 1;
    repeated bytes  columns   = 2;
    optional uint32 limit     = 3;
    optional uint64 ts        = 4;
}

message CmdScanResponse {
    repeated kvpb.Row rows = 1;
}

message CmdPrewriteRequest {
    repeated kvpb.Mutation mutations = 1;
    optional bytes         primary   = 2;
    optional uint64        ts        = 3;
}

message CmdPrewriteResponse {
    repeated kvpb.KeyError errors = 1;
}

message CmdCommitRequest {
    optional uint64  start_ts  = 1;
    repeated bytes   rows      = 2;
    optional uint64  commit_ts = 3;
}

message CmdCommitResponse {
    optional kvpb.KeyError error = 1;
}

message CmdBatchRollbackRequest {
    optional uint64 ts   = 1;
    repeated bytes  rows = 2;
}

message CmdBatchRollbackResponse {
    optional kvpb.KeyError error = 1;
}

message CmdCleanupRequest {
    optional bytes  row = 1;
    optional uint64 ts  = 2;
}

message CmdCleanupResponse {
    optional kvpb.KeyError error     = 1;
    optional uint64        commit_ts = 2; // set this if the row is already committed.
}

message CmdRollbackThenGetRequest {
    optional bytes  row     = 1;
    repeated bytes  columns = 2;
    optional uint64 ts      = 3;
}

message CmdRollbackThenGetResponse {
    optional kvpb.Row row = 1;
}

message CmdCommitThenGetRequest {
    optional bytes  row       = 1;
    repeated bytes  columns   = 2;
    optional uint64 start_ts  = 3;
    optional uint64 commit_ts = 4;
    optional uint64 get_ts    = 5;
}

message CmdCommitThenGetResponse {
    optional kvpb.Row row = 1;
}

message Columns {
    repeated bytes columns = 1;
}

message CmdBatchGetRequest {
    repeated bytes   rows    = 1;
    repeated Columns columns = 2;
    optional uint64  ts      = 3;
}

message CmdBatchGetResponse {
    repeated kvpb.Row rows = 1;
}

message Request {
    optional MessageType               type                   = 1;
    optional Context                   context                = 2;
    optional CmdGetRequest             cmd_get_req            = 3;
    optional CmdScanRequest            cmd_scan_req           = 4;
    optional CmdPrewriteRequest        cmd_prewrite_req       = 5;
    optional CmdCommitRequest          cmd_commit_req         = 6;
    optional CmdCleanupRequest         cmd_cleanup_req        = 7;
    optional CmdRollbackThenGetRequest cmd_rb_get_req         = 8;
    optional CmdCommitThenGetRequest   cmd_commit_get_req     = 9;
    optional CmdBatchGetRequest        cmd_batch_get_req      = 10;
    optional CmdBatchRollbackRequest   cmd_batch_rollback_req = 11;
}

message Response {
    optional MessageType                type                    = 1;
    optional errorpb.Error              region_error            = 2;
    optional CmdGetResponse             cmd_get_resp            = 3;
    optional CmdScanResponse            cmd_scan_resp           = 4;
    optional CmdPrewriteResponse        cmd_prewrite_resp       = 5;
    optional CmdCommitResponse          cmd_commit_resp         = 6;
    optional CmdCleanupResponse         cmd_cleanup_resp        = 7;
    optional CmdRollbackThenGetResponse cmd_rb_get_resp         = 8;
    optional CmdCommitThenGetResponse   cmd_commit_get_resp     = 9;
    optional CmdBatchGetResponse        cmd_batch_get_resp      = 10;
    optional CmdBatchRollbackResponse   cmd_batch_rollback_resp = 11;
}
