// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdpb.proto

#include "pdpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_metapb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Cluster_metapb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metapb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Peer_metapb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metapb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RegionEpoch_metapb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metapb_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Store_metapb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metapb_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Region_metapb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Error_pdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Member_pdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestHeader_pdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SplitID_pdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SplitRegion_pdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TimeInterval_pdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_pdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pdpb_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ChangePeer_pdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pdpb_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Merge_pdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pdpb_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PeerStats_pdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pdpb_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ResponseHeader_pdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pdpb_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StoreStats_pdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pdpb_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TransferLeader_pdpb_2eproto;
namespace pdpb {
class RequestHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestHeader> _instance;
} _RequestHeader_default_instance_;
class ResponseHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseHeader> _instance;
} _ResponseHeader_default_instance_;
class ErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Error> _instance;
} _Error_default_instance_;
class TsoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TsoRequest> _instance;
} _TsoRequest_default_instance_;
class TimestampDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Timestamp> _instance;
} _Timestamp_default_instance_;
class TsoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TsoResponse> _instance;
} _TsoResponse_default_instance_;
class BootstrapRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BootstrapRequest> _instance;
} _BootstrapRequest_default_instance_;
class BootstrapResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BootstrapResponse> _instance;
} _BootstrapResponse_default_instance_;
class IsBootstrappedRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IsBootstrappedRequest> _instance;
} _IsBootstrappedRequest_default_instance_;
class IsBootstrappedResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IsBootstrappedResponse> _instance;
} _IsBootstrappedResponse_default_instance_;
class AllocIDRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AllocIDRequest> _instance;
} _AllocIDRequest_default_instance_;
class AllocIDResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AllocIDResponse> _instance;
} _AllocIDResponse_default_instance_;
class GetStoreRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetStoreRequest> _instance;
} _GetStoreRequest_default_instance_;
class GetStoreResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetStoreResponse> _instance;
} _GetStoreResponse_default_instance_;
class PutStoreRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PutStoreRequest> _instance;
} _PutStoreRequest_default_instance_;
class PutStoreResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PutStoreResponse> _instance;
} _PutStoreResponse_default_instance_;
class GetAllStoresRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetAllStoresRequest> _instance;
} _GetAllStoresRequest_default_instance_;
class GetAllStoresResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetAllStoresResponse> _instance;
} _GetAllStoresResponse_default_instance_;
class GetRegionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRegionRequest> _instance;
} _GetRegionRequest_default_instance_;
class GetRegionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRegionResponse> _instance;
} _GetRegionResponse_default_instance_;
class GetRegionByIDRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRegionByIDRequest> _instance;
} _GetRegionByIDRequest_default_instance_;
class GetClusterConfigRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetClusterConfigRequest> _instance;
} _GetClusterConfigRequest_default_instance_;
class GetClusterConfigResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetClusterConfigResponse> _instance;
} _GetClusterConfigResponse_default_instance_;
class PutClusterConfigRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PutClusterConfigRequest> _instance;
} _PutClusterConfigRequest_default_instance_;
class PutClusterConfigResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PutClusterConfigResponse> _instance;
} _PutClusterConfigResponse_default_instance_;
class MemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Member> _instance;
} _Member_default_instance_;
class GetMembersRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetMembersRequest> _instance;
} _GetMembersRequest_default_instance_;
class GetMembersResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetMembersResponse> _instance;
} _GetMembersResponse_default_instance_;
class PeerStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerStats> _instance;
} _PeerStats_default_instance_;
class RegionHeartbeatRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegionHeartbeatRequest> _instance;
} _RegionHeartbeatRequest_default_instance_;
class ChangePeerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChangePeer> _instance;
} _ChangePeer_default_instance_;
class TransferLeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransferLeader> _instance;
} _TransferLeader_default_instance_;
class MergeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Merge> _instance;
} _Merge_default_instance_;
class SplitRegionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SplitRegion> _instance;
} _SplitRegion_default_instance_;
class RegionHeartbeatResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegionHeartbeatResponse> _instance;
} _RegionHeartbeatResponse_default_instance_;
class AskSplitRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AskSplitRequest> _instance;
} _AskSplitRequest_default_instance_;
class AskSplitResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AskSplitResponse> _instance;
} _AskSplitResponse_default_instance_;
class ReportSplitRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportSplitRequest> _instance;
} _ReportSplitRequest_default_instance_;
class ReportSplitResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportSplitResponse> _instance;
} _ReportSplitResponse_default_instance_;
class AskBatchSplitRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AskBatchSplitRequest> _instance;
} _AskBatchSplitRequest_default_instance_;
class SplitIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SplitID> _instance;
} _SplitID_default_instance_;
class AskBatchSplitResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AskBatchSplitResponse> _instance;
} _AskBatchSplitResponse_default_instance_;
class ReportBatchSplitRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportBatchSplitRequest> _instance;
} _ReportBatchSplitRequest_default_instance_;
class ReportBatchSplitResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportBatchSplitResponse> _instance;
} _ReportBatchSplitResponse_default_instance_;
class TimeIntervalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimeInterval> _instance;
} _TimeInterval_default_instance_;
class StoreStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoreStats> _instance;
} _StoreStats_default_instance_;
class StoreHeartbeatRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoreHeartbeatRequest> _instance;
} _StoreHeartbeatRequest_default_instance_;
class StoreHeartbeatResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoreHeartbeatResponse> _instance;
} _StoreHeartbeatResponse_default_instance_;
class ScatterRegionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScatterRegionRequest> _instance;
} _ScatterRegionRequest_default_instance_;
class ScatterRegionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScatterRegionResponse> _instance;
} _ScatterRegionResponse_default_instance_;
class GetGCSafePointRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetGCSafePointRequest> _instance;
} _GetGCSafePointRequest_default_instance_;
class GetGCSafePointResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetGCSafePointResponse> _instance;
} _GetGCSafePointResponse_default_instance_;
class UpdateGCSafePointRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateGCSafePointRequest> _instance;
} _UpdateGCSafePointRequest_default_instance_;
class UpdateGCSafePointResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateGCSafePointResponse> _instance;
} _UpdateGCSafePointResponse_default_instance_;
class SyncRegionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SyncRegionRequest> _instance;
} _SyncRegionRequest_default_instance_;
class SyncRegionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SyncRegionResponse> _instance;
} _SyncRegionResponse_default_instance_;
}  // namespace pdpb
static void InitDefaultsRequestHeader_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_RequestHeader_default_instance_;
    new (ptr) ::pdpb::RequestHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::RequestHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestHeader_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestHeader_pdpb_2eproto}, {}};

static void InitDefaultsResponseHeader_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_ResponseHeader_default_instance_;
    new (ptr) ::pdpb::ResponseHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::ResponseHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ResponseHeader_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsResponseHeader_pdpb_2eproto}, {
      &scc_info_Error_pdpb_2eproto.base,}};

static void InitDefaultsError_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_Error_default_instance_;
    new (ptr) ::pdpb::Error();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::Error::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Error_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsError_pdpb_2eproto}, {}};

static void InitDefaultsTsoRequest_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_TsoRequest_default_instance_;
    new (ptr) ::pdpb::TsoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::TsoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TsoRequest_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTsoRequest_pdpb_2eproto}, {
      &scc_info_RequestHeader_pdpb_2eproto.base,}};

static void InitDefaultsTimestamp_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_Timestamp_default_instance_;
    new (ptr) ::pdpb::Timestamp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::Timestamp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTimestamp_pdpb_2eproto}, {}};

static void InitDefaultsTsoResponse_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_TsoResponse_default_instance_;
    new (ptr) ::pdpb::TsoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::TsoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TsoResponse_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTsoResponse_pdpb_2eproto}, {
      &scc_info_ResponseHeader_pdpb_2eproto.base,
      &scc_info_Timestamp_pdpb_2eproto.base,}};

static void InitDefaultsBootstrapRequest_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_BootstrapRequest_default_instance_;
    new (ptr) ::pdpb::BootstrapRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::BootstrapRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_BootstrapRequest_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsBootstrapRequest_pdpb_2eproto}, {
      &scc_info_RequestHeader_pdpb_2eproto.base,
      &scc_info_Store_metapb_2eproto.base,
      &scc_info_Region_metapb_2eproto.base,}};

static void InitDefaultsBootstrapResponse_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_BootstrapResponse_default_instance_;
    new (ptr) ::pdpb::BootstrapResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::BootstrapResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BootstrapResponse_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBootstrapResponse_pdpb_2eproto}, {
      &scc_info_ResponseHeader_pdpb_2eproto.base,}};

static void InitDefaultsIsBootstrappedRequest_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_IsBootstrappedRequest_default_instance_;
    new (ptr) ::pdpb::IsBootstrappedRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::IsBootstrappedRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_IsBootstrappedRequest_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIsBootstrappedRequest_pdpb_2eproto}, {
      &scc_info_RequestHeader_pdpb_2eproto.base,}};

static void InitDefaultsIsBootstrappedResponse_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_IsBootstrappedResponse_default_instance_;
    new (ptr) ::pdpb::IsBootstrappedResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::IsBootstrappedResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_IsBootstrappedResponse_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIsBootstrappedResponse_pdpb_2eproto}, {
      &scc_info_ResponseHeader_pdpb_2eproto.base,}};

static void InitDefaultsAllocIDRequest_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_AllocIDRequest_default_instance_;
    new (ptr) ::pdpb::AllocIDRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::AllocIDRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AllocIDRequest_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAllocIDRequest_pdpb_2eproto}, {
      &scc_info_RequestHeader_pdpb_2eproto.base,}};

static void InitDefaultsAllocIDResponse_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_AllocIDResponse_default_instance_;
    new (ptr) ::pdpb::AllocIDResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::AllocIDResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AllocIDResponse_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAllocIDResponse_pdpb_2eproto}, {
      &scc_info_ResponseHeader_pdpb_2eproto.base,}};

static void InitDefaultsGetStoreRequest_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_GetStoreRequest_default_instance_;
    new (ptr) ::pdpb::GetStoreRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::GetStoreRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetStoreRequest_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetStoreRequest_pdpb_2eproto}, {
      &scc_info_RequestHeader_pdpb_2eproto.base,}};

static void InitDefaultsGetStoreResponse_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_GetStoreResponse_default_instance_;
    new (ptr) ::pdpb::GetStoreResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::GetStoreResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetStoreResponse_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetStoreResponse_pdpb_2eproto}, {
      &scc_info_ResponseHeader_pdpb_2eproto.base,
      &scc_info_Store_metapb_2eproto.base,}};

static void InitDefaultsPutStoreRequest_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_PutStoreRequest_default_instance_;
    new (ptr) ::pdpb::PutStoreRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::PutStoreRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PutStoreRequest_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPutStoreRequest_pdpb_2eproto}, {
      &scc_info_RequestHeader_pdpb_2eproto.base,
      &scc_info_Store_metapb_2eproto.base,}};

static void InitDefaultsPutStoreResponse_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_PutStoreResponse_default_instance_;
    new (ptr) ::pdpb::PutStoreResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::PutStoreResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PutStoreResponse_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPutStoreResponse_pdpb_2eproto}, {
      &scc_info_ResponseHeader_pdpb_2eproto.base,}};

static void InitDefaultsGetAllStoresRequest_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_GetAllStoresRequest_default_instance_;
    new (ptr) ::pdpb::GetAllStoresRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::GetAllStoresRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetAllStoresRequest_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetAllStoresRequest_pdpb_2eproto}, {
      &scc_info_RequestHeader_pdpb_2eproto.base,}};

static void InitDefaultsGetAllStoresResponse_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_GetAllStoresResponse_default_instance_;
    new (ptr) ::pdpb::GetAllStoresResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::GetAllStoresResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetAllStoresResponse_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetAllStoresResponse_pdpb_2eproto}, {
      &scc_info_ResponseHeader_pdpb_2eproto.base,
      &scc_info_Store_metapb_2eproto.base,}};

static void InitDefaultsGetRegionRequest_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_GetRegionRequest_default_instance_;
    new (ptr) ::pdpb::GetRegionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::GetRegionRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetRegionRequest_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetRegionRequest_pdpb_2eproto}, {
      &scc_info_RequestHeader_pdpb_2eproto.base,}};

static void InitDefaultsGetRegionResponse_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_GetRegionResponse_default_instance_;
    new (ptr) ::pdpb::GetRegionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::GetRegionResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_GetRegionResponse_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsGetRegionResponse_pdpb_2eproto}, {
      &scc_info_ResponseHeader_pdpb_2eproto.base,
      &scc_info_Region_metapb_2eproto.base,
      &scc_info_Peer_metapb_2eproto.base,}};

static void InitDefaultsGetRegionByIDRequest_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_GetRegionByIDRequest_default_instance_;
    new (ptr) ::pdpb::GetRegionByIDRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::GetRegionByIDRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetRegionByIDRequest_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetRegionByIDRequest_pdpb_2eproto}, {
      &scc_info_RequestHeader_pdpb_2eproto.base,}};

static void InitDefaultsGetClusterConfigRequest_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_GetClusterConfigRequest_default_instance_;
    new (ptr) ::pdpb::GetClusterConfigRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::GetClusterConfigRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetClusterConfigRequest_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetClusterConfigRequest_pdpb_2eproto}, {
      &scc_info_RequestHeader_pdpb_2eproto.base,}};

static void InitDefaultsGetClusterConfigResponse_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_GetClusterConfigResponse_default_instance_;
    new (ptr) ::pdpb::GetClusterConfigResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::GetClusterConfigResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetClusterConfigResponse_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetClusterConfigResponse_pdpb_2eproto}, {
      &scc_info_ResponseHeader_pdpb_2eproto.base,
      &scc_info_Cluster_metapb_2eproto.base,}};

static void InitDefaultsPutClusterConfigRequest_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_PutClusterConfigRequest_default_instance_;
    new (ptr) ::pdpb::PutClusterConfigRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::PutClusterConfigRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PutClusterConfigRequest_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPutClusterConfigRequest_pdpb_2eproto}, {
      &scc_info_RequestHeader_pdpb_2eproto.base,
      &scc_info_Cluster_metapb_2eproto.base,}};

static void InitDefaultsPutClusterConfigResponse_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_PutClusterConfigResponse_default_instance_;
    new (ptr) ::pdpb::PutClusterConfigResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::PutClusterConfigResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PutClusterConfigResponse_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPutClusterConfigResponse_pdpb_2eproto}, {
      &scc_info_ResponseHeader_pdpb_2eproto.base,}};

static void InitDefaultsMember_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_Member_default_instance_;
    new (ptr) ::pdpb::Member();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::Member::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Member_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMember_pdpb_2eproto}, {}};

static void InitDefaultsGetMembersRequest_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_GetMembersRequest_default_instance_;
    new (ptr) ::pdpb::GetMembersRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::GetMembersRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetMembersRequest_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetMembersRequest_pdpb_2eproto}, {
      &scc_info_RequestHeader_pdpb_2eproto.base,}};

static void InitDefaultsGetMembersResponse_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_GetMembersResponse_default_instance_;
    new (ptr) ::pdpb::GetMembersResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::GetMembersResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetMembersResponse_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetMembersResponse_pdpb_2eproto}, {
      &scc_info_ResponseHeader_pdpb_2eproto.base,
      &scc_info_Member_pdpb_2eproto.base,}};

static void InitDefaultsPeerStats_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_PeerStats_default_instance_;
    new (ptr) ::pdpb::PeerStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::PeerStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PeerStats_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPeerStats_pdpb_2eproto}, {
      &scc_info_Peer_metapb_2eproto.base,}};

static void InitDefaultsRegionHeartbeatRequest_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_RegionHeartbeatRequest_default_instance_;
    new (ptr) ::pdpb::RegionHeartbeatRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::RegionHeartbeatRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_RegionHeartbeatRequest_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsRegionHeartbeatRequest_pdpb_2eproto}, {
      &scc_info_RequestHeader_pdpb_2eproto.base,
      &scc_info_Region_metapb_2eproto.base,
      &scc_info_Peer_metapb_2eproto.base,
      &scc_info_PeerStats_pdpb_2eproto.base,
      &scc_info_TimeInterval_pdpb_2eproto.base,}};

static void InitDefaultsChangePeer_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_ChangePeer_default_instance_;
    new (ptr) ::pdpb::ChangePeer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::ChangePeer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ChangePeer_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChangePeer_pdpb_2eproto}, {
      &scc_info_Peer_metapb_2eproto.base,}};

static void InitDefaultsTransferLeader_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_TransferLeader_default_instance_;
    new (ptr) ::pdpb::TransferLeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::TransferLeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TransferLeader_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTransferLeader_pdpb_2eproto}, {
      &scc_info_Peer_metapb_2eproto.base,}};

static void InitDefaultsMerge_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_Merge_default_instance_;
    new (ptr) ::pdpb::Merge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::Merge::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Merge_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMerge_pdpb_2eproto}, {
      &scc_info_Region_metapb_2eproto.base,}};

static void InitDefaultsSplitRegion_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_SplitRegion_default_instance_;
    new (ptr) ::pdpb::SplitRegion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::SplitRegion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SplitRegion_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSplitRegion_pdpb_2eproto}, {}};

static void InitDefaultsRegionHeartbeatResponse_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_RegionHeartbeatResponse_default_instance_;
    new (ptr) ::pdpb::RegionHeartbeatResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::RegionHeartbeatResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_RegionHeartbeatResponse_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsRegionHeartbeatResponse_pdpb_2eproto}, {
      &scc_info_ResponseHeader_pdpb_2eproto.base,
      &scc_info_ChangePeer_pdpb_2eproto.base,
      &scc_info_TransferLeader_pdpb_2eproto.base,
      &scc_info_RegionEpoch_metapb_2eproto.base,
      &scc_info_Peer_metapb_2eproto.base,
      &scc_info_Merge_pdpb_2eproto.base,
      &scc_info_SplitRegion_pdpb_2eproto.base,}};

static void InitDefaultsAskSplitRequest_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_AskSplitRequest_default_instance_;
    new (ptr) ::pdpb::AskSplitRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::AskSplitRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AskSplitRequest_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAskSplitRequest_pdpb_2eproto}, {
      &scc_info_RequestHeader_pdpb_2eproto.base,
      &scc_info_Region_metapb_2eproto.base,}};

static void InitDefaultsAskSplitResponse_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_AskSplitResponse_default_instance_;
    new (ptr) ::pdpb::AskSplitResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::AskSplitResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AskSplitResponse_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAskSplitResponse_pdpb_2eproto}, {
      &scc_info_ResponseHeader_pdpb_2eproto.base,}};

static void InitDefaultsReportSplitRequest_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_ReportSplitRequest_default_instance_;
    new (ptr) ::pdpb::ReportSplitRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::ReportSplitRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ReportSplitRequest_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReportSplitRequest_pdpb_2eproto}, {
      &scc_info_RequestHeader_pdpb_2eproto.base,
      &scc_info_Region_metapb_2eproto.base,}};

static void InitDefaultsReportSplitResponse_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_ReportSplitResponse_default_instance_;
    new (ptr) ::pdpb::ReportSplitResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::ReportSplitResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReportSplitResponse_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReportSplitResponse_pdpb_2eproto}, {
      &scc_info_ResponseHeader_pdpb_2eproto.base,}};

static void InitDefaultsAskBatchSplitRequest_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_AskBatchSplitRequest_default_instance_;
    new (ptr) ::pdpb::AskBatchSplitRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::AskBatchSplitRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AskBatchSplitRequest_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAskBatchSplitRequest_pdpb_2eproto}, {
      &scc_info_RequestHeader_pdpb_2eproto.base,
      &scc_info_Region_metapb_2eproto.base,}};

static void InitDefaultsSplitID_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_SplitID_default_instance_;
    new (ptr) ::pdpb::SplitID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::SplitID::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SplitID_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSplitID_pdpb_2eproto}, {}};

static void InitDefaultsAskBatchSplitResponse_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_AskBatchSplitResponse_default_instance_;
    new (ptr) ::pdpb::AskBatchSplitResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::AskBatchSplitResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AskBatchSplitResponse_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAskBatchSplitResponse_pdpb_2eproto}, {
      &scc_info_ResponseHeader_pdpb_2eproto.base,
      &scc_info_SplitID_pdpb_2eproto.base,}};

static void InitDefaultsReportBatchSplitRequest_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_ReportBatchSplitRequest_default_instance_;
    new (ptr) ::pdpb::ReportBatchSplitRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::ReportBatchSplitRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ReportBatchSplitRequest_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReportBatchSplitRequest_pdpb_2eproto}, {
      &scc_info_RequestHeader_pdpb_2eproto.base,
      &scc_info_Region_metapb_2eproto.base,}};

static void InitDefaultsReportBatchSplitResponse_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_ReportBatchSplitResponse_default_instance_;
    new (ptr) ::pdpb::ReportBatchSplitResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::ReportBatchSplitResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReportBatchSplitResponse_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReportBatchSplitResponse_pdpb_2eproto}, {
      &scc_info_ResponseHeader_pdpb_2eproto.base,}};

static void InitDefaultsTimeInterval_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_TimeInterval_default_instance_;
    new (ptr) ::pdpb::TimeInterval();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::TimeInterval::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TimeInterval_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTimeInterval_pdpb_2eproto}, {}};

static void InitDefaultsStoreStats_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_StoreStats_default_instance_;
    new (ptr) ::pdpb::StoreStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::StoreStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StoreStats_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStoreStats_pdpb_2eproto}, {
      &scc_info_TimeInterval_pdpb_2eproto.base,}};

static void InitDefaultsStoreHeartbeatRequest_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_StoreHeartbeatRequest_default_instance_;
    new (ptr) ::pdpb::StoreHeartbeatRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::StoreHeartbeatRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_StoreHeartbeatRequest_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsStoreHeartbeatRequest_pdpb_2eproto}, {
      &scc_info_RequestHeader_pdpb_2eproto.base,
      &scc_info_StoreStats_pdpb_2eproto.base,}};

static void InitDefaultsStoreHeartbeatResponse_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_StoreHeartbeatResponse_default_instance_;
    new (ptr) ::pdpb::StoreHeartbeatResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::StoreHeartbeatResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StoreHeartbeatResponse_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStoreHeartbeatResponse_pdpb_2eproto}, {
      &scc_info_ResponseHeader_pdpb_2eproto.base,}};

static void InitDefaultsScatterRegionRequest_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_ScatterRegionRequest_default_instance_;
    new (ptr) ::pdpb::ScatterRegionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::ScatterRegionRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ScatterRegionRequest_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsScatterRegionRequest_pdpb_2eproto}, {
      &scc_info_RequestHeader_pdpb_2eproto.base,
      &scc_info_Region_metapb_2eproto.base,
      &scc_info_Peer_metapb_2eproto.base,}};

static void InitDefaultsScatterRegionResponse_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_ScatterRegionResponse_default_instance_;
    new (ptr) ::pdpb::ScatterRegionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::ScatterRegionResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ScatterRegionResponse_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsScatterRegionResponse_pdpb_2eproto}, {
      &scc_info_ResponseHeader_pdpb_2eproto.base,}};

static void InitDefaultsGetGCSafePointRequest_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_GetGCSafePointRequest_default_instance_;
    new (ptr) ::pdpb::GetGCSafePointRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::GetGCSafePointRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetGCSafePointRequest_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetGCSafePointRequest_pdpb_2eproto}, {
      &scc_info_RequestHeader_pdpb_2eproto.base,}};

static void InitDefaultsGetGCSafePointResponse_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_GetGCSafePointResponse_default_instance_;
    new (ptr) ::pdpb::GetGCSafePointResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::GetGCSafePointResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetGCSafePointResponse_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetGCSafePointResponse_pdpb_2eproto}, {
      &scc_info_ResponseHeader_pdpb_2eproto.base,}};

static void InitDefaultsUpdateGCSafePointRequest_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_UpdateGCSafePointRequest_default_instance_;
    new (ptr) ::pdpb::UpdateGCSafePointRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::UpdateGCSafePointRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UpdateGCSafePointRequest_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUpdateGCSafePointRequest_pdpb_2eproto}, {
      &scc_info_RequestHeader_pdpb_2eproto.base,}};

static void InitDefaultsUpdateGCSafePointResponse_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_UpdateGCSafePointResponse_default_instance_;
    new (ptr) ::pdpb::UpdateGCSafePointResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::UpdateGCSafePointResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UpdateGCSafePointResponse_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUpdateGCSafePointResponse_pdpb_2eproto}, {
      &scc_info_ResponseHeader_pdpb_2eproto.base,}};

static void InitDefaultsSyncRegionRequest_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_SyncRegionRequest_default_instance_;
    new (ptr) ::pdpb::SyncRegionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::SyncRegionRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SyncRegionRequest_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSyncRegionRequest_pdpb_2eproto}, {
      &scc_info_RequestHeader_pdpb_2eproto.base,
      &scc_info_Member_pdpb_2eproto.base,}};

static void InitDefaultsSyncRegionResponse_pdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pdpb::_SyncRegionResponse_default_instance_;
    new (ptr) ::pdpb::SyncRegionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pdpb::SyncRegionResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SyncRegionResponse_pdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSyncRegionResponse_pdpb_2eproto}, {
      &scc_info_ResponseHeader_pdpb_2eproto.base,
      &scc_info_Region_metapb_2eproto.base,}};

void InitDefaults_pdpb_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_RequestHeader_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseHeader_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Error_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TsoRequest_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Timestamp_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TsoResponse_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BootstrapRequest_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BootstrapResponse_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IsBootstrappedRequest_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IsBootstrappedResponse_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AllocIDRequest_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AllocIDResponse_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetStoreRequest_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetStoreResponse_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PutStoreRequest_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PutStoreResponse_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetAllStoresRequest_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetAllStoresResponse_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetRegionRequest_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetRegionResponse_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetRegionByIDRequest_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetClusterConfigRequest_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetClusterConfigResponse_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PutClusterConfigRequest_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PutClusterConfigResponse_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Member_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetMembersRequest_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetMembersResponse_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PeerStats_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegionHeartbeatRequest_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChangePeer_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransferLeader_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Merge_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SplitRegion_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegionHeartbeatResponse_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AskSplitRequest_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AskSplitResponse_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReportSplitRequest_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReportSplitResponse_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AskBatchSplitRequest_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SplitID_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AskBatchSplitResponse_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReportBatchSplitRequest_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReportBatchSplitResponse_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TimeInterval_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoreStats_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoreHeartbeatRequest_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoreHeartbeatResponse_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScatterRegionRequest_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScatterRegionResponse_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetGCSafePointRequest_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetGCSafePointResponse_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateGCSafePointRequest_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateGCSafePointResponse_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SyncRegionRequest_pdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SyncRegionResponse_pdpb_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_pdpb_2eproto[56];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_pdpb_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_pdpb_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_pdpb_2eproto::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::RequestHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::RequestHeader, cluster_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::ResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::ResponseHeader, cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::ResponseHeader, error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::Error, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::Error, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::TsoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::TsoRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::TsoRequest, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::Timestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::Timestamp, physical_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::Timestamp, logical_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::TsoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::TsoResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::TsoResponse, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::TsoResponse, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::BootstrapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::BootstrapRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::BootstrapRequest, store_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::BootstrapRequest, region_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::BootstrapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::BootstrapResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::IsBootstrappedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::IsBootstrappedRequest, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::IsBootstrappedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::IsBootstrappedResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::IsBootstrappedResponse, bootstrapped_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::AllocIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::AllocIDRequest, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::AllocIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::AllocIDResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::AllocIDResponse, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetStoreRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetStoreRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetStoreRequest, store_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetStoreResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetStoreResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetStoreResponse, store_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::PutStoreRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::PutStoreRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::PutStoreRequest, store_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::PutStoreResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::PutStoreResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetAllStoresRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetAllStoresRequest, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetAllStoresResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetAllStoresResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetAllStoresResponse, stores_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetRegionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetRegionRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetRegionRequest, region_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetRegionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetRegionResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetRegionResponse, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetRegionResponse, leader_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetRegionByIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetRegionByIDRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetRegionByIDRequest, region_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetClusterConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetClusterConfigRequest, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetClusterConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetClusterConfigResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetClusterConfigResponse, cluster_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::PutClusterConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::PutClusterConfigRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::PutClusterConfigRequest, cluster_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::PutClusterConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::PutClusterConfigResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::Member, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::Member, member_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::Member, peer_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::Member, client_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::Member, leader_priority_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetMembersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetMembersRequest, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetMembersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetMembersResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetMembersResponse, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetMembersResponse, leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetMembersResponse, etcd_leader_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::PeerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::PeerStats, peer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::PeerStats, down_seconds_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::RegionHeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::RegionHeartbeatRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::RegionHeartbeatRequest, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::RegionHeartbeatRequest, leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::RegionHeartbeatRequest, down_peers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::RegionHeartbeatRequest, pending_peers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::RegionHeartbeatRequest, bytes_written_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::RegionHeartbeatRequest, bytes_read_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::RegionHeartbeatRequest, keys_written_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::RegionHeartbeatRequest, keys_read_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::RegionHeartbeatRequest, approximate_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::RegionHeartbeatRequest, interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::RegionHeartbeatRequest, approximate_keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::ChangePeer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::ChangePeer, peer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::ChangePeer, change_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::TransferLeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::TransferLeader, peer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::Merge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::Merge, target_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::SplitRegion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::SplitRegion, policy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::RegionHeartbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::RegionHeartbeatResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::RegionHeartbeatResponse, change_peer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::RegionHeartbeatResponse, transfer_leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::RegionHeartbeatResponse, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::RegionHeartbeatResponse, region_epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::RegionHeartbeatResponse, target_peer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::RegionHeartbeatResponse, merge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::RegionHeartbeatResponse, split_region_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::AskSplitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::AskSplitRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::AskSplitRequest, region_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::AskSplitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::AskSplitResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::AskSplitResponse, new_region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::AskSplitResponse, new_peer_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::ReportSplitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::ReportSplitRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::ReportSplitRequest, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::ReportSplitRequest, right_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::ReportSplitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::ReportSplitResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::AskBatchSplitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::AskBatchSplitRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::AskBatchSplitRequest, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::AskBatchSplitRequest, split_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::SplitID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::SplitID, new_region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::SplitID, new_peer_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::AskBatchSplitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::AskBatchSplitResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::AskBatchSplitResponse, ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::ReportBatchSplitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::ReportBatchSplitRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::ReportBatchSplitRequest, regions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::ReportBatchSplitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::ReportBatchSplitResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::TimeInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::TimeInterval, start_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::TimeInterval, end_timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::StoreStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::StoreStats, store_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::StoreStats, capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::StoreStats, available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::StoreStats, region_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::StoreStats, sending_snap_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::StoreStats, receiving_snap_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::StoreStats, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::StoreStats, applying_snap_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::StoreStats, is_busy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::StoreStats, used_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::StoreStats, bytes_written_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::StoreStats, keys_written_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::StoreStats, bytes_read_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::StoreStats, keys_read_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::StoreStats, interval_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::StoreHeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::StoreHeartbeatRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::StoreHeartbeatRequest, stats_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::StoreHeartbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::StoreHeartbeatResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::ScatterRegionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::ScatterRegionRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::ScatterRegionRequest, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::ScatterRegionRequest, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::ScatterRegionRequest, leader_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::ScatterRegionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::ScatterRegionResponse, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetGCSafePointRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetGCSafePointRequest, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetGCSafePointResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetGCSafePointResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::GetGCSafePointResponse, safe_point_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::UpdateGCSafePointRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::UpdateGCSafePointRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::UpdateGCSafePointRequest, safe_point_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::UpdateGCSafePointResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::UpdateGCSafePointResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::UpdateGCSafePointResponse, new_safe_point_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::SyncRegionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::SyncRegionRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::SyncRegionRequest, member_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::SyncRegionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::SyncRegionResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pdpb::SyncRegionResponse, regions_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pdpb::RequestHeader)},
  { 6, -1, sizeof(::pdpb::ResponseHeader)},
  { 13, -1, sizeof(::pdpb::Error)},
  { 20, -1, sizeof(::pdpb::TsoRequest)},
  { 27, -1, sizeof(::pdpb::Timestamp)},
  { 34, -1, sizeof(::pdpb::TsoResponse)},
  { 42, -1, sizeof(::pdpb::BootstrapRequest)},
  { 50, -1, sizeof(::pdpb::BootstrapResponse)},
  { 56, -1, sizeof(::pdpb::IsBootstrappedRequest)},
  { 62, -1, sizeof(::pdpb::IsBootstrappedResponse)},
  { 69, -1, sizeof(::pdpb::AllocIDRequest)},
  { 75, -1, sizeof(::pdpb::AllocIDResponse)},
  { 82, -1, sizeof(::pdpb::GetStoreRequest)},
  { 89, -1, sizeof(::pdpb::GetStoreResponse)},
  { 96, -1, sizeof(::pdpb::PutStoreRequest)},
  { 103, -1, sizeof(::pdpb::PutStoreResponse)},
  { 109, -1, sizeof(::pdpb::GetAllStoresRequest)},
  { 115, -1, sizeof(::pdpb::GetAllStoresResponse)},
  { 122, -1, sizeof(::pdpb::GetRegionRequest)},
  { 129, -1, sizeof(::pdpb::GetRegionResponse)},
  { 137, -1, sizeof(::pdpb::GetRegionByIDRequest)},
  { 144, -1, sizeof(::pdpb::GetClusterConfigRequest)},
  { 150, -1, sizeof(::pdpb::GetClusterConfigResponse)},
  { 157, -1, sizeof(::pdpb::PutClusterConfigRequest)},
  { 164, -1, sizeof(::pdpb::PutClusterConfigResponse)},
  { 170, -1, sizeof(::pdpb::Member)},
  { 180, -1, sizeof(::pdpb::GetMembersRequest)},
  { 186, -1, sizeof(::pdpb::GetMembersResponse)},
  { 195, -1, sizeof(::pdpb::PeerStats)},
  { 202, -1, sizeof(::pdpb::RegionHeartbeatRequest)},
  { 219, -1, sizeof(::pdpb::ChangePeer)},
  { 226, -1, sizeof(::pdpb::TransferLeader)},
  { 232, -1, sizeof(::pdpb::Merge)},
  { 238, -1, sizeof(::pdpb::SplitRegion)},
  { 244, -1, sizeof(::pdpb::RegionHeartbeatResponse)},
  { 257, -1, sizeof(::pdpb::AskSplitRequest)},
  { 264, -1, sizeof(::pdpb::AskSplitResponse)},
  { 272, -1, sizeof(::pdpb::ReportSplitRequest)},
  { 280, -1, sizeof(::pdpb::ReportSplitResponse)},
  { 286, -1, sizeof(::pdpb::AskBatchSplitRequest)},
  { 294, -1, sizeof(::pdpb::SplitID)},
  { 301, -1, sizeof(::pdpb::AskBatchSplitResponse)},
  { 308, -1, sizeof(::pdpb::ReportBatchSplitRequest)},
  { 315, -1, sizeof(::pdpb::ReportBatchSplitResponse)},
  { 321, -1, sizeof(::pdpb::TimeInterval)},
  { 328, -1, sizeof(::pdpb::StoreStats)},
  { 348, -1, sizeof(::pdpb::StoreHeartbeatRequest)},
  { 355, -1, sizeof(::pdpb::StoreHeartbeatResponse)},
  { 361, -1, sizeof(::pdpb::ScatterRegionRequest)},
  { 370, -1, sizeof(::pdpb::ScatterRegionResponse)},
  { 376, -1, sizeof(::pdpb::GetGCSafePointRequest)},
  { 382, -1, sizeof(::pdpb::GetGCSafePointResponse)},
  { 389, -1, sizeof(::pdpb::UpdateGCSafePointRequest)},
  { 396, -1, sizeof(::pdpb::UpdateGCSafePointResponse)},
  { 403, -1, sizeof(::pdpb::SyncRegionRequest)},
  { 410, -1, sizeof(::pdpb::SyncRegionResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_RequestHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_ResponseHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_Error_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_TsoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_Timestamp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_TsoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_BootstrapRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_BootstrapResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_IsBootstrappedRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_IsBootstrappedResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_AllocIDRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_AllocIDResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_GetStoreRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_GetStoreResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_PutStoreRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_PutStoreResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_GetAllStoresRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_GetAllStoresResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_GetRegionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_GetRegionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_GetRegionByIDRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_GetClusterConfigRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_GetClusterConfigResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_PutClusterConfigRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_PutClusterConfigResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_Member_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_GetMembersRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_GetMembersResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_PeerStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_RegionHeartbeatRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_ChangePeer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_TransferLeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_Merge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_SplitRegion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_RegionHeartbeatResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_AskSplitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_AskSplitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_ReportSplitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_ReportSplitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_AskBatchSplitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_SplitID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_AskBatchSplitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_ReportBatchSplitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_ReportBatchSplitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_TimeInterval_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_StoreStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_StoreHeartbeatRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_StoreHeartbeatResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_ScatterRegionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_ScatterRegionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_GetGCSafePointRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_GetGCSafePointResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_UpdateGCSafePointRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_UpdateGCSafePointResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_SyncRegionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pdpb::_SyncRegionResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_pdpb_2eproto = {
  {}, AddDescriptors_pdpb_2eproto, "pdpb.proto", schemas,
  file_default_instances, TableStruct_pdpb_2eproto::offsets,
  file_level_metadata_pdpb_2eproto, 56, file_level_enum_descriptors_pdpb_2eproto, file_level_service_descriptors_pdpb_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_pdpb_2eproto = {
  false, InitDefaults_pdpb_2eproto, 
  "\n\npdpb.proto\022\004pdpb\032\014metapb.proto\032\reraftp"
  "b.proto\032\024gogoproto/gogo.proto\"#\n\rRequest"
  "Header\022\022\n\ncluster_id\030\001 \001(\004\"@\n\016ResponseHe"
  "ader\022\022\n\ncluster_id\030\001 \001(\004\022\032\n\005error\030\002 \001(\0132"
  "\013.pdpb.Error\"7\n\005Error\022\035\n\004type\030\001 \001(\0162\017.pd"
  "pb.ErrorType\022\017\n\007message\030\002 \001(\t\"@\n\nTsoRequ"
  "est\022#\n\006header\030\001 \001(\0132\023.pdpb.RequestHeader"
  "\022\r\n\005count\030\002 \001(\r\".\n\tTimestamp\022\020\n\010physical"
  "\030\001 \001(\003\022\017\n\007logical\030\002 \001(\003\"f\n\013TsoResponse\022$"
  "\n\006header\030\001 \001(\0132\024.pdpb.ResponseHeader\022\r\n\005"
  "count\030\002 \001(\r\022\"\n\ttimestamp\030\003 \001(\0132\017.pdpb.Ti"
  "mestamp\"u\n\020BootstrapRequest\022#\n\006header\030\001 "
  "\001(\0132\023.pdpb.RequestHeader\022\034\n\005store\030\002 \001(\0132"
  "\r.metapb.Store\022\036\n\006region\030\003 \001(\0132\016.metapb."
  "Region\"9\n\021BootstrapResponse\022$\n\006header\030\001 "
  "\001(\0132\024.pdpb.ResponseHeader\"<\n\025IsBootstrap"
  "pedRequest\022#\n\006header\030\001 \001(\0132\023.pdpb.Reques"
  "tHeader\"T\n\026IsBootstrappedResponse\022$\n\006hea"
  "der\030\001 \001(\0132\024.pdpb.ResponseHeader\022\024\n\014boots"
  "trapped\030\002 \001(\010\"5\n\016AllocIDRequest\022#\n\006heade"
  "r\030\001 \001(\0132\023.pdpb.RequestHeader\"C\n\017AllocIDR"
  "esponse\022$\n\006header\030\001 \001(\0132\024.pdpb.ResponseH"
  "eader\022\n\n\002id\030\002 \001(\004\"H\n\017GetStoreRequest\022#\n\006"
  "header\030\001 \001(\0132\023.pdpb.RequestHeader\022\020\n\010sto"
  "re_id\030\002 \001(\004\"V\n\020GetStoreResponse\022$\n\006heade"
  "r\030\001 \001(\0132\024.pdpb.ResponseHeader\022\034\n\005store\030\002"
  " \001(\0132\r.metapb.Store\"T\n\017PutStoreRequest\022#"
  "\n\006header\030\001 \001(\0132\023.pdpb.RequestHeader\022\034\n\005s"
  "tore\030\002 \001(\0132\r.metapb.Store\"8\n\020PutStoreRes"
  "ponse\022$\n\006header\030\001 \001(\0132\024.pdpb.ResponseHea"
  "der\":\n\023GetAllStoresRequest\022#\n\006header\030\001 \001"
  "(\0132\023.pdpb.RequestHeader\"[\n\024GetAllStoresR"
  "esponse\022$\n\006header\030\001 \001(\0132\024.pdpb.ResponseH"
  "eader\022\035\n\006stores\030\002 \003(\0132\r.metapb.Store\"K\n\020"
  "GetRegionRequest\022#\n\006header\030\001 \001(\0132\023.pdpb."
  "RequestHeader\022\022\n\nregion_key\030\002 \001(\014\"w\n\021Get"
  "RegionResponse\022$\n\006header\030\001 \001(\0132\024.pdpb.Re"
  "sponseHeader\022\036\n\006region\030\002 \001(\0132\016.metapb.Re"
  "gion\022\034\n\006leader\030\003 \001(\0132\014.metapb.Peer\"N\n\024Ge"
  "tRegionByIDRequest\022#\n\006header\030\001 \001(\0132\023.pdp"
  "b.RequestHeader\022\021\n\tregion_id\030\002 \001(\004\">\n\027Ge"
  "tClusterConfigRequest\022#\n\006header\030\001 \001(\0132\023."
  "pdpb.RequestHeader\"b\n\030GetClusterConfigRe"
  "sponse\022$\n\006header\030\001 \001(\0132\024.pdpb.ResponseHe"
  "ader\022 \n\007cluster\030\002 \001(\0132\017.metapb.Cluster\"`"
  "\n\027PutClusterConfigRequest\022#\n\006header\030\001 \001("
  "\0132\023.pdpb.RequestHeader\022 \n\007cluster\030\002 \001(\0132"
  "\017.metapb.Cluster\"@\n\030PutClusterConfigResp"
  "onse\022$\n\006header\030\001 \001(\0132\024.pdpb.ResponseHead"
  "er\"j\n\006Member\022\014\n\004name\030\001 \001(\t\022\021\n\tmember_id\030"
  "\002 \001(\004\022\021\n\tpeer_urls\030\003 \003(\t\022\023\n\013client_urls\030"
  "\004 \003(\t\022\027\n\017leader_priority\030\005 \001(\005\"8\n\021GetMem"
  "bersRequest\022#\n\006header\030\001 \001(\0132\023.pdpb.Reque"
  "stHeader\"\232\001\n\022GetMembersResponse\022$\n\006heade"
  "r\030\001 \001(\0132\024.pdpb.ResponseHeader\022\035\n\007members"
  "\030\002 \003(\0132\014.pdpb.Member\022\034\n\006leader\030\003 \001(\0132\014.p"
  "dpb.Member\022!\n\013etcd_leader\030\004 \001(\0132\014.pdpb.M"
  "ember\"=\n\tPeerStats\022\032\n\004peer\030\001 \001(\0132\014.metap"
  "b.Peer\022\024\n\014down_seconds\030\002 \001(\004\"\371\002\n\026RegionH"
  "eartbeatRequest\022#\n\006header\030\001 \001(\0132\023.pdpb.R"
  "equestHeader\022\036\n\006region\030\002 \001(\0132\016.metapb.Re"
  "gion\022\034\n\006leader\030\003 \001(\0132\014.metapb.Peer\022#\n\ndo"
  "wn_peers\030\004 \003(\0132\017.pdpb.PeerStats\022#\n\rpendi"
  "ng_peers\030\005 \003(\0132\014.metapb.Peer\022\025\n\rbytes_wr"
  "itten\030\006 \001(\004\022\022\n\nbytes_read\030\007 \001(\004\022\024\n\014keys_"
  "written\030\010 \001(\004\022\021\n\tkeys_read\030\t \001(\004\022\030\n\020appr"
  "oximate_size\030\n \001(\004\022$\n\010interval\030\014 \001(\0132\022.p"
  "dpb.TimeInterval\022\030\n\020approximate_keys\030\r \001"
  "(\004J\004\010\013\020\014\"V\n\nChangePeer\022\032\n\004peer\030\001 \001(\0132\014.m"
  "etapb.Peer\022,\n\013change_type\030\002 \001(\0162\027.eraftp"
  "b.ConfChangeType\",\n\016TransferLeader\022\032\n\004pe"
  "er\030\001 \001(\0132\014.metapb.Peer\"\'\n\005Merge\022\036\n\006targe"
  "t\030\001 \001(\0132\016.metapb.Region\"0\n\013SplitRegion\022!"
  "\n\006policy\030\001 \001(\0162\021.pdpb.CheckPolicy\"\273\002\n\027Re"
  "gionHeartbeatResponse\022$\n\006header\030\001 \001(\0132\024."
  "pdpb.ResponseHeader\022%\n\013change_peer\030\002 \001(\013"
  "2\020.pdpb.ChangePeer\022-\n\017transfer_leader\030\003 "
  "\001(\0132\024.pdpb.TransferLeader\022\021\n\tregion_id\030\004"
  " \001(\004\022)\n\014region_epoch\030\005 \001(\0132\023.metapb.Regi"
  "onEpoch\022!\n\013target_peer\030\006 \001(\0132\014.metapb.Pe"
  "er\022\032\n\005merge\030\007 \001(\0132\013.pdpb.Merge\022\'\n\014split_"
  "region\030\010 \001(\0132\021.pdpb.SplitRegion\"V\n\017AskSp"
  "litRequest\022#\n\006header\030\001 \001(\0132\023.pdpb.Reques"
  "tHeader\022\036\n\006region\030\002 \001(\0132\016.metapb.Region\""
  "e\n\020AskSplitResponse\022$\n\006header\030\001 \001(\0132\024.pd"
  "pb.ResponseHeader\022\025\n\rnew_region_id\030\002 \001(\004"
  "\022\024\n\014new_peer_ids\030\003 \003(\004\"v\n\022ReportSplitReq"
  "uest\022#\n\006header\030\001 \001(\0132\023.pdpb.RequestHeade"
  "r\022\034\n\004left\030\002 \001(\0132\016.metapb.Region\022\035\n\005right"
  "\030\003 \001(\0132\016.metapb.Region\";\n\023ReportSplitRes"
  "ponse\022$\n\006header\030\001 \001(\0132\024.pdpb.ResponseHea"
  "der\"p\n\024AskBatchSplitRequest\022#\n\006header\030\001 "
  "\001(\0132\023.pdpb.RequestHeader\022\036\n\006region\030\002 \001(\013"
  "2\016.metapb.Region\022\023\n\013split_count\030\003 \001(\r\"6\n"
  "\007SplitID\022\025\n\rnew_region_id\030\001 \001(\004\022\024\n\014new_p"
  "eer_ids\030\002 \003(\004\"Y\n\025AskBatchSplitResponse\022$"
  "\n\006header\030\001 \001(\0132\024.pdpb.ResponseHeader\022\032\n\003"
  "ids\030\002 \003(\0132\r.pdpb.SplitID\"_\n\027ReportBatchS"
  "plitRequest\022#\n\006header\030\001 \001(\0132\023.pdpb.Reque"
  "stHeader\022\037\n\007regions\030\002 \003(\0132\016.metapb.Regio"
  "n\"@\n\030ReportBatchSplitResponse\022$\n\006header\030"
  "\001 \001(\0132\024.pdpb.ResponseHeader\">\n\014TimeInter"
  "val\022\027\n\017start_timestamp\030\001 \001(\004\022\025\n\rend_time"
  "stamp\030\002 \001(\004\"\342\002\n\nStoreStats\022\020\n\010store_id\030\001"
  " \001(\004\022\020\n\010capacity\030\002 \001(\004\022\021\n\tavailable\030\003 \001("
  "\004\022\024\n\014region_count\030\004 \001(\r\022\032\n\022sending_snap_"
  "count\030\005 \001(\r\022\034\n\024receiving_snap_count\030\006 \001("
  "\r\022\022\n\nstart_time\030\007 \001(\r\022\033\n\023applying_snap_c"
  "ount\030\010 \001(\r\022\017\n\007is_busy\030\t \001(\010\022\021\n\tused_size"
  "\030\n \001(\004\022\025\n\rbytes_written\030\013 \001(\004\022\024\n\014keys_wr"
  "itten\030\014 \001(\004\022\022\n\nbytes_read\030\r \001(\004\022\021\n\tkeys_"
  "read\030\016 \001(\004\022$\n\010interval\030\017 \001(\0132\022.pdpb.Time"
  "Interval\"]\n\025StoreHeartbeatRequest\022#\n\006hea"
  "der\030\001 \001(\0132\023.pdpb.RequestHeader\022\037\n\005stats\030"
  "\002 \001(\0132\020.pdpb.StoreStats\">\n\026StoreHeartbea"
  "tResponse\022$\n\006header\030\001 \001(\0132\024.pdpb.Respons"
  "eHeader\"\214\001\n\024ScatterRegionRequest\022#\n\006head"
  "er\030\001 \001(\0132\023.pdpb.RequestHeader\022\021\n\tregion_"
  "id\030\002 \001(\004\022\036\n\006region\030\003 \001(\0132\016.metapb.Region"
  "\022\034\n\006leader\030\004 \001(\0132\014.metapb.Peer\"=\n\025Scatte"
  "rRegionResponse\022$\n\006header\030\001 \001(\0132\024.pdpb.R"
  "esponseHeader\"<\n\025GetGCSafePointRequest\022#"
  "\n\006header\030\001 \001(\0132\023.pdpb.RequestHeader\"R\n\026G"
  "etGCSafePointResponse\022$\n\006header\030\001 \001(\0132\024."
  "pdpb.ResponseHeader\022\022\n\nsafe_point\030\002 \001(\004\""
  "S\n\030UpdateGCSafePointRequest\022#\n\006header\030\001 "
  "\001(\0132\023.pdpb.RequestHeader\022\022\n\nsafe_point\030\002"
  " \001(\004\"Y\n\031UpdateGCSafePointResponse\022$\n\006hea"
  "der\030\001 \001(\0132\024.pdpb.ResponseHeader\022\026\n\016new_s"
  "afe_point\030\002 \001(\004\"V\n\021SyncRegionRequest\022#\n\006"
  "header\030\001 \001(\0132\023.pdpb.RequestHeader\022\034\n\006mem"
  "ber\030\002 \001(\0132\014.pdpb.Member\"[\n\022SyncRegionRes"
  "ponse\022$\n\006header\030\001 \001(\0132\024.pdpb.ResponseHea"
  "der\022\037\n\007regions\030\002 \003(\0132\016.metapb.Region*\177\n\t"
  "ErrorType\022\006\n\002OK\020\000\022\013\n\007UNKNOWN\020\001\022\024\n\020NOT_BO"
  "OTSTRAPPED\020\002\022\023\n\017STORE_TOMBSTONE\020\003\022\030\n\024ALR"
  "EADY_BOOTSTRAPPED\020\004\022\030\n\024INCOMPATIBLE_VERS"
  "ION\020\005*(\n\013CheckPolicy\022\010\n\004SCAN\020\000\022\017\n\013APPROX"
  "IMATE\020\0012\205\r\n\002PD\022A\n\nGetMembers\022\027.pdpb.GetM"
  "embersRequest\032\030.pdpb.GetMembersResponse\""
  "\000\0220\n\003Tso\022\020.pdpb.TsoRequest\032\021.pdpb.TsoRes"
  "ponse\"\000(\0010\001\022>\n\tBootstrap\022\026.pdpb.Bootstra"
  "pRequest\032\027.pdpb.BootstrapResponse\"\000\022M\n\016I"
  "sBootstrapped\022\033.pdpb.IsBootstrappedReque"
  "st\032\034.pdpb.IsBootstrappedResponse\"\000\0228\n\007Al"
  "locID\022\024.pdpb.AllocIDRequest\032\025.pdpb.Alloc"
  "IDResponse\"\000\022;\n\010GetStore\022\025.pdpb.GetStore"
  "Request\032\026.pdpb.GetStoreResponse\"\000\022;\n\010Put"
  "Store\022\025.pdpb.PutStoreRequest\032\026.pdpb.PutS"
  "toreResponse\"\000\022G\n\014GetAllStores\022\031.pdpb.Ge"
  "tAllStoresRequest\032\032.pdpb.GetAllStoresRes"
  "ponse\"\000\022M\n\016StoreHeartbeat\022\033.pdpb.StoreHe"
  "artbeatRequest\032\034.pdpb.StoreHeartbeatResp"
  "onse\"\000\022T\n\017RegionHeartbeat\022\034.pdpb.RegionH"
  "eartbeatRequest\032\035.pdpb.RegionHeartbeatRe"
  "sponse\"\000(\0010\001\022>\n\tGetRegion\022\026.pdpb.GetRegi"
  "onRequest\032\027.pdpb.GetRegionResponse\"\000\022B\n\r"
  "GetPrevRegion\022\026.pdpb.GetRegionRequest\032\027."
  "pdpb.GetRegionResponse\"\000\022F\n\rGetRegionByI"
  "D\022\032.pdpb.GetRegionByIDRequest\032\027.pdpb.Get"
  "RegionResponse\"\000\022>\n\010AskSplit\022\025.pdpb.AskS"
  "plitRequest\032\026.pdpb.AskSplitResponse\"\003\210\002\001"
  "\022G\n\013ReportSplit\022\030.pdpb.ReportSplitReques"
  "t\032\031.pdpb.ReportSplitResponse\"\003\210\002\001\022J\n\rAsk"
  "BatchSplit\022\032.pdpb.AskBatchSplitRequest\032\033"
  ".pdpb.AskBatchSplitResponse\"\000\022S\n\020ReportB"
  "atchSplit\022\035.pdpb.ReportBatchSplitRequest"
  "\032\036.pdpb.ReportBatchSplitResponse\"\000\022S\n\020Ge"
  "tClusterConfig\022\035.pdpb.GetClusterConfigRe"
  "quest\032\036.pdpb.GetClusterConfigResponse\"\000\022"
  "S\n\020PutClusterConfig\022\035.pdpb.PutClusterCon"
  "figRequest\032\036.pdpb.PutClusterConfigRespon"
  "se\"\000\022J\n\rScatterRegion\022\032.pdpb.ScatterRegi"
  "onRequest\032\033.pdpb.ScatterRegionResponse\"\000"
  "\022M\n\016GetGCSafePoint\022\033.pdpb.GetGCSafePoint"
  "Request\032\034.pdpb.GetGCSafePointResponse\"\000\022"
  "V\n\021UpdateGCSafePoint\022\036.pdpb.UpdateGCSafe"
  "PointRequest\032\037.pdpb.UpdateGCSafePointRes"
  "ponse\"\000\022F\n\013SyncRegions\022\027.pdpb.SyncRegion"
  "Request\032\030.pdpb.SyncRegionResponse\"\000(\0010\001B"
  "&\n\030com.pingcap.tikv.kvproto\340\342\036\001\310\342\036\001\320\342\036\001b"
  "\006proto3"
,
  "pdpb.proto", &assign_descriptors_table_pdpb_2eproto, 7247,
};

void AddDescriptors_pdpb_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_metapb_2eproto,
    ::AddDescriptors_eraftpb_2eproto,
    ::AddDescriptors_gogoproto_2fgogo_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_pdpb_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pdpb_2eproto = []() { AddDescriptors_pdpb_2eproto(); return true; }();
namespace pdpb {
const ::google::protobuf::EnumDescriptor* ErrorType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_pdpb_2eproto);
  return file_level_enum_descriptors_pdpb_2eproto[0];
}
bool ErrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CheckPolicy_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_pdpb_2eproto);
  return file_level_enum_descriptors_pdpb_2eproto[1];
}
bool CheckPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RequestHeader::InitAsDefaultInstance() {
}
class RequestHeader::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestHeader::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestHeader::RequestHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.RequestHeader)
}
RequestHeader::RequestHeader(const RequestHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cluster_id_ = from.cluster_id_;
  // @@protoc_insertion_point(copy_constructor:pdpb.RequestHeader)
}

void RequestHeader::SharedCtor() {
  cluster_id_ = GOOGLE_PROTOBUF_ULONGLONG(0);
}

RequestHeader::~RequestHeader() {
  // @@protoc_insertion_point(destructor:pdpb.RequestHeader)
  SharedDtor();
}

void RequestHeader::SharedDtor() {
}

void RequestHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestHeader& RequestHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RequestHeader_pdpb_2eproto.base);
  return *internal_default_instance();
}


void RequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cluster_id_ = GOOGLE_PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestHeader::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RequestHeader*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // uint64 cluster_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_cluster_id(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.RequestHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 cluster_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.RequestHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.RequestHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cluster_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.RequestHeader)
}

::google::protobuf::uint8* RequestHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cluster_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.RequestHeader)
  return target;
}

size_t RequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.RequestHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cluster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestHeader* source =
      ::google::protobuf::DynamicCastToGenerated<RequestHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.RequestHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.RequestHeader)
    MergeFrom(*source);
  }
}

void RequestHeader::MergeFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
}

void RequestHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHeader::CopyFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeader::IsInitialized() const {
  return true;
}

void RequestHeader::Swap(RequestHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestHeader::InternalSwap(RequestHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cluster_id_, other->cluster_id_);
}

::google::protobuf::Metadata RequestHeader::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ResponseHeader::InitAsDefaultInstance() {
  ::pdpb::_ResponseHeader_default_instance_._instance.get_mutable()->error_ = const_cast< ::pdpb::Error*>(
      ::pdpb::Error::internal_default_instance());
}
class ResponseHeader::HasBitSetters {
 public:
  static const ::pdpb::Error& error(const ResponseHeader* msg);
};

const ::pdpb::Error&
ResponseHeader::HasBitSetters::error(const ResponseHeader* msg) {
  return *msg->error_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseHeader::kClusterIdFieldNumber;
const int ResponseHeader::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseHeader::ResponseHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.ResponseHeader)
}
ResponseHeader::ResponseHeader(const ResponseHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::pdpb::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  cluster_id_ = from.cluster_id_;
  // @@protoc_insertion_point(copy_constructor:pdpb.ResponseHeader)
}

void ResponseHeader::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ResponseHeader_pdpb_2eproto.base);
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cluster_id_) -
      reinterpret_cast<char*>(&error_)) + sizeof(cluster_id_));
}

ResponseHeader::~ResponseHeader() {
  // @@protoc_insertion_point(destructor:pdpb.ResponseHeader)
  SharedDtor();
}

void ResponseHeader::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
}

void ResponseHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseHeader& ResponseHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ResponseHeader_pdpb_2eproto.base);
  return *internal_default_instance();
}


void ResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  cluster_id_ = GOOGLE_PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResponseHeader::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ResponseHeader*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // uint64 cluster_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_cluster_id(value);
        break;
      }
      // .pdpb.Error error = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::Error::_InternalParse;
        object = msg->mutable_error();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.ResponseHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 cluster_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pdpb.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.ResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.ResponseHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cluster_id(), output);
  }

  // .pdpb.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::error(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.ResponseHeader)
}

::google::protobuf::uint8* ResponseHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cluster_id(), target);
  }

  // .pdpb.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::error(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.ResponseHeader)
  return target;
}

size_t ResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.ResponseHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cluster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseHeader* source =
      ::google::protobuf::DynamicCastToGenerated<ResponseHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.ResponseHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.ResponseHeader)
    MergeFrom(*source);
  }
}

void ResponseHeader::MergeFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error()) {
    mutable_error()->::pdpb::Error::MergeFrom(from.error());
  }
  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
}

void ResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseHeader::CopyFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeader::IsInitialized() const {
  return true;
}

void ResponseHeader::Swap(ResponseHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseHeader::InternalSwap(ResponseHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(error_, other->error_);
  swap(cluster_id_, other->cluster_id_);
}

::google::protobuf::Metadata ResponseHeader::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Error::InitAsDefaultInstance() {
}
class Error::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kTypeFieldNumber;
const int Error::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.Error)
}
Error::Error(const Error& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:pdpb.Error)
}

void Error::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Error_pdpb_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:pdpb.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Error& Error::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Error_pdpb_2eproto.base);
  return *internal_default_instance();
}


void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Error::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Error*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.ErrorType type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::pdpb::ErrorType value = static_cast<::pdpb::ErrorType>(val);
        msg->set_type(value);
        break;
      }
      // string message = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        ctx->extra_parse_data().SetFieldName("pdpb.Error.message");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_message();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.Error)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.ErrorType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pdpb::ErrorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pdpb.Error.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.Error)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ErrorType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdpb.Error.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ErrorType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdpb.Error.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.Error)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // .pdpb.ErrorType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Error* source =
      ::google::protobuf::DynamicCastToGenerated<Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TsoRequest::InitAsDefaultInstance() {
  ::pdpb::_TsoRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
}
class TsoRequest::HasBitSetters {
 public:
  static const ::pdpb::RequestHeader& header(const TsoRequest* msg);
};

const ::pdpb::RequestHeader&
TsoRequest::HasBitSetters::header(const TsoRequest* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TsoRequest::kHeaderFieldNumber;
const int TsoRequest::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TsoRequest::TsoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.TsoRequest)
}
TsoRequest::TsoRequest(const TsoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:pdpb.TsoRequest)
}

void TsoRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TsoRequest_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&header_)) + sizeof(count_));
}

TsoRequest::~TsoRequest() {
  // @@protoc_insertion_point(destructor:pdpb.TsoRequest)
  SharedDtor();
}

void TsoRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void TsoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TsoRequest& TsoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TsoRequest_pdpb_2eproto.base);
  return *internal_default_instance();
}


void TsoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.TsoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  count_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TsoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TsoRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::RequestHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // uint32 count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint32 value = val;
        msg->set_count(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TsoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.TsoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.TsoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.TsoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TsoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.TsoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.TsoRequest)
}

::google::protobuf::uint8* TsoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.TsoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.TsoRequest)
  return target;
}

size_t TsoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.TsoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TsoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.TsoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TsoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<TsoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.TsoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.TsoRequest)
    MergeFrom(*source);
  }
}

void TsoRequest::MergeFrom(const TsoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.TsoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void TsoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.TsoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsoRequest::CopyFrom(const TsoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.TsoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsoRequest::IsInitialized() const {
  return true;
}

void TsoRequest::Swap(TsoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TsoRequest::InternalSwap(TsoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(count_, other->count_);
}

::google::protobuf::Metadata TsoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Timestamp::InitAsDefaultInstance() {
}
class Timestamp::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Timestamp::kPhysicalFieldNumber;
const int Timestamp::kLogicalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Timestamp::Timestamp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.Timestamp)
}
Timestamp::Timestamp(const Timestamp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&physical_, &from.physical_,
    static_cast<size_t>(reinterpret_cast<char*>(&logical_) -
    reinterpret_cast<char*>(&physical_)) + sizeof(logical_));
  // @@protoc_insertion_point(copy_constructor:pdpb.Timestamp)
}

void Timestamp::SharedCtor() {
  ::memset(&physical_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logical_) -
      reinterpret_cast<char*>(&physical_)) + sizeof(logical_));
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:pdpb.Timestamp)
  SharedDtor();
}

void Timestamp::SharedDtor() {
}

void Timestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Timestamp& Timestamp::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Timestamp_pdpb_2eproto.base);
  return *internal_default_instance();
}


void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.Timestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&physical_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logical_) -
      reinterpret_cast<char*>(&physical_)) + sizeof(logical_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Timestamp::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Timestamp*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // int64 physical = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int64 value = val;
        msg->set_physical(value);
        break;
      }
      // int64 logical = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int64 value = val;
        msg->set_logical(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Timestamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.Timestamp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 physical = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &physical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 logical = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.Timestamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.Timestamp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Timestamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.Timestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 physical = 1;
  if (this->physical() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->physical(), output);
  }

  // int64 logical = 2;
  if (this->logical() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->logical(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.Timestamp)
}

::google::protobuf::uint8* Timestamp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.Timestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 physical = 1;
  if (this->physical() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->physical(), target);
  }

  // int64 logical = 2;
  if (this->logical() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->logical(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.Timestamp)
  return target;
}

size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.Timestamp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 physical = 1;
  if (this->physical() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->physical());
  }

  // int64 logical = 2;
  if (this->logical() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->logical());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Timestamp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  const Timestamp* source =
      ::google::protobuf::DynamicCastToGenerated<Timestamp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.Timestamp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.Timestamp)
    MergeFrom(*source);
  }
}

void Timestamp::MergeFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.physical() != 0) {
    set_physical(from.physical());
  }
  if (from.logical() != 0) {
    set_logical(from.logical());
  }
}

void Timestamp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {
  return true;
}

void Timestamp::Swap(Timestamp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Timestamp::InternalSwap(Timestamp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(physical_, other->physical_);
  swap(logical_, other->logical_);
}

::google::protobuf::Metadata Timestamp::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TsoResponse::InitAsDefaultInstance() {
  ::pdpb::_TsoResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
  ::pdpb::_TsoResponse_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::pdpb::Timestamp*>(
      ::pdpb::Timestamp::internal_default_instance());
}
class TsoResponse::HasBitSetters {
 public:
  static const ::pdpb::ResponseHeader& header(const TsoResponse* msg);
  static const ::pdpb::Timestamp& timestamp(const TsoResponse* msg);
};

const ::pdpb::ResponseHeader&
TsoResponse::HasBitSetters::header(const TsoResponse* msg) {
  return *msg->header_;
}
const ::pdpb::Timestamp&
TsoResponse::HasBitSetters::timestamp(const TsoResponse* msg) {
  return *msg->timestamp_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TsoResponse::kHeaderFieldNumber;
const int TsoResponse::kCountFieldNumber;
const int TsoResponse::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TsoResponse::TsoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.TsoResponse)
}
TsoResponse::TsoResponse(const TsoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::pdpb::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:pdpb.TsoResponse)
}

void TsoResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TsoResponse_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&header_)) + sizeof(count_));
}

TsoResponse::~TsoResponse() {
  // @@protoc_insertion_point(destructor:pdpb.TsoResponse)
  SharedDtor();
}

void TsoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete timestamp_;
}

void TsoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TsoResponse& TsoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TsoResponse_pdpb_2eproto.base);
  return *internal_default_instance();
}


void TsoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.TsoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  count_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TsoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TsoResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // uint32 count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint32 value = val;
        msg->set_count(value);
        break;
      }
      // .pdpb.Timestamp timestamp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::Timestamp::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TsoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.TsoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pdpb.Timestamp timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.TsoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.TsoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TsoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.TsoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // .pdpb.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::timestamp(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.TsoResponse)
}

::google::protobuf::uint8* TsoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.TsoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // .pdpb.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::timestamp(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.TsoResponse)
  return target;
}

size_t TsoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.TsoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .pdpb.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TsoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.TsoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TsoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<TsoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.TsoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.TsoResponse)
    MergeFrom(*source);
  }
}

void TsoResponse::MergeFrom(const TsoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.TsoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::pdpb::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void TsoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.TsoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsoResponse::CopyFrom(const TsoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.TsoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsoResponse::IsInitialized() const {
  return true;
}

void TsoResponse::Swap(TsoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TsoResponse::InternalSwap(TsoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(timestamp_, other->timestamp_);
  swap(count_, other->count_);
}

::google::protobuf::Metadata TsoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BootstrapRequest::InitAsDefaultInstance() {
  ::pdpb::_BootstrapRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
  ::pdpb::_BootstrapRequest_default_instance_._instance.get_mutable()->store_ = const_cast< ::metapb::Store*>(
      ::metapb::Store::internal_default_instance());
  ::pdpb::_BootstrapRequest_default_instance_._instance.get_mutable()->region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}
class BootstrapRequest::HasBitSetters {
 public:
  static const ::pdpb::RequestHeader& header(const BootstrapRequest* msg);
  static const ::metapb::Store& store(const BootstrapRequest* msg);
  static const ::metapb::Region& region(const BootstrapRequest* msg);
};

const ::pdpb::RequestHeader&
BootstrapRequest::HasBitSetters::header(const BootstrapRequest* msg) {
  return *msg->header_;
}
const ::metapb::Store&
BootstrapRequest::HasBitSetters::store(const BootstrapRequest* msg) {
  return *msg->store_;
}
const ::metapb::Region&
BootstrapRequest::HasBitSetters::region(const BootstrapRequest* msg) {
  return *msg->region_;
}
void BootstrapRequest::clear_store() {
  if (GetArenaNoVirtual() == NULL && store_ != NULL) {
    delete store_;
  }
  store_ = NULL;
}
void BootstrapRequest::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) {
    delete region_;
  }
  region_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BootstrapRequest::kHeaderFieldNumber;
const int BootstrapRequest::kStoreFieldNumber;
const int BootstrapRequest::kRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BootstrapRequest::BootstrapRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.BootstrapRequest)
}
BootstrapRequest::BootstrapRequest(const BootstrapRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_store()) {
    store_ = new ::metapb::Store(*from.store_);
  } else {
    store_ = NULL;
  }
  if (from.has_region()) {
    region_ = new ::metapb::Region(*from.region_);
  } else {
    region_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.BootstrapRequest)
}

void BootstrapRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BootstrapRequest_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_) -
      reinterpret_cast<char*>(&header_)) + sizeof(region_));
}

BootstrapRequest::~BootstrapRequest() {
  // @@protoc_insertion_point(destructor:pdpb.BootstrapRequest)
  SharedDtor();
}

void BootstrapRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete store_;
  if (this != internal_default_instance()) delete region_;
}

void BootstrapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BootstrapRequest& BootstrapRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BootstrapRequest_pdpb_2eproto.base);
  return *internal_default_instance();
}


void BootstrapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.BootstrapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && store_ != NULL) {
    delete store_;
  }
  store_ = NULL;
  if (GetArenaNoVirtual() == NULL && region_ != NULL) {
    delete region_;
  }
  region_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BootstrapRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BootstrapRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::RequestHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .metapb.Store store = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Store::_InternalParse;
        object = msg->mutable_store();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .metapb.Region region = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Region::_InternalParse;
        object = msg->mutable_region();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BootstrapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.BootstrapRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Store store = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_store()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Region region = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.BootstrapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.BootstrapRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BootstrapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.BootstrapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .metapb.Store store = 2;
  if (this->has_store()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::store(this), output);
  }

  // .metapb.Region region = 3;
  if (this->has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::region(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.BootstrapRequest)
}

::google::protobuf::uint8* BootstrapRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.BootstrapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // .metapb.Store store = 2;
  if (this->has_store()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::store(this), deterministic, target);
  }

  // .metapb.Region region = 3;
  if (this->has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::region(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.BootstrapRequest)
  return target;
}

size_t BootstrapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.BootstrapRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .metapb.Store store = 2;
  if (this->has_store()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *store_);
  }

  // .metapb.Region region = 3;
  if (this->has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *region_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BootstrapRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.BootstrapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BootstrapRequest* source =
      ::google::protobuf::DynamicCastToGenerated<BootstrapRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.BootstrapRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.BootstrapRequest)
    MergeFrom(*source);
  }
}

void BootstrapRequest::MergeFrom(const BootstrapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.BootstrapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_store()) {
    mutable_store()->::metapb::Store::MergeFrom(from.store());
  }
  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
}

void BootstrapRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.BootstrapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BootstrapRequest::CopyFrom(const BootstrapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.BootstrapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BootstrapRequest::IsInitialized() const {
  return true;
}

void BootstrapRequest::Swap(BootstrapRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BootstrapRequest::InternalSwap(BootstrapRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(store_, other->store_);
  swap(region_, other->region_);
}

::google::protobuf::Metadata BootstrapRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BootstrapResponse::InitAsDefaultInstance() {
  ::pdpb::_BootstrapResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}
class BootstrapResponse::HasBitSetters {
 public:
  static const ::pdpb::ResponseHeader& header(const BootstrapResponse* msg);
};

const ::pdpb::ResponseHeader&
BootstrapResponse::HasBitSetters::header(const BootstrapResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BootstrapResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BootstrapResponse::BootstrapResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.BootstrapResponse)
}
BootstrapResponse::BootstrapResponse(const BootstrapResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.BootstrapResponse)
}

void BootstrapResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BootstrapResponse_pdpb_2eproto.base);
  header_ = NULL;
}

BootstrapResponse::~BootstrapResponse() {
  // @@protoc_insertion_point(destructor:pdpb.BootstrapResponse)
  SharedDtor();
}

void BootstrapResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void BootstrapResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BootstrapResponse& BootstrapResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BootstrapResponse_pdpb_2eproto.base);
  return *internal_default_instance();
}


void BootstrapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.BootstrapResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BootstrapResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BootstrapResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BootstrapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.BootstrapResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.BootstrapResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.BootstrapResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BootstrapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.BootstrapResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.BootstrapResponse)
}

::google::protobuf::uint8* BootstrapResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.BootstrapResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.BootstrapResponse)
  return target;
}

size_t BootstrapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.BootstrapResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BootstrapResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.BootstrapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BootstrapResponse* source =
      ::google::protobuf::DynamicCastToGenerated<BootstrapResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.BootstrapResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.BootstrapResponse)
    MergeFrom(*source);
  }
}

void BootstrapResponse::MergeFrom(const BootstrapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.BootstrapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
}

void BootstrapResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.BootstrapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BootstrapResponse::CopyFrom(const BootstrapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.BootstrapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BootstrapResponse::IsInitialized() const {
  return true;
}

void BootstrapResponse::Swap(BootstrapResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BootstrapResponse::InternalSwap(BootstrapResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::google::protobuf::Metadata BootstrapResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void IsBootstrappedRequest::InitAsDefaultInstance() {
  ::pdpb::_IsBootstrappedRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
}
class IsBootstrappedRequest::HasBitSetters {
 public:
  static const ::pdpb::RequestHeader& header(const IsBootstrappedRequest* msg);
};

const ::pdpb::RequestHeader&
IsBootstrappedRequest::HasBitSetters::header(const IsBootstrappedRequest* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IsBootstrappedRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IsBootstrappedRequest::IsBootstrappedRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.IsBootstrappedRequest)
}
IsBootstrappedRequest::IsBootstrappedRequest(const IsBootstrappedRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.IsBootstrappedRequest)
}

void IsBootstrappedRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_IsBootstrappedRequest_pdpb_2eproto.base);
  header_ = NULL;
}

IsBootstrappedRequest::~IsBootstrappedRequest() {
  // @@protoc_insertion_point(destructor:pdpb.IsBootstrappedRequest)
  SharedDtor();
}

void IsBootstrappedRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void IsBootstrappedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsBootstrappedRequest& IsBootstrappedRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_IsBootstrappedRequest_pdpb_2eproto.base);
  return *internal_default_instance();
}


void IsBootstrappedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.IsBootstrappedRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IsBootstrappedRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IsBootstrappedRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::RequestHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IsBootstrappedRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.IsBootstrappedRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.IsBootstrappedRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.IsBootstrappedRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IsBootstrappedRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.IsBootstrappedRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.IsBootstrappedRequest)
}

::google::protobuf::uint8* IsBootstrappedRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.IsBootstrappedRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.IsBootstrappedRequest)
  return target;
}

size_t IsBootstrappedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.IsBootstrappedRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsBootstrappedRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.IsBootstrappedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IsBootstrappedRequest* source =
      ::google::protobuf::DynamicCastToGenerated<IsBootstrappedRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.IsBootstrappedRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.IsBootstrappedRequest)
    MergeFrom(*source);
  }
}

void IsBootstrappedRequest::MergeFrom(const IsBootstrappedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.IsBootstrappedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
}

void IsBootstrappedRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.IsBootstrappedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsBootstrappedRequest::CopyFrom(const IsBootstrappedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.IsBootstrappedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsBootstrappedRequest::IsInitialized() const {
  return true;
}

void IsBootstrappedRequest::Swap(IsBootstrappedRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IsBootstrappedRequest::InternalSwap(IsBootstrappedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::google::protobuf::Metadata IsBootstrappedRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void IsBootstrappedResponse::InitAsDefaultInstance() {
  ::pdpb::_IsBootstrappedResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}
class IsBootstrappedResponse::HasBitSetters {
 public:
  static const ::pdpb::ResponseHeader& header(const IsBootstrappedResponse* msg);
};

const ::pdpb::ResponseHeader&
IsBootstrappedResponse::HasBitSetters::header(const IsBootstrappedResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IsBootstrappedResponse::kHeaderFieldNumber;
const int IsBootstrappedResponse::kBootstrappedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IsBootstrappedResponse::IsBootstrappedResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.IsBootstrappedResponse)
}
IsBootstrappedResponse::IsBootstrappedResponse(const IsBootstrappedResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  bootstrapped_ = from.bootstrapped_;
  // @@protoc_insertion_point(copy_constructor:pdpb.IsBootstrappedResponse)
}

void IsBootstrappedResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_IsBootstrappedResponse_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bootstrapped_) -
      reinterpret_cast<char*>(&header_)) + sizeof(bootstrapped_));
}

IsBootstrappedResponse::~IsBootstrappedResponse() {
  // @@protoc_insertion_point(destructor:pdpb.IsBootstrappedResponse)
  SharedDtor();
}

void IsBootstrappedResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void IsBootstrappedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsBootstrappedResponse& IsBootstrappedResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_IsBootstrappedResponse_pdpb_2eproto.base);
  return *internal_default_instance();
}


void IsBootstrappedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.IsBootstrappedResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  bootstrapped_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IsBootstrappedResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IsBootstrappedResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // bool bootstrapped = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_bootstrapped(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IsBootstrappedResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.IsBootstrappedResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bootstrapped = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bootstrapped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.IsBootstrappedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.IsBootstrappedResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IsBootstrappedResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.IsBootstrappedResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // bool bootstrapped = 2;
  if (this->bootstrapped() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bootstrapped(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.IsBootstrappedResponse)
}

::google::protobuf::uint8* IsBootstrappedResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.IsBootstrappedResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // bool bootstrapped = 2;
  if (this->bootstrapped() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bootstrapped(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.IsBootstrappedResponse)
  return target;
}

size_t IsBootstrappedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.IsBootstrappedResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // bool bootstrapped = 2;
  if (this->bootstrapped() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsBootstrappedResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.IsBootstrappedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IsBootstrappedResponse* source =
      ::google::protobuf::DynamicCastToGenerated<IsBootstrappedResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.IsBootstrappedResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.IsBootstrappedResponse)
    MergeFrom(*source);
  }
}

void IsBootstrappedResponse::MergeFrom(const IsBootstrappedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.IsBootstrappedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.bootstrapped() != 0) {
    set_bootstrapped(from.bootstrapped());
  }
}

void IsBootstrappedResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.IsBootstrappedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsBootstrappedResponse::CopyFrom(const IsBootstrappedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.IsBootstrappedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsBootstrappedResponse::IsInitialized() const {
  return true;
}

void IsBootstrappedResponse::Swap(IsBootstrappedResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IsBootstrappedResponse::InternalSwap(IsBootstrappedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(bootstrapped_, other->bootstrapped_);
}

::google::protobuf::Metadata IsBootstrappedResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AllocIDRequest::InitAsDefaultInstance() {
  ::pdpb::_AllocIDRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
}
class AllocIDRequest::HasBitSetters {
 public:
  static const ::pdpb::RequestHeader& header(const AllocIDRequest* msg);
};

const ::pdpb::RequestHeader&
AllocIDRequest::HasBitSetters::header(const AllocIDRequest* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocIDRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocIDRequest::AllocIDRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.AllocIDRequest)
}
AllocIDRequest::AllocIDRequest(const AllocIDRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.AllocIDRequest)
}

void AllocIDRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AllocIDRequest_pdpb_2eproto.base);
  header_ = NULL;
}

AllocIDRequest::~AllocIDRequest() {
  // @@protoc_insertion_point(destructor:pdpb.AllocIDRequest)
  SharedDtor();
}

void AllocIDRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AllocIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllocIDRequest& AllocIDRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AllocIDRequest_pdpb_2eproto.base);
  return *internal_default_instance();
}


void AllocIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.AllocIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AllocIDRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AllocIDRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::RequestHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AllocIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.AllocIDRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.AllocIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.AllocIDRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AllocIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.AllocIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.AllocIDRequest)
}

::google::protobuf::uint8* AllocIDRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.AllocIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.AllocIDRequest)
  return target;
}

size_t AllocIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.AllocIDRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.AllocIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocIDRequest* source =
      ::google::protobuf::DynamicCastToGenerated<AllocIDRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.AllocIDRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.AllocIDRequest)
    MergeFrom(*source);
  }
}

void AllocIDRequest::MergeFrom(const AllocIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.AllocIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
}

void AllocIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.AllocIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocIDRequest::CopyFrom(const AllocIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.AllocIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocIDRequest::IsInitialized() const {
  return true;
}

void AllocIDRequest::Swap(AllocIDRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllocIDRequest::InternalSwap(AllocIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::google::protobuf::Metadata AllocIDRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AllocIDResponse::InitAsDefaultInstance() {
  ::pdpb::_AllocIDResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}
class AllocIDResponse::HasBitSetters {
 public:
  static const ::pdpb::ResponseHeader& header(const AllocIDResponse* msg);
};

const ::pdpb::ResponseHeader&
AllocIDResponse::HasBitSetters::header(const AllocIDResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocIDResponse::kHeaderFieldNumber;
const int AllocIDResponse::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocIDResponse::AllocIDResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.AllocIDResponse)
}
AllocIDResponse::AllocIDResponse(const AllocIDResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:pdpb.AllocIDResponse)
}

void AllocIDResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AllocIDResponse_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(id_));
}

AllocIDResponse::~AllocIDResponse() {
  // @@protoc_insertion_point(destructor:pdpb.AllocIDResponse)
  SharedDtor();
}

void AllocIDResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AllocIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllocIDResponse& AllocIDResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AllocIDResponse_pdpb_2eproto.base);
  return *internal_default_instance();
}


void AllocIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.AllocIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  id_ = GOOGLE_PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AllocIDResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AllocIDResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // uint64 id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_id(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AllocIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.AllocIDResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.AllocIDResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.AllocIDResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AllocIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.AllocIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.AllocIDResponse)
}

::google::protobuf::uint8* AllocIDResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.AllocIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.AllocIDResponse)
  return target;
}

size_t AllocIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.AllocIDResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocIDResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.AllocIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocIDResponse* source =
      ::google::protobuf::DynamicCastToGenerated<AllocIDResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.AllocIDResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.AllocIDResponse)
    MergeFrom(*source);
  }
}

void AllocIDResponse::MergeFrom(const AllocIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.AllocIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void AllocIDResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.AllocIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocIDResponse::CopyFrom(const AllocIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.AllocIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocIDResponse::IsInitialized() const {
  return true;
}

void AllocIDResponse::Swap(AllocIDResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllocIDResponse::InternalSwap(AllocIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata AllocIDResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetStoreRequest::InitAsDefaultInstance() {
  ::pdpb::_GetStoreRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
}
class GetStoreRequest::HasBitSetters {
 public:
  static const ::pdpb::RequestHeader& header(const GetStoreRequest* msg);
};

const ::pdpb::RequestHeader&
GetStoreRequest::HasBitSetters::header(const GetStoreRequest* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStoreRequest::kHeaderFieldNumber;
const int GetStoreRequest::kStoreIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStoreRequest::GetStoreRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetStoreRequest)
}
GetStoreRequest::GetStoreRequest(const GetStoreRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  store_id_ = from.store_id_;
  // @@protoc_insertion_point(copy_constructor:pdpb.GetStoreRequest)
}

void GetStoreRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetStoreRequest_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&store_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(store_id_));
}

GetStoreRequest::~GetStoreRequest() {
  // @@protoc_insertion_point(destructor:pdpb.GetStoreRequest)
  SharedDtor();
}

void GetStoreRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetStoreRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStoreRequest& GetStoreRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetStoreRequest_pdpb_2eproto.base);
  return *internal_default_instance();
}


void GetStoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetStoreRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  store_id_ = GOOGLE_PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetStoreRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetStoreRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::RequestHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // uint64 store_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_store_id(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetStoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetStoreRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 store_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &store_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetStoreRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetStoreRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetStoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetStoreRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // uint64 store_id = 2;
  if (this->store_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->store_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.GetStoreRequest)
}

::google::protobuf::uint8* GetStoreRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetStoreRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // uint64 store_id = 2;
  if (this->store_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->store_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetStoreRequest)
  return target;
}

size_t GetStoreRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetStoreRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 store_id = 2;
  if (this->store_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->store_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetStoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStoreRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetStoreRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetStoreRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetStoreRequest)
    MergeFrom(*source);
  }
}

void GetStoreRequest::MergeFrom(const GetStoreRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetStoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.store_id() != 0) {
    set_store_id(from.store_id());
  }
}

void GetStoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetStoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStoreRequest::CopyFrom(const GetStoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetStoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoreRequest::IsInitialized() const {
  return true;
}

void GetStoreRequest::Swap(GetStoreRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetStoreRequest::InternalSwap(GetStoreRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(store_id_, other->store_id_);
}

::google::protobuf::Metadata GetStoreRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetStoreResponse::InitAsDefaultInstance() {
  ::pdpb::_GetStoreResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
  ::pdpb::_GetStoreResponse_default_instance_._instance.get_mutable()->store_ = const_cast< ::metapb::Store*>(
      ::metapb::Store::internal_default_instance());
}
class GetStoreResponse::HasBitSetters {
 public:
  static const ::pdpb::ResponseHeader& header(const GetStoreResponse* msg);
  static const ::metapb::Store& store(const GetStoreResponse* msg);
};

const ::pdpb::ResponseHeader&
GetStoreResponse::HasBitSetters::header(const GetStoreResponse* msg) {
  return *msg->header_;
}
const ::metapb::Store&
GetStoreResponse::HasBitSetters::store(const GetStoreResponse* msg) {
  return *msg->store_;
}
void GetStoreResponse::clear_store() {
  if (GetArenaNoVirtual() == NULL && store_ != NULL) {
    delete store_;
  }
  store_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStoreResponse::kHeaderFieldNumber;
const int GetStoreResponse::kStoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStoreResponse::GetStoreResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetStoreResponse)
}
GetStoreResponse::GetStoreResponse(const GetStoreResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_store()) {
    store_ = new ::metapb::Store(*from.store_);
  } else {
    store_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.GetStoreResponse)
}

void GetStoreResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetStoreResponse_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&store_) -
      reinterpret_cast<char*>(&header_)) + sizeof(store_));
}

GetStoreResponse::~GetStoreResponse() {
  // @@protoc_insertion_point(destructor:pdpb.GetStoreResponse)
  SharedDtor();
}

void GetStoreResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete store_;
}

void GetStoreResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStoreResponse& GetStoreResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetStoreResponse_pdpb_2eproto.base);
  return *internal_default_instance();
}


void GetStoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetStoreResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && store_ != NULL) {
    delete store_;
  }
  store_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetStoreResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetStoreResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .metapb.Store store = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Store::_InternalParse;
        object = msg->mutable_store();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetStoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetStoreResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Store store = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_store()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetStoreResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetStoreResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetStoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetStoreResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .metapb.Store store = 2;
  if (this->has_store()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::store(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.GetStoreResponse)
}

::google::protobuf::uint8* GetStoreResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetStoreResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // .metapb.Store store = 2;
  if (this->has_store()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::store(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetStoreResponse)
  return target;
}

size_t GetStoreResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetStoreResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .metapb.Store store = 2;
  if (this->has_store()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *store_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetStoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStoreResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetStoreResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetStoreResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetStoreResponse)
    MergeFrom(*source);
  }
}

void GetStoreResponse::MergeFrom(const GetStoreResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetStoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_store()) {
    mutable_store()->::metapb::Store::MergeFrom(from.store());
  }
}

void GetStoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetStoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStoreResponse::CopyFrom(const GetStoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetStoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoreResponse::IsInitialized() const {
  return true;
}

void GetStoreResponse::Swap(GetStoreResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetStoreResponse::InternalSwap(GetStoreResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(store_, other->store_);
}

::google::protobuf::Metadata GetStoreResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PutStoreRequest::InitAsDefaultInstance() {
  ::pdpb::_PutStoreRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
  ::pdpb::_PutStoreRequest_default_instance_._instance.get_mutable()->store_ = const_cast< ::metapb::Store*>(
      ::metapb::Store::internal_default_instance());
}
class PutStoreRequest::HasBitSetters {
 public:
  static const ::pdpb::RequestHeader& header(const PutStoreRequest* msg);
  static const ::metapb::Store& store(const PutStoreRequest* msg);
};

const ::pdpb::RequestHeader&
PutStoreRequest::HasBitSetters::header(const PutStoreRequest* msg) {
  return *msg->header_;
}
const ::metapb::Store&
PutStoreRequest::HasBitSetters::store(const PutStoreRequest* msg) {
  return *msg->store_;
}
void PutStoreRequest::clear_store() {
  if (GetArenaNoVirtual() == NULL && store_ != NULL) {
    delete store_;
  }
  store_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutStoreRequest::kHeaderFieldNumber;
const int PutStoreRequest::kStoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutStoreRequest::PutStoreRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.PutStoreRequest)
}
PutStoreRequest::PutStoreRequest(const PutStoreRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_store()) {
    store_ = new ::metapb::Store(*from.store_);
  } else {
    store_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.PutStoreRequest)
}

void PutStoreRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PutStoreRequest_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&store_) -
      reinterpret_cast<char*>(&header_)) + sizeof(store_));
}

PutStoreRequest::~PutStoreRequest() {
  // @@protoc_insertion_point(destructor:pdpb.PutStoreRequest)
  SharedDtor();
}

void PutStoreRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete store_;
}

void PutStoreRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutStoreRequest& PutStoreRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PutStoreRequest_pdpb_2eproto.base);
  return *internal_default_instance();
}


void PutStoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.PutStoreRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && store_ != NULL) {
    delete store_;
  }
  store_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PutStoreRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PutStoreRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::RequestHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .metapb.Store store = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Store::_InternalParse;
        object = msg->mutable_store();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PutStoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.PutStoreRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Store store = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_store()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.PutStoreRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.PutStoreRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PutStoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.PutStoreRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .metapb.Store store = 2;
  if (this->has_store()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::store(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.PutStoreRequest)
}

::google::protobuf::uint8* PutStoreRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.PutStoreRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // .metapb.Store store = 2;
  if (this->has_store()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::store(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.PutStoreRequest)
  return target;
}

size_t PutStoreRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.PutStoreRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .metapb.Store store = 2;
  if (this->has_store()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *store_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutStoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.PutStoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PutStoreRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PutStoreRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.PutStoreRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.PutStoreRequest)
    MergeFrom(*source);
  }
}

void PutStoreRequest::MergeFrom(const PutStoreRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.PutStoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_store()) {
    mutable_store()->::metapb::Store::MergeFrom(from.store());
  }
}

void PutStoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.PutStoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutStoreRequest::CopyFrom(const PutStoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.PutStoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutStoreRequest::IsInitialized() const {
  return true;
}

void PutStoreRequest::Swap(PutStoreRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutStoreRequest::InternalSwap(PutStoreRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(store_, other->store_);
}

::google::protobuf::Metadata PutStoreRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PutStoreResponse::InitAsDefaultInstance() {
  ::pdpb::_PutStoreResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}
class PutStoreResponse::HasBitSetters {
 public:
  static const ::pdpb::ResponseHeader& header(const PutStoreResponse* msg);
};

const ::pdpb::ResponseHeader&
PutStoreResponse::HasBitSetters::header(const PutStoreResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutStoreResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutStoreResponse::PutStoreResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.PutStoreResponse)
}
PutStoreResponse::PutStoreResponse(const PutStoreResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.PutStoreResponse)
}

void PutStoreResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PutStoreResponse_pdpb_2eproto.base);
  header_ = NULL;
}

PutStoreResponse::~PutStoreResponse() {
  // @@protoc_insertion_point(destructor:pdpb.PutStoreResponse)
  SharedDtor();
}

void PutStoreResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void PutStoreResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutStoreResponse& PutStoreResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PutStoreResponse_pdpb_2eproto.base);
  return *internal_default_instance();
}


void PutStoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.PutStoreResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PutStoreResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PutStoreResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PutStoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.PutStoreResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.PutStoreResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.PutStoreResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PutStoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.PutStoreResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.PutStoreResponse)
}

::google::protobuf::uint8* PutStoreResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.PutStoreResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.PutStoreResponse)
  return target;
}

size_t PutStoreResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.PutStoreResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutStoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.PutStoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PutStoreResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PutStoreResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.PutStoreResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.PutStoreResponse)
    MergeFrom(*source);
  }
}

void PutStoreResponse::MergeFrom(const PutStoreResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.PutStoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
}

void PutStoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.PutStoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutStoreResponse::CopyFrom(const PutStoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.PutStoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutStoreResponse::IsInitialized() const {
  return true;
}

void PutStoreResponse::Swap(PutStoreResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutStoreResponse::InternalSwap(PutStoreResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::google::protobuf::Metadata PutStoreResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetAllStoresRequest::InitAsDefaultInstance() {
  ::pdpb::_GetAllStoresRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
}
class GetAllStoresRequest::HasBitSetters {
 public:
  static const ::pdpb::RequestHeader& header(const GetAllStoresRequest* msg);
};

const ::pdpb::RequestHeader&
GetAllStoresRequest::HasBitSetters::header(const GetAllStoresRequest* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAllStoresRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAllStoresRequest::GetAllStoresRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetAllStoresRequest)
}
GetAllStoresRequest::GetAllStoresRequest(const GetAllStoresRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.GetAllStoresRequest)
}

void GetAllStoresRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetAllStoresRequest_pdpb_2eproto.base);
  header_ = NULL;
}

GetAllStoresRequest::~GetAllStoresRequest() {
  // @@protoc_insertion_point(destructor:pdpb.GetAllStoresRequest)
  SharedDtor();
}

void GetAllStoresRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetAllStoresRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAllStoresRequest& GetAllStoresRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetAllStoresRequest_pdpb_2eproto.base);
  return *internal_default_instance();
}


void GetAllStoresRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetAllStoresRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAllStoresRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetAllStoresRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::RequestHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAllStoresRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetAllStoresRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetAllStoresRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetAllStoresRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAllStoresRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetAllStoresRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.GetAllStoresRequest)
}

::google::protobuf::uint8* GetAllStoresRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetAllStoresRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetAllStoresRequest)
  return target;
}

size_t GetAllStoresRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetAllStoresRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAllStoresRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetAllStoresRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAllStoresRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetAllStoresRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetAllStoresRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetAllStoresRequest)
    MergeFrom(*source);
  }
}

void GetAllStoresRequest::MergeFrom(const GetAllStoresRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetAllStoresRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
}

void GetAllStoresRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetAllStoresRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllStoresRequest::CopyFrom(const GetAllStoresRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetAllStoresRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllStoresRequest::IsInitialized() const {
  return true;
}

void GetAllStoresRequest::Swap(GetAllStoresRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAllStoresRequest::InternalSwap(GetAllStoresRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::google::protobuf::Metadata GetAllStoresRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetAllStoresResponse::InitAsDefaultInstance() {
  ::pdpb::_GetAllStoresResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}
class GetAllStoresResponse::HasBitSetters {
 public:
  static const ::pdpb::ResponseHeader& header(const GetAllStoresResponse* msg);
};

const ::pdpb::ResponseHeader&
GetAllStoresResponse::HasBitSetters::header(const GetAllStoresResponse* msg) {
  return *msg->header_;
}
void GetAllStoresResponse::clear_stores() {
  stores_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAllStoresResponse::kHeaderFieldNumber;
const int GetAllStoresResponse::kStoresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAllStoresResponse::GetAllStoresResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetAllStoresResponse)
}
GetAllStoresResponse::GetAllStoresResponse(const GetAllStoresResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stores_(from.stores_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.GetAllStoresResponse)
}

void GetAllStoresResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetAllStoresResponse_pdpb_2eproto.base);
  header_ = NULL;
}

GetAllStoresResponse::~GetAllStoresResponse() {
  // @@protoc_insertion_point(destructor:pdpb.GetAllStoresResponse)
  SharedDtor();
}

void GetAllStoresResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetAllStoresResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAllStoresResponse& GetAllStoresResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetAllStoresResponse_pdpb_2eproto.base);
  return *internal_default_instance();
}


void GetAllStoresResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetAllStoresResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stores_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAllStoresResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetAllStoresResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // repeated .metapb.Store stores = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::metapb::Store::_InternalParse;
          object = msg->add_stores();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAllStoresResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetAllStoresResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metapb.Store stores = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stores()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetAllStoresResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetAllStoresResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAllStoresResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetAllStoresResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // repeated .metapb.Store stores = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stores_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->stores(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.GetAllStoresResponse)
}

::google::protobuf::uint8* GetAllStoresResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetAllStoresResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // repeated .metapb.Store stores = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stores_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->stores(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetAllStoresResponse)
  return target;
}

size_t GetAllStoresResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetAllStoresResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metapb.Store stores = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->stores_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stores(static_cast<int>(i)));
    }
  }

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAllStoresResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetAllStoresResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAllStoresResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetAllStoresResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetAllStoresResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetAllStoresResponse)
    MergeFrom(*source);
  }
}

void GetAllStoresResponse::MergeFrom(const GetAllStoresResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetAllStoresResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stores_.MergeFrom(from.stores_);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
}

void GetAllStoresResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetAllStoresResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllStoresResponse::CopyFrom(const GetAllStoresResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetAllStoresResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllStoresResponse::IsInitialized() const {
  return true;
}

void GetAllStoresResponse::Swap(GetAllStoresResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAllStoresResponse::InternalSwap(GetAllStoresResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&stores_)->InternalSwap(CastToBase(&other->stores_));
  swap(header_, other->header_);
}

::google::protobuf::Metadata GetAllStoresResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetRegionRequest::InitAsDefaultInstance() {
  ::pdpb::_GetRegionRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
}
class GetRegionRequest::HasBitSetters {
 public:
  static const ::pdpb::RequestHeader& header(const GetRegionRequest* msg);
};

const ::pdpb::RequestHeader&
GetRegionRequest::HasBitSetters::header(const GetRegionRequest* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRegionRequest::kHeaderFieldNumber;
const int GetRegionRequest::kRegionKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRegionRequest::GetRegionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetRegionRequest)
}
GetRegionRequest::GetRegionRequest(const GetRegionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  region_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.region_key().size() > 0) {
    region_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_key_);
  }
  if (from.has_header()) {
    header_ = new ::pdpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.GetRegionRequest)
}

void GetRegionRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetRegionRequest_pdpb_2eproto.base);
  region_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
}

GetRegionRequest::~GetRegionRequest() {
  // @@protoc_insertion_point(destructor:pdpb.GetRegionRequest)
  SharedDtor();
}

void GetRegionRequest::SharedDtor() {
  region_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void GetRegionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRegionRequest& GetRegionRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetRegionRequest_pdpb_2eproto.base);
  return *internal_default_instance();
}


void GetRegionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetRegionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRegionRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetRegionRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::RequestHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // bytes region_key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_region_key();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRegionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetRegionRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes region_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_region_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetRegionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetRegionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRegionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetRegionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // bytes region_key = 2;
  if (this->region_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->region_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.GetRegionRequest)
}

::google::protobuf::uint8* GetRegionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetRegionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // bytes region_key = 2;
  if (this->region_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->region_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetRegionRequest)
  return target;
}

size_t GetRegionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetRegionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes region_key = 2;
  if (this->region_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->region_key());
  }

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRegionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetRegionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRegionRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetRegionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetRegionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetRegionRequest)
    MergeFrom(*source);
  }
}

void GetRegionRequest::MergeFrom(const GetRegionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetRegionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.region_key().size() > 0) {

    region_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_key_);
  }
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
}

void GetRegionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRegionRequest::CopyFrom(const GetRegionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRegionRequest::IsInitialized() const {
  return true;
}

void GetRegionRequest::Swap(GetRegionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRegionRequest::InternalSwap(GetRegionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  region_key_.Swap(&other->region_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
}

::google::protobuf::Metadata GetRegionRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetRegionResponse::InitAsDefaultInstance() {
  ::pdpb::_GetRegionResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
  ::pdpb::_GetRegionResponse_default_instance_._instance.get_mutable()->region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
  ::pdpb::_GetRegionResponse_default_instance_._instance.get_mutable()->leader_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}
class GetRegionResponse::HasBitSetters {
 public:
  static const ::pdpb::ResponseHeader& header(const GetRegionResponse* msg);
  static const ::metapb::Region& region(const GetRegionResponse* msg);
  static const ::metapb::Peer& leader(const GetRegionResponse* msg);
};

const ::pdpb::ResponseHeader&
GetRegionResponse::HasBitSetters::header(const GetRegionResponse* msg) {
  return *msg->header_;
}
const ::metapb::Region&
GetRegionResponse::HasBitSetters::region(const GetRegionResponse* msg) {
  return *msg->region_;
}
const ::metapb::Peer&
GetRegionResponse::HasBitSetters::leader(const GetRegionResponse* msg) {
  return *msg->leader_;
}
void GetRegionResponse::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) {
    delete region_;
  }
  region_ = NULL;
}
void GetRegionResponse::clear_leader() {
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) {
    delete leader_;
  }
  leader_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRegionResponse::kHeaderFieldNumber;
const int GetRegionResponse::kRegionFieldNumber;
const int GetRegionResponse::kLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRegionResponse::GetRegionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetRegionResponse)
}
GetRegionResponse::GetRegionResponse(const GetRegionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_region()) {
    region_ = new ::metapb::Region(*from.region_);
  } else {
    region_ = NULL;
  }
  if (from.has_leader()) {
    leader_ = new ::metapb::Peer(*from.leader_);
  } else {
    leader_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.GetRegionResponse)
}

void GetRegionResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetRegionResponse_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_) -
      reinterpret_cast<char*>(&header_)) + sizeof(leader_));
}

GetRegionResponse::~GetRegionResponse() {
  // @@protoc_insertion_point(destructor:pdpb.GetRegionResponse)
  SharedDtor();
}

void GetRegionResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete region_;
  if (this != internal_default_instance()) delete leader_;
}

void GetRegionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRegionResponse& GetRegionResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetRegionResponse_pdpb_2eproto.base);
  return *internal_default_instance();
}


void GetRegionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetRegionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && region_ != NULL) {
    delete region_;
  }
  region_ = NULL;
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) {
    delete leader_;
  }
  leader_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRegionResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetRegionResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .metapb.Region region = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Region::_InternalParse;
        object = msg->mutable_region();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .metapb.Peer leader = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Peer::_InternalParse;
        object = msg->mutable_leader();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRegionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetRegionResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Region region = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Peer leader = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetRegionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetRegionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRegionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetRegionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .metapb.Region region = 2;
  if (this->has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::region(this), output);
  }

  // .metapb.Peer leader = 3;
  if (this->has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::leader(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.GetRegionResponse)
}

::google::protobuf::uint8* GetRegionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetRegionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // .metapb.Region region = 2;
  if (this->has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::region(this), deterministic, target);
  }

  // .metapb.Peer leader = 3;
  if (this->has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::leader(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetRegionResponse)
  return target;
}

size_t GetRegionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetRegionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .metapb.Region region = 2;
  if (this->has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *region_);
  }

  // .metapb.Peer leader = 3;
  if (this->has_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *leader_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRegionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetRegionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRegionResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetRegionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetRegionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetRegionResponse)
    MergeFrom(*source);
  }
}

void GetRegionResponse::MergeFrom(const GetRegionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetRegionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
  if (from.has_leader()) {
    mutable_leader()->::metapb::Peer::MergeFrom(from.leader());
  }
}

void GetRegionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRegionResponse::CopyFrom(const GetRegionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRegionResponse::IsInitialized() const {
  return true;
}

void GetRegionResponse::Swap(GetRegionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRegionResponse::InternalSwap(GetRegionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(region_, other->region_);
  swap(leader_, other->leader_);
}

::google::protobuf::Metadata GetRegionResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetRegionByIDRequest::InitAsDefaultInstance() {
  ::pdpb::_GetRegionByIDRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
}
class GetRegionByIDRequest::HasBitSetters {
 public:
  static const ::pdpb::RequestHeader& header(const GetRegionByIDRequest* msg);
};

const ::pdpb::RequestHeader&
GetRegionByIDRequest::HasBitSetters::header(const GetRegionByIDRequest* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRegionByIDRequest::kHeaderFieldNumber;
const int GetRegionByIDRequest::kRegionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRegionByIDRequest::GetRegionByIDRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetRegionByIDRequest)
}
GetRegionByIDRequest::GetRegionByIDRequest(const GetRegionByIDRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  region_id_ = from.region_id_;
  // @@protoc_insertion_point(copy_constructor:pdpb.GetRegionByIDRequest)
}

void GetRegionByIDRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetRegionByIDRequest_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(region_id_));
}

GetRegionByIDRequest::~GetRegionByIDRequest() {
  // @@protoc_insertion_point(destructor:pdpb.GetRegionByIDRequest)
  SharedDtor();
}

void GetRegionByIDRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetRegionByIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRegionByIDRequest& GetRegionByIDRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetRegionByIDRequest_pdpb_2eproto.base);
  return *internal_default_instance();
}


void GetRegionByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetRegionByIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  region_id_ = GOOGLE_PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRegionByIDRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetRegionByIDRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::RequestHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // uint64 region_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_region_id(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRegionByIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetRegionByIDRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 region_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetRegionByIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetRegionByIDRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRegionByIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetRegionByIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // uint64 region_id = 2;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->region_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.GetRegionByIDRequest)
}

::google::protobuf::uint8* GetRegionByIDRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetRegionByIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // uint64 region_id = 2;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->region_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetRegionByIDRequest)
  return target;
}

size_t GetRegionByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetRegionByIDRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->region_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRegionByIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetRegionByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRegionByIDRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetRegionByIDRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetRegionByIDRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetRegionByIDRequest)
    MergeFrom(*source);
  }
}

void GetRegionByIDRequest::MergeFrom(const GetRegionByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetRegionByIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
}

void GetRegionByIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetRegionByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRegionByIDRequest::CopyFrom(const GetRegionByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetRegionByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRegionByIDRequest::IsInitialized() const {
  return true;
}

void GetRegionByIDRequest::Swap(GetRegionByIDRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRegionByIDRequest::InternalSwap(GetRegionByIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(region_id_, other->region_id_);
}

::google::protobuf::Metadata GetRegionByIDRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetClusterConfigRequest::InitAsDefaultInstance() {
  ::pdpb::_GetClusterConfigRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
}
class GetClusterConfigRequest::HasBitSetters {
 public:
  static const ::pdpb::RequestHeader& header(const GetClusterConfigRequest* msg);
};

const ::pdpb::RequestHeader&
GetClusterConfigRequest::HasBitSetters::header(const GetClusterConfigRequest* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClusterConfigRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClusterConfigRequest::GetClusterConfigRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetClusterConfigRequest)
}
GetClusterConfigRequest::GetClusterConfigRequest(const GetClusterConfigRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.GetClusterConfigRequest)
}

void GetClusterConfigRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetClusterConfigRequest_pdpb_2eproto.base);
  header_ = NULL;
}

GetClusterConfigRequest::~GetClusterConfigRequest() {
  // @@protoc_insertion_point(destructor:pdpb.GetClusterConfigRequest)
  SharedDtor();
}

void GetClusterConfigRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetClusterConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetClusterConfigRequest& GetClusterConfigRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetClusterConfigRequest_pdpb_2eproto.base);
  return *internal_default_instance();
}


void GetClusterConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetClusterConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetClusterConfigRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetClusterConfigRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::RequestHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetClusterConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetClusterConfigRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetClusterConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetClusterConfigRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetClusterConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetClusterConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.GetClusterConfigRequest)
}

::google::protobuf::uint8* GetClusterConfigRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetClusterConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetClusterConfigRequest)
  return target;
}

size_t GetClusterConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetClusterConfigRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetClusterConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetClusterConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetClusterConfigRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetClusterConfigRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetClusterConfigRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetClusterConfigRequest)
    MergeFrom(*source);
  }
}

void GetClusterConfigRequest::MergeFrom(const GetClusterConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetClusterConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
}

void GetClusterConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetClusterConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterConfigRequest::CopyFrom(const GetClusterConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetClusterConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterConfigRequest::IsInitialized() const {
  return true;
}

void GetClusterConfigRequest::Swap(GetClusterConfigRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClusterConfigRequest::InternalSwap(GetClusterConfigRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::google::protobuf::Metadata GetClusterConfigRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetClusterConfigResponse::InitAsDefaultInstance() {
  ::pdpb::_GetClusterConfigResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
  ::pdpb::_GetClusterConfigResponse_default_instance_._instance.get_mutable()->cluster_ = const_cast< ::metapb::Cluster*>(
      ::metapb::Cluster::internal_default_instance());
}
class GetClusterConfigResponse::HasBitSetters {
 public:
  static const ::pdpb::ResponseHeader& header(const GetClusterConfigResponse* msg);
  static const ::metapb::Cluster& cluster(const GetClusterConfigResponse* msg);
};

const ::pdpb::ResponseHeader&
GetClusterConfigResponse::HasBitSetters::header(const GetClusterConfigResponse* msg) {
  return *msg->header_;
}
const ::metapb::Cluster&
GetClusterConfigResponse::HasBitSetters::cluster(const GetClusterConfigResponse* msg) {
  return *msg->cluster_;
}
void GetClusterConfigResponse::clear_cluster() {
  if (GetArenaNoVirtual() == NULL && cluster_ != NULL) {
    delete cluster_;
  }
  cluster_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClusterConfigResponse::kHeaderFieldNumber;
const int GetClusterConfigResponse::kClusterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClusterConfigResponse::GetClusterConfigResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetClusterConfigResponse)
}
GetClusterConfigResponse::GetClusterConfigResponse(const GetClusterConfigResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_cluster()) {
    cluster_ = new ::metapb::Cluster(*from.cluster_);
  } else {
    cluster_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.GetClusterConfigResponse)
}

void GetClusterConfigResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetClusterConfigResponse_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cluster_) -
      reinterpret_cast<char*>(&header_)) + sizeof(cluster_));
}

GetClusterConfigResponse::~GetClusterConfigResponse() {
  // @@protoc_insertion_point(destructor:pdpb.GetClusterConfigResponse)
  SharedDtor();
}

void GetClusterConfigResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete cluster_;
}

void GetClusterConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetClusterConfigResponse& GetClusterConfigResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetClusterConfigResponse_pdpb_2eproto.base);
  return *internal_default_instance();
}


void GetClusterConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetClusterConfigResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && cluster_ != NULL) {
    delete cluster_;
  }
  cluster_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetClusterConfigResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetClusterConfigResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .metapb.Cluster cluster = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Cluster::_InternalParse;
        object = msg->mutable_cluster();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetClusterConfigResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetClusterConfigResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Cluster cluster = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cluster()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetClusterConfigResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetClusterConfigResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetClusterConfigResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetClusterConfigResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .metapb.Cluster cluster = 2;
  if (this->has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::cluster(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.GetClusterConfigResponse)
}

::google::protobuf::uint8* GetClusterConfigResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetClusterConfigResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // .metapb.Cluster cluster = 2;
  if (this->has_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::cluster(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetClusterConfigResponse)
  return target;
}

size_t GetClusterConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetClusterConfigResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .metapb.Cluster cluster = 2;
  if (this->has_cluster()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cluster_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetClusterConfigResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetClusterConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetClusterConfigResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetClusterConfigResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetClusterConfigResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetClusterConfigResponse)
    MergeFrom(*source);
  }
}

void GetClusterConfigResponse::MergeFrom(const GetClusterConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetClusterConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_cluster()) {
    mutable_cluster()->::metapb::Cluster::MergeFrom(from.cluster());
  }
}

void GetClusterConfigResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetClusterConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterConfigResponse::CopyFrom(const GetClusterConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetClusterConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClusterConfigResponse::IsInitialized() const {
  return true;
}

void GetClusterConfigResponse::Swap(GetClusterConfigResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClusterConfigResponse::InternalSwap(GetClusterConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(cluster_, other->cluster_);
}

::google::protobuf::Metadata GetClusterConfigResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PutClusterConfigRequest::InitAsDefaultInstance() {
  ::pdpb::_PutClusterConfigRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
  ::pdpb::_PutClusterConfigRequest_default_instance_._instance.get_mutable()->cluster_ = const_cast< ::metapb::Cluster*>(
      ::metapb::Cluster::internal_default_instance());
}
class PutClusterConfigRequest::HasBitSetters {
 public:
  static const ::pdpb::RequestHeader& header(const PutClusterConfigRequest* msg);
  static const ::metapb::Cluster& cluster(const PutClusterConfigRequest* msg);
};

const ::pdpb::RequestHeader&
PutClusterConfigRequest::HasBitSetters::header(const PutClusterConfigRequest* msg) {
  return *msg->header_;
}
const ::metapb::Cluster&
PutClusterConfigRequest::HasBitSetters::cluster(const PutClusterConfigRequest* msg) {
  return *msg->cluster_;
}
void PutClusterConfigRequest::clear_cluster() {
  if (GetArenaNoVirtual() == NULL && cluster_ != NULL) {
    delete cluster_;
  }
  cluster_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutClusterConfigRequest::kHeaderFieldNumber;
const int PutClusterConfigRequest::kClusterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutClusterConfigRequest::PutClusterConfigRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.PutClusterConfigRequest)
}
PutClusterConfigRequest::PutClusterConfigRequest(const PutClusterConfigRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_cluster()) {
    cluster_ = new ::metapb::Cluster(*from.cluster_);
  } else {
    cluster_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.PutClusterConfigRequest)
}

void PutClusterConfigRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PutClusterConfigRequest_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cluster_) -
      reinterpret_cast<char*>(&header_)) + sizeof(cluster_));
}

PutClusterConfigRequest::~PutClusterConfigRequest() {
  // @@protoc_insertion_point(destructor:pdpb.PutClusterConfigRequest)
  SharedDtor();
}

void PutClusterConfigRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete cluster_;
}

void PutClusterConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutClusterConfigRequest& PutClusterConfigRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PutClusterConfigRequest_pdpb_2eproto.base);
  return *internal_default_instance();
}


void PutClusterConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.PutClusterConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && cluster_ != NULL) {
    delete cluster_;
  }
  cluster_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PutClusterConfigRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PutClusterConfigRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::RequestHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .metapb.Cluster cluster = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Cluster::_InternalParse;
        object = msg->mutable_cluster();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PutClusterConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.PutClusterConfigRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Cluster cluster = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cluster()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.PutClusterConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.PutClusterConfigRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PutClusterConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.PutClusterConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .metapb.Cluster cluster = 2;
  if (this->has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::cluster(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.PutClusterConfigRequest)
}

::google::protobuf::uint8* PutClusterConfigRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.PutClusterConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // .metapb.Cluster cluster = 2;
  if (this->has_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::cluster(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.PutClusterConfigRequest)
  return target;
}

size_t PutClusterConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.PutClusterConfigRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .metapb.Cluster cluster = 2;
  if (this->has_cluster()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cluster_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutClusterConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.PutClusterConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PutClusterConfigRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PutClusterConfigRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.PutClusterConfigRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.PutClusterConfigRequest)
    MergeFrom(*source);
  }
}

void PutClusterConfigRequest::MergeFrom(const PutClusterConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.PutClusterConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_cluster()) {
    mutable_cluster()->::metapb::Cluster::MergeFrom(from.cluster());
  }
}

void PutClusterConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.PutClusterConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutClusterConfigRequest::CopyFrom(const PutClusterConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.PutClusterConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutClusterConfigRequest::IsInitialized() const {
  return true;
}

void PutClusterConfigRequest::Swap(PutClusterConfigRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutClusterConfigRequest::InternalSwap(PutClusterConfigRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(cluster_, other->cluster_);
}

::google::protobuf::Metadata PutClusterConfigRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PutClusterConfigResponse::InitAsDefaultInstance() {
  ::pdpb::_PutClusterConfigResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}
class PutClusterConfigResponse::HasBitSetters {
 public:
  static const ::pdpb::ResponseHeader& header(const PutClusterConfigResponse* msg);
};

const ::pdpb::ResponseHeader&
PutClusterConfigResponse::HasBitSetters::header(const PutClusterConfigResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutClusterConfigResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutClusterConfigResponse::PutClusterConfigResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.PutClusterConfigResponse)
}
PutClusterConfigResponse::PutClusterConfigResponse(const PutClusterConfigResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.PutClusterConfigResponse)
}

void PutClusterConfigResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PutClusterConfigResponse_pdpb_2eproto.base);
  header_ = NULL;
}

PutClusterConfigResponse::~PutClusterConfigResponse() {
  // @@protoc_insertion_point(destructor:pdpb.PutClusterConfigResponse)
  SharedDtor();
}

void PutClusterConfigResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void PutClusterConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutClusterConfigResponse& PutClusterConfigResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PutClusterConfigResponse_pdpb_2eproto.base);
  return *internal_default_instance();
}


void PutClusterConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.PutClusterConfigResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PutClusterConfigResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PutClusterConfigResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PutClusterConfigResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.PutClusterConfigResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.PutClusterConfigResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.PutClusterConfigResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PutClusterConfigResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.PutClusterConfigResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.PutClusterConfigResponse)
}

::google::protobuf::uint8* PutClusterConfigResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.PutClusterConfigResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.PutClusterConfigResponse)
  return target;
}

size_t PutClusterConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.PutClusterConfigResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutClusterConfigResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.PutClusterConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PutClusterConfigResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PutClusterConfigResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.PutClusterConfigResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.PutClusterConfigResponse)
    MergeFrom(*source);
  }
}

void PutClusterConfigResponse::MergeFrom(const PutClusterConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.PutClusterConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
}

void PutClusterConfigResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.PutClusterConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutClusterConfigResponse::CopyFrom(const PutClusterConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.PutClusterConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutClusterConfigResponse::IsInitialized() const {
  return true;
}

void PutClusterConfigResponse::Swap(PutClusterConfigResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutClusterConfigResponse::InternalSwap(PutClusterConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::google::protobuf::Metadata PutClusterConfigResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Member::InitAsDefaultInstance() {
}
class Member::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Member::kNameFieldNumber;
const int Member::kMemberIdFieldNumber;
const int Member::kPeerUrlsFieldNumber;
const int Member::kClientUrlsFieldNumber;
const int Member::kLeaderPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Member::Member()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.Member)
}
Member::Member(const Member& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      peer_urls_(from.peer_urls_),
      client_urls_(from.client_urls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&member_id_, &from.member_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&leader_priority_) -
    reinterpret_cast<char*>(&member_id_)) + sizeof(leader_priority_));
  // @@protoc_insertion_point(copy_constructor:pdpb.Member)
}

void Member::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Member_pdpb_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&member_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_priority_) -
      reinterpret_cast<char*>(&member_id_)) + sizeof(leader_priority_));
}

Member::~Member() {
  // @@protoc_insertion_point(destructor:pdpb.Member)
  SharedDtor();
}

void Member::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Member& Member::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Member_pdpb_2eproto.base);
  return *internal_default_instance();
}


void Member::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peer_urls_.Clear();
  client_urls_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&member_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_priority_) -
      reinterpret_cast<char*>(&member_id_)) + sizeof(leader_priority_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Member::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Member*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        ctx->extra_parse_data().SetFieldName("pdpb.Member.name");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_name();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // uint64 member_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_member_id(value);
        break;
      }
      // repeated string peer_urls = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          ctx->extra_parse_data().SetFieldName("pdpb.Member.peer_urls");
          parser_till_end = ::google::protobuf::internal::StringParserUTF8;
          ::std::string* str = msg->add_peer_urls();
          str->clear();
          object = str;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated string client_urls = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          ctx->extra_parse_data().SetFieldName("pdpb.Member.client_urls");
          parser_till_end = ::google::protobuf::internal::StringParserUTF8;
          ::std::string* str = msg->add_client_urls();
          str->clear();
          object = str;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // int32 leader_priority = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::int32 value = val;
        msg->set_leader_priority(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.Member)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pdpb.Member.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 member_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &member_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string peer_urls = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_peer_urls()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->peer_urls(this->peer_urls_size() - 1).data(),
            static_cast<int>(this->peer_urls(this->peer_urls_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pdpb.Member.peer_urls"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string client_urls = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_client_urls()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_urls(this->client_urls_size() - 1).data(),
            static_cast<int>(this->client_urls(this->client_urls_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pdpb.Member.client_urls"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 leader_priority = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leader_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.Member)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdpb.Member.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // uint64 member_id = 2;
  if (this->member_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->member_id(), output);
  }

  // repeated string peer_urls = 3;
  for (int i = 0, n = this->peer_urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peer_urls(i).data(), static_cast<int>(this->peer_urls(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdpb.Member.peer_urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->peer_urls(i), output);
  }

  // repeated string client_urls = 4;
  for (int i = 0, n = this->client_urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_urls(i).data(), static_cast<int>(this->client_urls(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdpb.Member.client_urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->client_urls(i), output);
  }

  // int32 leader_priority = 5;
  if (this->leader_priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->leader_priority(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.Member)
}

::google::protobuf::uint8* Member::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdpb.Member.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // uint64 member_id = 2;
  if (this->member_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->member_id(), target);
  }

  // repeated string peer_urls = 3;
  for (int i = 0, n = this->peer_urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peer_urls(i).data(), static_cast<int>(this->peer_urls(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdpb.Member.peer_urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->peer_urls(i), target);
  }

  // repeated string client_urls = 4;
  for (int i = 0, n = this->client_urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_urls(i).data(), static_cast<int>(this->client_urls(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdpb.Member.client_urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->client_urls(i), target);
  }

  // int32 leader_priority = 5;
  if (this->leader_priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->leader_priority(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.Member)
  return target;
}

size_t Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.Member)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string peer_urls = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->peer_urls_size());
  for (int i = 0, n = this->peer_urls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->peer_urls(i));
  }

  // repeated string client_urls = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->client_urls_size());
  for (int i = 0, n = this->client_urls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->client_urls(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint64 member_id = 2;
  if (this->member_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->member_id());
  }

  // int32 leader_priority = 5;
  if (this->leader_priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leader_priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Member::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const Member* source =
      ::google::protobuf::DynamicCastToGenerated<Member>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.Member)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.Member)
    MergeFrom(*source);
  }
}

void Member::MergeFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peer_urls_.MergeFrom(from.peer_urls_);
  client_urls_.MergeFrom(from.client_urls_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.member_id() != 0) {
    set_member_id(from.member_id());
  }
  if (from.leader_priority() != 0) {
    set_leader_priority(from.leader_priority());
  }
}

void Member::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Member::CopyFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Member::IsInitialized() const {
  return true;
}

void Member::Swap(Member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Member::InternalSwap(Member* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  peer_urls_.InternalSwap(CastToBase(&other->peer_urls_));
  client_urls_.InternalSwap(CastToBase(&other->client_urls_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(member_id_, other->member_id_);
  swap(leader_priority_, other->leader_priority_);
}

::google::protobuf::Metadata Member::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetMembersRequest::InitAsDefaultInstance() {
  ::pdpb::_GetMembersRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
}
class GetMembersRequest::HasBitSetters {
 public:
  static const ::pdpb::RequestHeader& header(const GetMembersRequest* msg);
};

const ::pdpb::RequestHeader&
GetMembersRequest::HasBitSetters::header(const GetMembersRequest* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMembersRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMembersRequest::GetMembersRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetMembersRequest)
}
GetMembersRequest::GetMembersRequest(const GetMembersRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.GetMembersRequest)
}

void GetMembersRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetMembersRequest_pdpb_2eproto.base);
  header_ = NULL;
}

GetMembersRequest::~GetMembersRequest() {
  // @@protoc_insertion_point(destructor:pdpb.GetMembersRequest)
  SharedDtor();
}

void GetMembersRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetMembersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMembersRequest& GetMembersRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetMembersRequest_pdpb_2eproto.base);
  return *internal_default_instance();
}


void GetMembersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetMembersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetMembersRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetMembersRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::RequestHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetMembersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetMembersRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetMembersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetMembersRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetMembersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetMembersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.GetMembersRequest)
}

::google::protobuf::uint8* GetMembersRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetMembersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetMembersRequest)
  return target;
}

size_t GetMembersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetMembersRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMembersRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetMembersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMembersRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetMembersRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetMembersRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetMembersRequest)
    MergeFrom(*source);
  }
}

void GetMembersRequest::MergeFrom(const GetMembersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetMembersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
}

void GetMembersRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetMembersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMembersRequest::CopyFrom(const GetMembersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetMembersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMembersRequest::IsInitialized() const {
  return true;
}

void GetMembersRequest::Swap(GetMembersRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMembersRequest::InternalSwap(GetMembersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::google::protobuf::Metadata GetMembersRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetMembersResponse::InitAsDefaultInstance() {
  ::pdpb::_GetMembersResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
  ::pdpb::_GetMembersResponse_default_instance_._instance.get_mutable()->leader_ = const_cast< ::pdpb::Member*>(
      ::pdpb::Member::internal_default_instance());
  ::pdpb::_GetMembersResponse_default_instance_._instance.get_mutable()->etcd_leader_ = const_cast< ::pdpb::Member*>(
      ::pdpb::Member::internal_default_instance());
}
class GetMembersResponse::HasBitSetters {
 public:
  static const ::pdpb::ResponseHeader& header(const GetMembersResponse* msg);
  static const ::pdpb::Member& leader(const GetMembersResponse* msg);
  static const ::pdpb::Member& etcd_leader(const GetMembersResponse* msg);
};

const ::pdpb::ResponseHeader&
GetMembersResponse::HasBitSetters::header(const GetMembersResponse* msg) {
  return *msg->header_;
}
const ::pdpb::Member&
GetMembersResponse::HasBitSetters::leader(const GetMembersResponse* msg) {
  return *msg->leader_;
}
const ::pdpb::Member&
GetMembersResponse::HasBitSetters::etcd_leader(const GetMembersResponse* msg) {
  return *msg->etcd_leader_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMembersResponse::kHeaderFieldNumber;
const int GetMembersResponse::kMembersFieldNumber;
const int GetMembersResponse::kLeaderFieldNumber;
const int GetMembersResponse::kEtcdLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMembersResponse::GetMembersResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetMembersResponse)
}
GetMembersResponse::GetMembersResponse(const GetMembersResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_leader()) {
    leader_ = new ::pdpb::Member(*from.leader_);
  } else {
    leader_ = NULL;
  }
  if (from.has_etcd_leader()) {
    etcd_leader_ = new ::pdpb::Member(*from.etcd_leader_);
  } else {
    etcd_leader_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.GetMembersResponse)
}

void GetMembersResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetMembersResponse_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&etcd_leader_) -
      reinterpret_cast<char*>(&header_)) + sizeof(etcd_leader_));
}

GetMembersResponse::~GetMembersResponse() {
  // @@protoc_insertion_point(destructor:pdpb.GetMembersResponse)
  SharedDtor();
}

void GetMembersResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete leader_;
  if (this != internal_default_instance()) delete etcd_leader_;
}

void GetMembersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMembersResponse& GetMembersResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetMembersResponse_pdpb_2eproto.base);
  return *internal_default_instance();
}


void GetMembersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetMembersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) {
    delete leader_;
  }
  leader_ = NULL;
  if (GetArenaNoVirtual() == NULL && etcd_leader_ != NULL) {
    delete etcd_leader_;
  }
  etcd_leader_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetMembersResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetMembersResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // repeated .pdpb.Member members = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::pdpb::Member::_InternalParse;
          object = msg->add_members();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // .pdpb.Member leader = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::Member::_InternalParse;
        object = msg->mutable_leader();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .pdpb.Member etcd_leader = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::Member::_InternalParse;
        object = msg->mutable_etcd_leader();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetMembersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetMembersResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pdpb.Member members = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pdpb.Member leader = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pdpb.Member etcd_leader = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_etcd_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetMembersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetMembersResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetMembersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetMembersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // repeated .pdpb.Member members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->members(static_cast<int>(i)),
      output);
  }

  // .pdpb.Member leader = 3;
  if (this->has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::leader(this), output);
  }

  // .pdpb.Member etcd_leader = 4;
  if (this->has_etcd_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::etcd_leader(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.GetMembersResponse)
}

::google::protobuf::uint8* GetMembersResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetMembersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // repeated .pdpb.Member members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->members(static_cast<int>(i)), deterministic, target);
  }

  // .pdpb.Member leader = 3;
  if (this->has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::leader(this), deterministic, target);
  }

  // .pdpb.Member etcd_leader = 4;
  if (this->has_etcd_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::etcd_leader(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetMembersResponse)
  return target;
}

size_t GetMembersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetMembersResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pdpb.Member members = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .pdpb.Member leader = 3;
  if (this->has_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *leader_);
  }

  // .pdpb.Member etcd_leader = 4;
  if (this->has_etcd_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *etcd_leader_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMembersResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetMembersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMembersResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetMembersResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetMembersResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetMembersResponse)
    MergeFrom(*source);
  }
}

void GetMembersResponse::MergeFrom(const GetMembersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetMembersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_leader()) {
    mutable_leader()->::pdpb::Member::MergeFrom(from.leader());
  }
  if (from.has_etcd_leader()) {
    mutable_etcd_leader()->::pdpb::Member::MergeFrom(from.etcd_leader());
  }
}

void GetMembersResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetMembersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMembersResponse::CopyFrom(const GetMembersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetMembersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMembersResponse::IsInitialized() const {
  return true;
}

void GetMembersResponse::Swap(GetMembersResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMembersResponse::InternalSwap(GetMembersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&members_)->InternalSwap(CastToBase(&other->members_));
  swap(header_, other->header_);
  swap(leader_, other->leader_);
  swap(etcd_leader_, other->etcd_leader_);
}

::google::protobuf::Metadata GetMembersResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PeerStats::InitAsDefaultInstance() {
  ::pdpb::_PeerStats_default_instance_._instance.get_mutable()->peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}
class PeerStats::HasBitSetters {
 public:
  static const ::metapb::Peer& peer(const PeerStats* msg);
};

const ::metapb::Peer&
PeerStats::HasBitSetters::peer(const PeerStats* msg) {
  return *msg->peer_;
}
void PeerStats::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerStats::kPeerFieldNumber;
const int PeerStats::kDownSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerStats::PeerStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.PeerStats)
}
PeerStats::PeerStats(const PeerStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peer()) {
    peer_ = new ::metapb::Peer(*from.peer_);
  } else {
    peer_ = NULL;
  }
  down_seconds_ = from.down_seconds_;
  // @@protoc_insertion_point(copy_constructor:pdpb.PeerStats)
}

void PeerStats::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PeerStats_pdpb_2eproto.base);
  ::memset(&peer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_seconds_) -
      reinterpret_cast<char*>(&peer_)) + sizeof(down_seconds_));
}

PeerStats::~PeerStats() {
  // @@protoc_insertion_point(destructor:pdpb.PeerStats)
  SharedDtor();
}

void PeerStats::SharedDtor() {
  if (this != internal_default_instance()) delete peer_;
}

void PeerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerStats& PeerStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PeerStats_pdpb_2eproto.base);
  return *internal_default_instance();
}


void PeerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.PeerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
  down_seconds_ = GOOGLE_PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PeerStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PeerStats*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .metapb.Peer peer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Peer::_InternalParse;
        object = msg->mutable_peer();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // uint64 down_seconds = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_down_seconds(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PeerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.PeerStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Peer peer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 down_seconds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &down_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.PeerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.PeerStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PeerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.PeerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::peer(this), output);
  }

  // uint64 down_seconds = 2;
  if (this->down_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->down_seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.PeerStats)
}

::google::protobuf::uint8* PeerStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.PeerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::peer(this), deterministic, target);
  }

  // uint64 down_seconds = 2;
  if (this->down_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->down_seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.PeerStats)
  return target;
}

size_t PeerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.PeerStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  // uint64 down_seconds = 2;
  if (this->down_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->down_seconds());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.PeerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerStats* source =
      ::google::protobuf::DynamicCastToGenerated<PeerStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.PeerStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.PeerStats)
    MergeFrom(*source);
  }
}

void PeerStats::MergeFrom(const PeerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.PeerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
  if (from.down_seconds() != 0) {
    set_down_seconds(from.down_seconds());
  }
}

void PeerStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.PeerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerStats::CopyFrom(const PeerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.PeerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerStats::IsInitialized() const {
  return true;
}

void PeerStats::Swap(PeerStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerStats::InternalSwap(PeerStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(peer_, other->peer_);
  swap(down_seconds_, other->down_seconds_);
}

::google::protobuf::Metadata PeerStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RegionHeartbeatRequest::InitAsDefaultInstance() {
  ::pdpb::_RegionHeartbeatRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
  ::pdpb::_RegionHeartbeatRequest_default_instance_._instance.get_mutable()->region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
  ::pdpb::_RegionHeartbeatRequest_default_instance_._instance.get_mutable()->leader_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
  ::pdpb::_RegionHeartbeatRequest_default_instance_._instance.get_mutable()->interval_ = const_cast< ::pdpb::TimeInterval*>(
      ::pdpb::TimeInterval::internal_default_instance());
}
class RegionHeartbeatRequest::HasBitSetters {
 public:
  static const ::pdpb::RequestHeader& header(const RegionHeartbeatRequest* msg);
  static const ::metapb::Region& region(const RegionHeartbeatRequest* msg);
  static const ::metapb::Peer& leader(const RegionHeartbeatRequest* msg);
  static const ::pdpb::TimeInterval& interval(const RegionHeartbeatRequest* msg);
};

const ::pdpb::RequestHeader&
RegionHeartbeatRequest::HasBitSetters::header(const RegionHeartbeatRequest* msg) {
  return *msg->header_;
}
const ::metapb::Region&
RegionHeartbeatRequest::HasBitSetters::region(const RegionHeartbeatRequest* msg) {
  return *msg->region_;
}
const ::metapb::Peer&
RegionHeartbeatRequest::HasBitSetters::leader(const RegionHeartbeatRequest* msg) {
  return *msg->leader_;
}
const ::pdpb::TimeInterval&
RegionHeartbeatRequest::HasBitSetters::interval(const RegionHeartbeatRequest* msg) {
  return *msg->interval_;
}
void RegionHeartbeatRequest::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) {
    delete region_;
  }
  region_ = NULL;
}
void RegionHeartbeatRequest::clear_leader() {
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) {
    delete leader_;
  }
  leader_ = NULL;
}
void RegionHeartbeatRequest::clear_pending_peers() {
  pending_peers_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionHeartbeatRequest::kHeaderFieldNumber;
const int RegionHeartbeatRequest::kRegionFieldNumber;
const int RegionHeartbeatRequest::kLeaderFieldNumber;
const int RegionHeartbeatRequest::kDownPeersFieldNumber;
const int RegionHeartbeatRequest::kPendingPeersFieldNumber;
const int RegionHeartbeatRequest::kBytesWrittenFieldNumber;
const int RegionHeartbeatRequest::kBytesReadFieldNumber;
const int RegionHeartbeatRequest::kKeysWrittenFieldNumber;
const int RegionHeartbeatRequest::kKeysReadFieldNumber;
const int RegionHeartbeatRequest::kApproximateSizeFieldNumber;
const int RegionHeartbeatRequest::kIntervalFieldNumber;
const int RegionHeartbeatRequest::kApproximateKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionHeartbeatRequest::RegionHeartbeatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.RegionHeartbeatRequest)
}
RegionHeartbeatRequest::RegionHeartbeatRequest(const RegionHeartbeatRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      down_peers_(from.down_peers_),
      pending_peers_(from.pending_peers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_region()) {
    region_ = new ::metapb::Region(*from.region_);
  } else {
    region_ = NULL;
  }
  if (from.has_leader()) {
    leader_ = new ::metapb::Peer(*from.leader_);
  } else {
    leader_ = NULL;
  }
  if (from.has_interval()) {
    interval_ = new ::pdpb::TimeInterval(*from.interval_);
  } else {
    interval_ = NULL;
  }
  ::memcpy(&bytes_written_, &from.bytes_written_,
    static_cast<size_t>(reinterpret_cast<char*>(&approximate_keys_) -
    reinterpret_cast<char*>(&bytes_written_)) + sizeof(approximate_keys_));
  // @@protoc_insertion_point(copy_constructor:pdpb.RegionHeartbeatRequest)
}

void RegionHeartbeatRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RegionHeartbeatRequest_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&approximate_keys_) -
      reinterpret_cast<char*>(&header_)) + sizeof(approximate_keys_));
}

RegionHeartbeatRequest::~RegionHeartbeatRequest() {
  // @@protoc_insertion_point(destructor:pdpb.RegionHeartbeatRequest)
  SharedDtor();
}

void RegionHeartbeatRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete region_;
  if (this != internal_default_instance()) delete leader_;
  if (this != internal_default_instance()) delete interval_;
}

void RegionHeartbeatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionHeartbeatRequest& RegionHeartbeatRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RegionHeartbeatRequest_pdpb_2eproto.base);
  return *internal_default_instance();
}


void RegionHeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.RegionHeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  down_peers_.Clear();
  pending_peers_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && region_ != NULL) {
    delete region_;
  }
  region_ = NULL;
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) {
    delete leader_;
  }
  leader_ = NULL;
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) {
    delete interval_;
  }
  interval_ = NULL;
  ::memset(&bytes_written_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&approximate_keys_) -
      reinterpret_cast<char*>(&bytes_written_)) + sizeof(approximate_keys_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegionHeartbeatRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RegionHeartbeatRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::RequestHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .metapb.Region region = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Region::_InternalParse;
        object = msg->mutable_region();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .metapb.Peer leader = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Peer::_InternalParse;
        object = msg->mutable_leader();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // repeated .pdpb.PeerStats down_peers = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::pdpb::PeerStats::_InternalParse;
          object = msg->add_down_peers();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .metapb.Peer pending_peers = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::metapb::Peer::_InternalParse;
          object = msg->add_pending_peers();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // uint64 bytes_written = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_bytes_written(value);
        break;
      }
      // uint64 bytes_read = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_bytes_read(value);
        break;
      }
      // uint64 keys_written = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_keys_written(value);
        break;
      }
      // uint64 keys_read = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_keys_read(value);
        break;
      }
      // uint64 approximate_size = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_approximate_size(value);
        break;
      }
      // .pdpb.TimeInterval interval = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::TimeInterval::_InternalParse;
        object = msg->mutable_interval();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // uint64 approximate_keys = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_approximate_keys(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegionHeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.RegionHeartbeatRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Region region = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Peer leader = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pdpb.PeerStats down_peers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_down_peers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metapb.Peer pending_peers = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pending_peers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bytes_written = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_written_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bytes_read = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 keys_written = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keys_written_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 keys_read = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keys_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 approximate_size = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &approximate_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pdpb.TimeInterval interval = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 approximate_keys = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &approximate_keys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.RegionHeartbeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.RegionHeartbeatRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegionHeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.RegionHeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .metapb.Region region = 2;
  if (this->has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::region(this), output);
  }

  // .metapb.Peer leader = 3;
  if (this->has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::leader(this), output);
  }

  // repeated .pdpb.PeerStats down_peers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->down_peers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->down_peers(static_cast<int>(i)),
      output);
  }

  // repeated .metapb.Peer pending_peers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pending_peers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->pending_peers(static_cast<int>(i)),
      output);
  }

  // uint64 bytes_written = 6;
  if (this->bytes_written() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->bytes_written(), output);
  }

  // uint64 bytes_read = 7;
  if (this->bytes_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->bytes_read(), output);
  }

  // uint64 keys_written = 8;
  if (this->keys_written() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->keys_written(), output);
  }

  // uint64 keys_read = 9;
  if (this->keys_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->keys_read(), output);
  }

  // uint64 approximate_size = 10;
  if (this->approximate_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->approximate_size(), output);
  }

  // .pdpb.TimeInterval interval = 12;
  if (this->has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::interval(this), output);
  }

  // uint64 approximate_keys = 13;
  if (this->approximate_keys() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->approximate_keys(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.RegionHeartbeatRequest)
}

::google::protobuf::uint8* RegionHeartbeatRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.RegionHeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // .metapb.Region region = 2;
  if (this->has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::region(this), deterministic, target);
  }

  // .metapb.Peer leader = 3;
  if (this->has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::leader(this), deterministic, target);
  }

  // repeated .pdpb.PeerStats down_peers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->down_peers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->down_peers(static_cast<int>(i)), deterministic, target);
  }

  // repeated .metapb.Peer pending_peers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pending_peers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->pending_peers(static_cast<int>(i)), deterministic, target);
  }

  // uint64 bytes_written = 6;
  if (this->bytes_written() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->bytes_written(), target);
  }

  // uint64 bytes_read = 7;
  if (this->bytes_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->bytes_read(), target);
  }

  // uint64 keys_written = 8;
  if (this->keys_written() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->keys_written(), target);
  }

  // uint64 keys_read = 9;
  if (this->keys_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->keys_read(), target);
  }

  // uint64 approximate_size = 10;
  if (this->approximate_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->approximate_size(), target);
  }

  // .pdpb.TimeInterval interval = 12;
  if (this->has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::interval(this), deterministic, target);
  }

  // uint64 approximate_keys = 13;
  if (this->approximate_keys() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->approximate_keys(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.RegionHeartbeatRequest)
  return target;
}

size_t RegionHeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.RegionHeartbeatRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pdpb.PeerStats down_peers = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->down_peers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->down_peers(static_cast<int>(i)));
    }
  }

  // repeated .metapb.Peer pending_peers = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->pending_peers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pending_peers(static_cast<int>(i)));
    }
  }

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .metapb.Region region = 2;
  if (this->has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *region_);
  }

  // .metapb.Peer leader = 3;
  if (this->has_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *leader_);
  }

  // .pdpb.TimeInterval interval = 12;
  if (this->has_interval()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *interval_);
  }

  // uint64 bytes_written = 6;
  if (this->bytes_written() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes_written());
  }

  // uint64 bytes_read = 7;
  if (this->bytes_read() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes_read());
  }

  // uint64 keys_written = 8;
  if (this->keys_written() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->keys_written());
  }

  // uint64 keys_read = 9;
  if (this->keys_read() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->keys_read());
  }

  // uint64 approximate_size = 10;
  if (this->approximate_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->approximate_size());
  }

  // uint64 approximate_keys = 13;
  if (this->approximate_keys() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->approximate_keys());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionHeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.RegionHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionHeartbeatRequest* source =
      ::google::protobuf::DynamicCastToGenerated<RegionHeartbeatRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.RegionHeartbeatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.RegionHeartbeatRequest)
    MergeFrom(*source);
  }
}

void RegionHeartbeatRequest::MergeFrom(const RegionHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.RegionHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  down_peers_.MergeFrom(from.down_peers_);
  pending_peers_.MergeFrom(from.pending_peers_);
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
  if (from.has_leader()) {
    mutable_leader()->::metapb::Peer::MergeFrom(from.leader());
  }
  if (from.has_interval()) {
    mutable_interval()->::pdpb::TimeInterval::MergeFrom(from.interval());
  }
  if (from.bytes_written() != 0) {
    set_bytes_written(from.bytes_written());
  }
  if (from.bytes_read() != 0) {
    set_bytes_read(from.bytes_read());
  }
  if (from.keys_written() != 0) {
    set_keys_written(from.keys_written());
  }
  if (from.keys_read() != 0) {
    set_keys_read(from.keys_read());
  }
  if (from.approximate_size() != 0) {
    set_approximate_size(from.approximate_size());
  }
  if (from.approximate_keys() != 0) {
    set_approximate_keys(from.approximate_keys());
  }
}

void RegionHeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.RegionHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionHeartbeatRequest::CopyFrom(const RegionHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.RegionHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionHeartbeatRequest::IsInitialized() const {
  return true;
}

void RegionHeartbeatRequest::Swap(RegionHeartbeatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionHeartbeatRequest::InternalSwap(RegionHeartbeatRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&down_peers_)->InternalSwap(CastToBase(&other->down_peers_));
  CastToBase(&pending_peers_)->InternalSwap(CastToBase(&other->pending_peers_));
  swap(header_, other->header_);
  swap(region_, other->region_);
  swap(leader_, other->leader_);
  swap(interval_, other->interval_);
  swap(bytes_written_, other->bytes_written_);
  swap(bytes_read_, other->bytes_read_);
  swap(keys_written_, other->keys_written_);
  swap(keys_read_, other->keys_read_);
  swap(approximate_size_, other->approximate_size_);
  swap(approximate_keys_, other->approximate_keys_);
}

::google::protobuf::Metadata RegionHeartbeatRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ChangePeer::InitAsDefaultInstance() {
  ::pdpb::_ChangePeer_default_instance_._instance.get_mutable()->peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}
class ChangePeer::HasBitSetters {
 public:
  static const ::metapb::Peer& peer(const ChangePeer* msg);
};

const ::metapb::Peer&
ChangePeer::HasBitSetters::peer(const ChangePeer* msg) {
  return *msg->peer_;
}
void ChangePeer::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangePeer::kPeerFieldNumber;
const int ChangePeer::kChangeTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangePeer::ChangePeer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.ChangePeer)
}
ChangePeer::ChangePeer(const ChangePeer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peer()) {
    peer_ = new ::metapb::Peer(*from.peer_);
  } else {
    peer_ = NULL;
  }
  change_type_ = from.change_type_;
  // @@protoc_insertion_point(copy_constructor:pdpb.ChangePeer)
}

void ChangePeer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ChangePeer_pdpb_2eproto.base);
  ::memset(&peer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_type_) -
      reinterpret_cast<char*>(&peer_)) + sizeof(change_type_));
}

ChangePeer::~ChangePeer() {
  // @@protoc_insertion_point(destructor:pdpb.ChangePeer)
  SharedDtor();
}

void ChangePeer::SharedDtor() {
  if (this != internal_default_instance()) delete peer_;
}

void ChangePeer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangePeer& ChangePeer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ChangePeer_pdpb_2eproto.base);
  return *internal_default_instance();
}


void ChangePeer::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.ChangePeer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
  change_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChangePeer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ChangePeer*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .metapb.Peer peer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Peer::_InternalParse;
        object = msg->mutable_peer();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .eraftpb.ConfChangeType change_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::eraftpb::ConfChangeType value = static_cast<::eraftpb::ConfChangeType>(val);
        msg->set_change_type(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChangePeer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.ChangePeer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Peer peer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .eraftpb.ConfChangeType change_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_change_type(static_cast< ::eraftpb::ConfChangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.ChangePeer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.ChangePeer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChangePeer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.ChangePeer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::peer(this), output);
  }

  // .eraftpb.ConfChangeType change_type = 2;
  if (this->change_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->change_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.ChangePeer)
}

::google::protobuf::uint8* ChangePeer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.ChangePeer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::peer(this), deterministic, target);
  }

  // .eraftpb.ConfChangeType change_type = 2;
  if (this->change_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->change_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.ChangePeer)
  return target;
}

size_t ChangePeer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.ChangePeer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  // .eraftpb.ConfChangeType change_type = 2;
  if (this->change_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangePeer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.ChangePeer)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangePeer* source =
      ::google::protobuf::DynamicCastToGenerated<ChangePeer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.ChangePeer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.ChangePeer)
    MergeFrom(*source);
  }
}

void ChangePeer::MergeFrom(const ChangePeer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.ChangePeer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
  if (from.change_type() != 0) {
    set_change_type(from.change_type());
  }
}

void ChangePeer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.ChangePeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePeer::CopyFrom(const ChangePeer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.ChangePeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePeer::IsInitialized() const {
  return true;
}

void ChangePeer::Swap(ChangePeer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangePeer::InternalSwap(ChangePeer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(peer_, other->peer_);
  swap(change_type_, other->change_type_);
}

::google::protobuf::Metadata ChangePeer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TransferLeader::InitAsDefaultInstance() {
  ::pdpb::_TransferLeader_default_instance_._instance.get_mutable()->peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}
class TransferLeader::HasBitSetters {
 public:
  static const ::metapb::Peer& peer(const TransferLeader* msg);
};

const ::metapb::Peer&
TransferLeader::HasBitSetters::peer(const TransferLeader* msg) {
  return *msg->peer_;
}
void TransferLeader::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferLeader::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferLeader::TransferLeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.TransferLeader)
}
TransferLeader::TransferLeader(const TransferLeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peer()) {
    peer_ = new ::metapb::Peer(*from.peer_);
  } else {
    peer_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.TransferLeader)
}

void TransferLeader::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TransferLeader_pdpb_2eproto.base);
  peer_ = NULL;
}

TransferLeader::~TransferLeader() {
  // @@protoc_insertion_point(destructor:pdpb.TransferLeader)
  SharedDtor();
}

void TransferLeader::SharedDtor() {
  if (this != internal_default_instance()) delete peer_;
}

void TransferLeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferLeader& TransferLeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransferLeader_pdpb_2eproto.base);
  return *internal_default_instance();
}


void TransferLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.TransferLeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransferLeader::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransferLeader*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .metapb.Peer peer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Peer::_InternalParse;
        object = msg->mutable_peer();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransferLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.TransferLeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Peer peer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.TransferLeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.TransferLeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransferLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.TransferLeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::peer(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.TransferLeader)
}

::google::protobuf::uint8* TransferLeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.TransferLeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::peer(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.TransferLeader)
  return target;
}

size_t TransferLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.TransferLeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferLeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.TransferLeader)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferLeader* source =
      ::google::protobuf::DynamicCastToGenerated<TransferLeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.TransferLeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.TransferLeader)
    MergeFrom(*source);
  }
}

void TransferLeader::MergeFrom(const TransferLeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.TransferLeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
}

void TransferLeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.TransferLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferLeader::CopyFrom(const TransferLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.TransferLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferLeader::IsInitialized() const {
  return true;
}

void TransferLeader::Swap(TransferLeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferLeader::InternalSwap(TransferLeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(peer_, other->peer_);
}

::google::protobuf::Metadata TransferLeader::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Merge::InitAsDefaultInstance() {
  ::pdpb::_Merge_default_instance_._instance.get_mutable()->target_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}
class Merge::HasBitSetters {
 public:
  static const ::metapb::Region& target(const Merge* msg);
};

const ::metapb::Region&
Merge::HasBitSetters::target(const Merge* msg) {
  return *msg->target_;
}
void Merge::clear_target() {
  if (GetArenaNoVirtual() == NULL && target_ != NULL) {
    delete target_;
  }
  target_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Merge::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Merge::Merge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.Merge)
}
Merge::Merge(const Merge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target()) {
    target_ = new ::metapb::Region(*from.target_);
  } else {
    target_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.Merge)
}

void Merge::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Merge_pdpb_2eproto.base);
  target_ = NULL;
}

Merge::~Merge() {
  // @@protoc_insertion_point(destructor:pdpb.Merge)
  SharedDtor();
}

void Merge::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
}

void Merge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Merge& Merge::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Merge_pdpb_2eproto.base);
  return *internal_default_instance();
}


void Merge::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.Merge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && target_ != NULL) {
    delete target_;
  }
  target_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Merge::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Merge*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .metapb.Region target = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Region::_InternalParse;
        object = msg->mutable_target();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Merge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.Merge)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Region target = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.Merge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.Merge)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Merge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.Merge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Region target = 1;
  if (this->has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::target(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.Merge)
}

::google::protobuf::uint8* Merge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.Merge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Region target = 1;
  if (this->has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::target(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.Merge)
  return target;
}

size_t Merge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.Merge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metapb.Region target = 1;
  if (this->has_target()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *target_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Merge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.Merge)
  GOOGLE_DCHECK_NE(&from, this);
  const Merge* source =
      ::google::protobuf::DynamicCastToGenerated<Merge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.Merge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.Merge)
    MergeFrom(*source);
  }
}

void Merge::MergeFrom(const Merge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.Merge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target()) {
    mutable_target()->::metapb::Region::MergeFrom(from.target());
  }
}

void Merge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.Merge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Merge::CopyFrom(const Merge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.Merge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Merge::IsInitialized() const {
  return true;
}

void Merge::Swap(Merge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Merge::InternalSwap(Merge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(target_, other->target_);
}

::google::protobuf::Metadata Merge::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SplitRegion::InitAsDefaultInstance() {
}
class SplitRegion::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitRegion::kPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitRegion::SplitRegion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.SplitRegion)
}
SplitRegion::SplitRegion(const SplitRegion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  policy_ = from.policy_;
  // @@protoc_insertion_point(copy_constructor:pdpb.SplitRegion)
}

void SplitRegion::SharedCtor() {
  policy_ = 0;
}

SplitRegion::~SplitRegion() {
  // @@protoc_insertion_point(destructor:pdpb.SplitRegion)
  SharedDtor();
}

void SplitRegion::SharedDtor() {
}

void SplitRegion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SplitRegion& SplitRegion::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SplitRegion_pdpb_2eproto.base);
  return *internal_default_instance();
}


void SplitRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.SplitRegion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  policy_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SplitRegion::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SplitRegion*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.CheckPolicy policy = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::pdpb::CheckPolicy value = static_cast<::pdpb::CheckPolicy>(val);
        msg->set_policy(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SplitRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.SplitRegion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.CheckPolicy policy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_policy(static_cast< ::pdpb::CheckPolicy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.SplitRegion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.SplitRegion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SplitRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.SplitRegion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.CheckPolicy policy = 1;
  if (this->policy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->policy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.SplitRegion)
}

::google::protobuf::uint8* SplitRegion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.SplitRegion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.CheckPolicy policy = 1;
  if (this->policy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->policy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.SplitRegion)
  return target;
}

size_t SplitRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.SplitRegion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.CheckPolicy policy = 1;
  if (this->policy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->policy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplitRegion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.SplitRegion)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitRegion* source =
      ::google::protobuf::DynamicCastToGenerated<SplitRegion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.SplitRegion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.SplitRegion)
    MergeFrom(*source);
  }
}

void SplitRegion::MergeFrom(const SplitRegion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.SplitRegion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.policy() != 0) {
    set_policy(from.policy());
  }
}

void SplitRegion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.SplitRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitRegion::CopyFrom(const SplitRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.SplitRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitRegion::IsInitialized() const {
  return true;
}

void SplitRegion::Swap(SplitRegion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitRegion::InternalSwap(SplitRegion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(policy_, other->policy_);
}

::google::protobuf::Metadata SplitRegion::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RegionHeartbeatResponse::InitAsDefaultInstance() {
  ::pdpb::_RegionHeartbeatResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
  ::pdpb::_RegionHeartbeatResponse_default_instance_._instance.get_mutable()->change_peer_ = const_cast< ::pdpb::ChangePeer*>(
      ::pdpb::ChangePeer::internal_default_instance());
  ::pdpb::_RegionHeartbeatResponse_default_instance_._instance.get_mutable()->transfer_leader_ = const_cast< ::pdpb::TransferLeader*>(
      ::pdpb::TransferLeader::internal_default_instance());
  ::pdpb::_RegionHeartbeatResponse_default_instance_._instance.get_mutable()->region_epoch_ = const_cast< ::metapb::RegionEpoch*>(
      ::metapb::RegionEpoch::internal_default_instance());
  ::pdpb::_RegionHeartbeatResponse_default_instance_._instance.get_mutable()->target_peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
  ::pdpb::_RegionHeartbeatResponse_default_instance_._instance.get_mutable()->merge_ = const_cast< ::pdpb::Merge*>(
      ::pdpb::Merge::internal_default_instance());
  ::pdpb::_RegionHeartbeatResponse_default_instance_._instance.get_mutable()->split_region_ = const_cast< ::pdpb::SplitRegion*>(
      ::pdpb::SplitRegion::internal_default_instance());
}
class RegionHeartbeatResponse::HasBitSetters {
 public:
  static const ::pdpb::ResponseHeader& header(const RegionHeartbeatResponse* msg);
  static const ::pdpb::ChangePeer& change_peer(const RegionHeartbeatResponse* msg);
  static const ::pdpb::TransferLeader& transfer_leader(const RegionHeartbeatResponse* msg);
  static const ::metapb::RegionEpoch& region_epoch(const RegionHeartbeatResponse* msg);
  static const ::metapb::Peer& target_peer(const RegionHeartbeatResponse* msg);
  static const ::pdpb::Merge& merge(const RegionHeartbeatResponse* msg);
  static const ::pdpb::SplitRegion& split_region(const RegionHeartbeatResponse* msg);
};

const ::pdpb::ResponseHeader&
RegionHeartbeatResponse::HasBitSetters::header(const RegionHeartbeatResponse* msg) {
  return *msg->header_;
}
const ::pdpb::ChangePeer&
RegionHeartbeatResponse::HasBitSetters::change_peer(const RegionHeartbeatResponse* msg) {
  return *msg->change_peer_;
}
const ::pdpb::TransferLeader&
RegionHeartbeatResponse::HasBitSetters::transfer_leader(const RegionHeartbeatResponse* msg) {
  return *msg->transfer_leader_;
}
const ::metapb::RegionEpoch&
RegionHeartbeatResponse::HasBitSetters::region_epoch(const RegionHeartbeatResponse* msg) {
  return *msg->region_epoch_;
}
const ::metapb::Peer&
RegionHeartbeatResponse::HasBitSetters::target_peer(const RegionHeartbeatResponse* msg) {
  return *msg->target_peer_;
}
const ::pdpb::Merge&
RegionHeartbeatResponse::HasBitSetters::merge(const RegionHeartbeatResponse* msg) {
  return *msg->merge_;
}
const ::pdpb::SplitRegion&
RegionHeartbeatResponse::HasBitSetters::split_region(const RegionHeartbeatResponse* msg) {
  return *msg->split_region_;
}
void RegionHeartbeatResponse::clear_region_epoch() {
  if (GetArenaNoVirtual() == NULL && region_epoch_ != NULL) {
    delete region_epoch_;
  }
  region_epoch_ = NULL;
}
void RegionHeartbeatResponse::clear_target_peer() {
  if (GetArenaNoVirtual() == NULL && target_peer_ != NULL) {
    delete target_peer_;
  }
  target_peer_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionHeartbeatResponse::kHeaderFieldNumber;
const int RegionHeartbeatResponse::kChangePeerFieldNumber;
const int RegionHeartbeatResponse::kTransferLeaderFieldNumber;
const int RegionHeartbeatResponse::kRegionIdFieldNumber;
const int RegionHeartbeatResponse::kRegionEpochFieldNumber;
const int RegionHeartbeatResponse::kTargetPeerFieldNumber;
const int RegionHeartbeatResponse::kMergeFieldNumber;
const int RegionHeartbeatResponse::kSplitRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionHeartbeatResponse::RegionHeartbeatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.RegionHeartbeatResponse)
}
RegionHeartbeatResponse::RegionHeartbeatResponse(const RegionHeartbeatResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_change_peer()) {
    change_peer_ = new ::pdpb::ChangePeer(*from.change_peer_);
  } else {
    change_peer_ = NULL;
  }
  if (from.has_transfer_leader()) {
    transfer_leader_ = new ::pdpb::TransferLeader(*from.transfer_leader_);
  } else {
    transfer_leader_ = NULL;
  }
  if (from.has_region_epoch()) {
    region_epoch_ = new ::metapb::RegionEpoch(*from.region_epoch_);
  } else {
    region_epoch_ = NULL;
  }
  if (from.has_target_peer()) {
    target_peer_ = new ::metapb::Peer(*from.target_peer_);
  } else {
    target_peer_ = NULL;
  }
  if (from.has_merge()) {
    merge_ = new ::pdpb::Merge(*from.merge_);
  } else {
    merge_ = NULL;
  }
  if (from.has_split_region()) {
    split_region_ = new ::pdpb::SplitRegion(*from.split_region_);
  } else {
    split_region_ = NULL;
  }
  region_id_ = from.region_id_;
  // @@protoc_insertion_point(copy_constructor:pdpb.RegionHeartbeatResponse)
}

void RegionHeartbeatResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RegionHeartbeatResponse_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(region_id_));
}

RegionHeartbeatResponse::~RegionHeartbeatResponse() {
  // @@protoc_insertion_point(destructor:pdpb.RegionHeartbeatResponse)
  SharedDtor();
}

void RegionHeartbeatResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete change_peer_;
  if (this != internal_default_instance()) delete transfer_leader_;
  if (this != internal_default_instance()) delete region_epoch_;
  if (this != internal_default_instance()) delete target_peer_;
  if (this != internal_default_instance()) delete merge_;
  if (this != internal_default_instance()) delete split_region_;
}

void RegionHeartbeatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionHeartbeatResponse& RegionHeartbeatResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RegionHeartbeatResponse_pdpb_2eproto.base);
  return *internal_default_instance();
}


void RegionHeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.RegionHeartbeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && change_peer_ != NULL) {
    delete change_peer_;
  }
  change_peer_ = NULL;
  if (GetArenaNoVirtual() == NULL && transfer_leader_ != NULL) {
    delete transfer_leader_;
  }
  transfer_leader_ = NULL;
  if (GetArenaNoVirtual() == NULL && region_epoch_ != NULL) {
    delete region_epoch_;
  }
  region_epoch_ = NULL;
  if (GetArenaNoVirtual() == NULL && target_peer_ != NULL) {
    delete target_peer_;
  }
  target_peer_ = NULL;
  if (GetArenaNoVirtual() == NULL && merge_ != NULL) {
    delete merge_;
  }
  merge_ = NULL;
  if (GetArenaNoVirtual() == NULL && split_region_ != NULL) {
    delete split_region_;
  }
  split_region_ = NULL;
  region_id_ = GOOGLE_PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegionHeartbeatResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RegionHeartbeatResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .pdpb.ChangePeer change_peer = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::ChangePeer::_InternalParse;
        object = msg->mutable_change_peer();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .pdpb.TransferLeader transfer_leader = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::TransferLeader::_InternalParse;
        object = msg->mutable_transfer_leader();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // uint64 region_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_region_id(value);
        break;
      }
      // .metapb.RegionEpoch region_epoch = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::RegionEpoch::_InternalParse;
        object = msg->mutable_region_epoch();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .metapb.Peer target_peer = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Peer::_InternalParse;
        object = msg->mutable_target_peer();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .pdpb.Merge merge = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::Merge::_InternalParse;
        object = msg->mutable_merge();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .pdpb.SplitRegion split_region = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::SplitRegion::_InternalParse;
        object = msg->mutable_split_region();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegionHeartbeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.RegionHeartbeatResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pdpb.ChangePeer change_peer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_change_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pdpb.TransferLeader transfer_leader = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transfer_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 region_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.RegionEpoch region_epoch = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_region_epoch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Peer target_peer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pdpb.Merge merge = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_merge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pdpb.SplitRegion split_region = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_split_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.RegionHeartbeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.RegionHeartbeatResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegionHeartbeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.RegionHeartbeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .pdpb.ChangePeer change_peer = 2;
  if (this->has_change_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::change_peer(this), output);
  }

  // .pdpb.TransferLeader transfer_leader = 3;
  if (this->has_transfer_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::transfer_leader(this), output);
  }

  // uint64 region_id = 4;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->region_id(), output);
  }

  // .metapb.RegionEpoch region_epoch = 5;
  if (this->has_region_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::region_epoch(this), output);
  }

  // .metapb.Peer target_peer = 6;
  if (this->has_target_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::target_peer(this), output);
  }

  // .pdpb.Merge merge = 7;
  if (this->has_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::merge(this), output);
  }

  // .pdpb.SplitRegion split_region = 8;
  if (this->has_split_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::split_region(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.RegionHeartbeatResponse)
}

::google::protobuf::uint8* RegionHeartbeatResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.RegionHeartbeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // .pdpb.ChangePeer change_peer = 2;
  if (this->has_change_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::change_peer(this), deterministic, target);
  }

  // .pdpb.TransferLeader transfer_leader = 3;
  if (this->has_transfer_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::transfer_leader(this), deterministic, target);
  }

  // uint64 region_id = 4;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->region_id(), target);
  }

  // .metapb.RegionEpoch region_epoch = 5;
  if (this->has_region_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::region_epoch(this), deterministic, target);
  }

  // .metapb.Peer target_peer = 6;
  if (this->has_target_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::target_peer(this), deterministic, target);
  }

  // .pdpb.Merge merge = 7;
  if (this->has_merge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::merge(this), deterministic, target);
  }

  // .pdpb.SplitRegion split_region = 8;
  if (this->has_split_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::split_region(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.RegionHeartbeatResponse)
  return target;
}

size_t RegionHeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.RegionHeartbeatResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .pdpb.ChangePeer change_peer = 2;
  if (this->has_change_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *change_peer_);
  }

  // .pdpb.TransferLeader transfer_leader = 3;
  if (this->has_transfer_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *transfer_leader_);
  }

  // .metapb.RegionEpoch region_epoch = 5;
  if (this->has_region_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *region_epoch_);
  }

  // .metapb.Peer target_peer = 6;
  if (this->has_target_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *target_peer_);
  }

  // .pdpb.Merge merge = 7;
  if (this->has_merge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *merge_);
  }

  // .pdpb.SplitRegion split_region = 8;
  if (this->has_split_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *split_region_);
  }

  // uint64 region_id = 4;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->region_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionHeartbeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.RegionHeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionHeartbeatResponse* source =
      ::google::protobuf::DynamicCastToGenerated<RegionHeartbeatResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.RegionHeartbeatResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.RegionHeartbeatResponse)
    MergeFrom(*source);
  }
}

void RegionHeartbeatResponse::MergeFrom(const RegionHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.RegionHeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_change_peer()) {
    mutable_change_peer()->::pdpb::ChangePeer::MergeFrom(from.change_peer());
  }
  if (from.has_transfer_leader()) {
    mutable_transfer_leader()->::pdpb::TransferLeader::MergeFrom(from.transfer_leader());
  }
  if (from.has_region_epoch()) {
    mutable_region_epoch()->::metapb::RegionEpoch::MergeFrom(from.region_epoch());
  }
  if (from.has_target_peer()) {
    mutable_target_peer()->::metapb::Peer::MergeFrom(from.target_peer());
  }
  if (from.has_merge()) {
    mutable_merge()->::pdpb::Merge::MergeFrom(from.merge());
  }
  if (from.has_split_region()) {
    mutable_split_region()->::pdpb::SplitRegion::MergeFrom(from.split_region());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
}

void RegionHeartbeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.RegionHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionHeartbeatResponse::CopyFrom(const RegionHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.RegionHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionHeartbeatResponse::IsInitialized() const {
  return true;
}

void RegionHeartbeatResponse::Swap(RegionHeartbeatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionHeartbeatResponse::InternalSwap(RegionHeartbeatResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(change_peer_, other->change_peer_);
  swap(transfer_leader_, other->transfer_leader_);
  swap(region_epoch_, other->region_epoch_);
  swap(target_peer_, other->target_peer_);
  swap(merge_, other->merge_);
  swap(split_region_, other->split_region_);
  swap(region_id_, other->region_id_);
}

::google::protobuf::Metadata RegionHeartbeatResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AskSplitRequest::InitAsDefaultInstance() {
  ::pdpb::_AskSplitRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
  ::pdpb::_AskSplitRequest_default_instance_._instance.get_mutable()->region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}
class AskSplitRequest::HasBitSetters {
 public:
  static const ::pdpb::RequestHeader& header(const AskSplitRequest* msg);
  static const ::metapb::Region& region(const AskSplitRequest* msg);
};

const ::pdpb::RequestHeader&
AskSplitRequest::HasBitSetters::header(const AskSplitRequest* msg) {
  return *msg->header_;
}
const ::metapb::Region&
AskSplitRequest::HasBitSetters::region(const AskSplitRequest* msg) {
  return *msg->region_;
}
void AskSplitRequest::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) {
    delete region_;
  }
  region_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AskSplitRequest::kHeaderFieldNumber;
const int AskSplitRequest::kRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AskSplitRequest::AskSplitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.AskSplitRequest)
}
AskSplitRequest::AskSplitRequest(const AskSplitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_region()) {
    region_ = new ::metapb::Region(*from.region_);
  } else {
    region_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.AskSplitRequest)
}

void AskSplitRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AskSplitRequest_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_) -
      reinterpret_cast<char*>(&header_)) + sizeof(region_));
}

AskSplitRequest::~AskSplitRequest() {
  // @@protoc_insertion_point(destructor:pdpb.AskSplitRequest)
  SharedDtor();
}

void AskSplitRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete region_;
}

void AskSplitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AskSplitRequest& AskSplitRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AskSplitRequest_pdpb_2eproto.base);
  return *internal_default_instance();
}


void AskSplitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.AskSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && region_ != NULL) {
    delete region_;
  }
  region_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AskSplitRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AskSplitRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::RequestHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .metapb.Region region = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Region::_InternalParse;
        object = msg->mutable_region();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AskSplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.AskSplitRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Region region = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.AskSplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.AskSplitRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AskSplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.AskSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .metapb.Region region = 2;
  if (this->has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::region(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.AskSplitRequest)
}

::google::protobuf::uint8* AskSplitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.AskSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // .metapb.Region region = 2;
  if (this->has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::region(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.AskSplitRequest)
  return target;
}

size_t AskSplitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.AskSplitRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .metapb.Region region = 2;
  if (this->has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *region_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AskSplitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.AskSplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AskSplitRequest* source =
      ::google::protobuf::DynamicCastToGenerated<AskSplitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.AskSplitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.AskSplitRequest)
    MergeFrom(*source);
  }
}

void AskSplitRequest::MergeFrom(const AskSplitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.AskSplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
}

void AskSplitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.AskSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskSplitRequest::CopyFrom(const AskSplitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.AskSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskSplitRequest::IsInitialized() const {
  return true;
}

void AskSplitRequest::Swap(AskSplitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AskSplitRequest::InternalSwap(AskSplitRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(region_, other->region_);
}

::google::protobuf::Metadata AskSplitRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AskSplitResponse::InitAsDefaultInstance() {
  ::pdpb::_AskSplitResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}
class AskSplitResponse::HasBitSetters {
 public:
  static const ::pdpb::ResponseHeader& header(const AskSplitResponse* msg);
};

const ::pdpb::ResponseHeader&
AskSplitResponse::HasBitSetters::header(const AskSplitResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AskSplitResponse::kHeaderFieldNumber;
const int AskSplitResponse::kNewRegionIdFieldNumber;
const int AskSplitResponse::kNewPeerIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AskSplitResponse::AskSplitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.AskSplitResponse)
}
AskSplitResponse::AskSplitResponse(const AskSplitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      new_peer_ids_(from.new_peer_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  new_region_id_ = from.new_region_id_;
  // @@protoc_insertion_point(copy_constructor:pdpb.AskSplitResponse)
}

void AskSplitResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AskSplitResponse_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_region_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(new_region_id_));
}

AskSplitResponse::~AskSplitResponse() {
  // @@protoc_insertion_point(destructor:pdpb.AskSplitResponse)
  SharedDtor();
}

void AskSplitResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AskSplitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AskSplitResponse& AskSplitResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AskSplitResponse_pdpb_2eproto.base);
  return *internal_default_instance();
}


void AskSplitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.AskSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_peer_ids_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  new_region_id_ = GOOGLE_PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AskSplitResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AskSplitResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // uint64 new_region_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_new_region_id(value);
        break;
      }
      // repeated uint64 new_peer_ids = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
          object = msg->mutable_new_peer_ids();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val;
          ptr = Varint::Parse64(ptr, &val);
          if (!ptr) goto error;
          ::google::protobuf::uint64 value = val;
          msg->add_new_peer_ids(value);
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AskSplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.AskSplitResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 new_region_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 new_peer_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_new_peer_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26u, input, this->mutable_new_peer_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.AskSplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.AskSplitResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AskSplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.AskSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // uint64 new_region_id = 2;
  if (this->new_region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->new_region_id(), output);
  }

  // repeated uint64 new_peer_ids = 3;
  if (this->new_peer_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_new_peer_ids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->new_peer_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->new_peer_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.AskSplitResponse)
}

::google::protobuf::uint8* AskSplitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.AskSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // uint64 new_region_id = 2;
  if (this->new_region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->new_region_id(), target);
  }

  // repeated uint64 new_peer_ids = 3;
  if (this->new_peer_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _new_peer_ids_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->new_peer_ids_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.AskSplitResponse)
  return target;
}

size_t AskSplitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.AskSplitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 new_peer_ids = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->new_peer_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _new_peer_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 new_region_id = 2;
  if (this->new_region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->new_region_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AskSplitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.AskSplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AskSplitResponse* source =
      ::google::protobuf::DynamicCastToGenerated<AskSplitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.AskSplitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.AskSplitResponse)
    MergeFrom(*source);
  }
}

void AskSplitResponse::MergeFrom(const AskSplitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.AskSplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  new_peer_ids_.MergeFrom(from.new_peer_ids_);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.new_region_id() != 0) {
    set_new_region_id(from.new_region_id());
  }
}

void AskSplitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.AskSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskSplitResponse::CopyFrom(const AskSplitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.AskSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskSplitResponse::IsInitialized() const {
  return true;
}

void AskSplitResponse::Swap(AskSplitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AskSplitResponse::InternalSwap(AskSplitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  new_peer_ids_.InternalSwap(&other->new_peer_ids_);
  swap(header_, other->header_);
  swap(new_region_id_, other->new_region_id_);
}

::google::protobuf::Metadata AskSplitResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReportSplitRequest::InitAsDefaultInstance() {
  ::pdpb::_ReportSplitRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
  ::pdpb::_ReportSplitRequest_default_instance_._instance.get_mutable()->left_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
  ::pdpb::_ReportSplitRequest_default_instance_._instance.get_mutable()->right_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}
class ReportSplitRequest::HasBitSetters {
 public:
  static const ::pdpb::RequestHeader& header(const ReportSplitRequest* msg);
  static const ::metapb::Region& left(const ReportSplitRequest* msg);
  static const ::metapb::Region& right(const ReportSplitRequest* msg);
};

const ::pdpb::RequestHeader&
ReportSplitRequest::HasBitSetters::header(const ReportSplitRequest* msg) {
  return *msg->header_;
}
const ::metapb::Region&
ReportSplitRequest::HasBitSetters::left(const ReportSplitRequest* msg) {
  return *msg->left_;
}
const ::metapb::Region&
ReportSplitRequest::HasBitSetters::right(const ReportSplitRequest* msg) {
  return *msg->right_;
}
void ReportSplitRequest::clear_left() {
  if (GetArenaNoVirtual() == NULL && left_ != NULL) {
    delete left_;
  }
  left_ = NULL;
}
void ReportSplitRequest::clear_right() {
  if (GetArenaNoVirtual() == NULL && right_ != NULL) {
    delete right_;
  }
  right_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportSplitRequest::kHeaderFieldNumber;
const int ReportSplitRequest::kLeftFieldNumber;
const int ReportSplitRequest::kRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportSplitRequest::ReportSplitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.ReportSplitRequest)
}
ReportSplitRequest::ReportSplitRequest(const ReportSplitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_left()) {
    left_ = new ::metapb::Region(*from.left_);
  } else {
    left_ = NULL;
  }
  if (from.has_right()) {
    right_ = new ::metapb::Region(*from.right_);
  } else {
    right_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.ReportSplitRequest)
}

void ReportSplitRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ReportSplitRequest_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&header_)) + sizeof(right_));
}

ReportSplitRequest::~ReportSplitRequest() {
  // @@protoc_insertion_point(destructor:pdpb.ReportSplitRequest)
  SharedDtor();
}

void ReportSplitRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
}

void ReportSplitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportSplitRequest& ReportSplitRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReportSplitRequest_pdpb_2eproto.base);
  return *internal_default_instance();
}


void ReportSplitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.ReportSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && left_ != NULL) {
    delete left_;
  }
  left_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_ != NULL) {
    delete right_;
  }
  right_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReportSplitRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReportSplitRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::RequestHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .metapb.Region left = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Region::_InternalParse;
        object = msg->mutable_left();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .metapb.Region right = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Region::_InternalParse;
        object = msg->mutable_right();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReportSplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.ReportSplitRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Region left = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Region right = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.ReportSplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.ReportSplitRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReportSplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.ReportSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .metapb.Region left = 2;
  if (this->has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::left(this), output);
  }

  // .metapb.Region right = 3;
  if (this->has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::right(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.ReportSplitRequest)
}

::google::protobuf::uint8* ReportSplitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.ReportSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // .metapb.Region left = 2;
  if (this->has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::left(this), deterministic, target);
  }

  // .metapb.Region right = 3;
  if (this->has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::right(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.ReportSplitRequest)
  return target;
}

size_t ReportSplitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.ReportSplitRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .metapb.Region left = 2;
  if (this->has_left()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .metapb.Region right = 3;
  if (this->has_right()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *right_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportSplitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.ReportSplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportSplitRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ReportSplitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.ReportSplitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.ReportSplitRequest)
    MergeFrom(*source);
  }
}

void ReportSplitRequest::MergeFrom(const ReportSplitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.ReportSplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_left()) {
    mutable_left()->::metapb::Region::MergeFrom(from.left());
  }
  if (from.has_right()) {
    mutable_right()->::metapb::Region::MergeFrom(from.right());
  }
}

void ReportSplitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.ReportSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSplitRequest::CopyFrom(const ReportSplitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.ReportSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSplitRequest::IsInitialized() const {
  return true;
}

void ReportSplitRequest::Swap(ReportSplitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportSplitRequest::InternalSwap(ReportSplitRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(left_, other->left_);
  swap(right_, other->right_);
}

::google::protobuf::Metadata ReportSplitRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReportSplitResponse::InitAsDefaultInstance() {
  ::pdpb::_ReportSplitResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}
class ReportSplitResponse::HasBitSetters {
 public:
  static const ::pdpb::ResponseHeader& header(const ReportSplitResponse* msg);
};

const ::pdpb::ResponseHeader&
ReportSplitResponse::HasBitSetters::header(const ReportSplitResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportSplitResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportSplitResponse::ReportSplitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.ReportSplitResponse)
}
ReportSplitResponse::ReportSplitResponse(const ReportSplitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.ReportSplitResponse)
}

void ReportSplitResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ReportSplitResponse_pdpb_2eproto.base);
  header_ = NULL;
}

ReportSplitResponse::~ReportSplitResponse() {
  // @@protoc_insertion_point(destructor:pdpb.ReportSplitResponse)
  SharedDtor();
}

void ReportSplitResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ReportSplitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportSplitResponse& ReportSplitResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReportSplitResponse_pdpb_2eproto.base);
  return *internal_default_instance();
}


void ReportSplitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.ReportSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReportSplitResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReportSplitResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReportSplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.ReportSplitResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.ReportSplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.ReportSplitResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReportSplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.ReportSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.ReportSplitResponse)
}

::google::protobuf::uint8* ReportSplitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.ReportSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.ReportSplitResponse)
  return target;
}

size_t ReportSplitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.ReportSplitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportSplitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.ReportSplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportSplitResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ReportSplitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.ReportSplitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.ReportSplitResponse)
    MergeFrom(*source);
  }
}

void ReportSplitResponse::MergeFrom(const ReportSplitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.ReportSplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
}

void ReportSplitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.ReportSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSplitResponse::CopyFrom(const ReportSplitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.ReportSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportSplitResponse::IsInitialized() const {
  return true;
}

void ReportSplitResponse::Swap(ReportSplitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportSplitResponse::InternalSwap(ReportSplitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::google::protobuf::Metadata ReportSplitResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AskBatchSplitRequest::InitAsDefaultInstance() {
  ::pdpb::_AskBatchSplitRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
  ::pdpb::_AskBatchSplitRequest_default_instance_._instance.get_mutable()->region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}
class AskBatchSplitRequest::HasBitSetters {
 public:
  static const ::pdpb::RequestHeader& header(const AskBatchSplitRequest* msg);
  static const ::metapb::Region& region(const AskBatchSplitRequest* msg);
};

const ::pdpb::RequestHeader&
AskBatchSplitRequest::HasBitSetters::header(const AskBatchSplitRequest* msg) {
  return *msg->header_;
}
const ::metapb::Region&
AskBatchSplitRequest::HasBitSetters::region(const AskBatchSplitRequest* msg) {
  return *msg->region_;
}
void AskBatchSplitRequest::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) {
    delete region_;
  }
  region_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AskBatchSplitRequest::kHeaderFieldNumber;
const int AskBatchSplitRequest::kRegionFieldNumber;
const int AskBatchSplitRequest::kSplitCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AskBatchSplitRequest::AskBatchSplitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.AskBatchSplitRequest)
}
AskBatchSplitRequest::AskBatchSplitRequest(const AskBatchSplitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_region()) {
    region_ = new ::metapb::Region(*from.region_);
  } else {
    region_ = NULL;
  }
  split_count_ = from.split_count_;
  // @@protoc_insertion_point(copy_constructor:pdpb.AskBatchSplitRequest)
}

void AskBatchSplitRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AskBatchSplitRequest_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&split_count_) -
      reinterpret_cast<char*>(&header_)) + sizeof(split_count_));
}

AskBatchSplitRequest::~AskBatchSplitRequest() {
  // @@protoc_insertion_point(destructor:pdpb.AskBatchSplitRequest)
  SharedDtor();
}

void AskBatchSplitRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete region_;
}

void AskBatchSplitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AskBatchSplitRequest& AskBatchSplitRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AskBatchSplitRequest_pdpb_2eproto.base);
  return *internal_default_instance();
}


void AskBatchSplitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.AskBatchSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && region_ != NULL) {
    delete region_;
  }
  region_ = NULL;
  split_count_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AskBatchSplitRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AskBatchSplitRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::RequestHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .metapb.Region region = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Region::_InternalParse;
        object = msg->mutable_region();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // uint32 split_count = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint32 value = val;
        msg->set_split_count(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AskBatchSplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.AskBatchSplitRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Region region = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 split_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &split_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.AskBatchSplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.AskBatchSplitRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AskBatchSplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.AskBatchSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .metapb.Region region = 2;
  if (this->has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::region(this), output);
  }

  // uint32 split_count = 3;
  if (this->split_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->split_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.AskBatchSplitRequest)
}

::google::protobuf::uint8* AskBatchSplitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.AskBatchSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // .metapb.Region region = 2;
  if (this->has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::region(this), deterministic, target);
  }

  // uint32 split_count = 3;
  if (this->split_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->split_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.AskBatchSplitRequest)
  return target;
}

size_t AskBatchSplitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.AskBatchSplitRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .metapb.Region region = 2;
  if (this->has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *region_);
  }

  // uint32 split_count = 3;
  if (this->split_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->split_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AskBatchSplitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.AskBatchSplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AskBatchSplitRequest* source =
      ::google::protobuf::DynamicCastToGenerated<AskBatchSplitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.AskBatchSplitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.AskBatchSplitRequest)
    MergeFrom(*source);
  }
}

void AskBatchSplitRequest::MergeFrom(const AskBatchSplitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.AskBatchSplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
  if (from.split_count() != 0) {
    set_split_count(from.split_count());
  }
}

void AskBatchSplitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.AskBatchSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskBatchSplitRequest::CopyFrom(const AskBatchSplitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.AskBatchSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskBatchSplitRequest::IsInitialized() const {
  return true;
}

void AskBatchSplitRequest::Swap(AskBatchSplitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AskBatchSplitRequest::InternalSwap(AskBatchSplitRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(region_, other->region_);
  swap(split_count_, other->split_count_);
}

::google::protobuf::Metadata AskBatchSplitRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SplitID::InitAsDefaultInstance() {
}
class SplitID::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitID::kNewRegionIdFieldNumber;
const int SplitID::kNewPeerIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitID::SplitID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.SplitID)
}
SplitID::SplitID(const SplitID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      new_peer_ids_(from.new_peer_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_region_id_ = from.new_region_id_;
  // @@protoc_insertion_point(copy_constructor:pdpb.SplitID)
}

void SplitID::SharedCtor() {
  new_region_id_ = GOOGLE_PROTOBUF_ULONGLONG(0);
}

SplitID::~SplitID() {
  // @@protoc_insertion_point(destructor:pdpb.SplitID)
  SharedDtor();
}

void SplitID::SharedDtor() {
}

void SplitID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SplitID& SplitID::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SplitID_pdpb_2eproto.base);
  return *internal_default_instance();
}


void SplitID::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.SplitID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_peer_ids_.Clear();
  new_region_id_ = GOOGLE_PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SplitID::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SplitID*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // uint64 new_region_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_new_region_id(value);
        break;
      }
      // repeated uint64 new_peer_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
          object = msg->mutable_new_peer_ids();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val;
          ptr = Varint::Parse64(ptr, &val);
          if (!ptr) goto error;
          ::google::protobuf::uint64 value = val;
          msg->add_new_peer_ids(value);
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SplitID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.SplitID)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 new_region_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 new_peer_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_new_peer_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_new_peer_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.SplitID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.SplitID)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SplitID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.SplitID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 new_region_id = 1;
  if (this->new_region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->new_region_id(), output);
  }

  // repeated uint64 new_peer_ids = 2;
  if (this->new_peer_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_new_peer_ids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->new_peer_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->new_peer_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.SplitID)
}

::google::protobuf::uint8* SplitID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.SplitID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 new_region_id = 1;
  if (this->new_region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->new_region_id(), target);
  }

  // repeated uint64 new_peer_ids = 2;
  if (this->new_peer_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _new_peer_ids_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->new_peer_ids_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.SplitID)
  return target;
}

size_t SplitID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.SplitID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 new_peer_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->new_peer_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _new_peer_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 new_region_id = 1;
  if (this->new_region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->new_region_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplitID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.SplitID)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitID* source =
      ::google::protobuf::DynamicCastToGenerated<SplitID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.SplitID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.SplitID)
    MergeFrom(*source);
  }
}

void SplitID::MergeFrom(const SplitID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.SplitID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  new_peer_ids_.MergeFrom(from.new_peer_ids_);
  if (from.new_region_id() != 0) {
    set_new_region_id(from.new_region_id());
  }
}

void SplitID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.SplitID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitID::CopyFrom(const SplitID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.SplitID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitID::IsInitialized() const {
  return true;
}

void SplitID::Swap(SplitID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitID::InternalSwap(SplitID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  new_peer_ids_.InternalSwap(&other->new_peer_ids_);
  swap(new_region_id_, other->new_region_id_);
}

::google::protobuf::Metadata SplitID::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AskBatchSplitResponse::InitAsDefaultInstance() {
  ::pdpb::_AskBatchSplitResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}
class AskBatchSplitResponse::HasBitSetters {
 public:
  static const ::pdpb::ResponseHeader& header(const AskBatchSplitResponse* msg);
};

const ::pdpb::ResponseHeader&
AskBatchSplitResponse::HasBitSetters::header(const AskBatchSplitResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AskBatchSplitResponse::kHeaderFieldNumber;
const int AskBatchSplitResponse::kIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AskBatchSplitResponse::AskBatchSplitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.AskBatchSplitResponse)
}
AskBatchSplitResponse::AskBatchSplitResponse(const AskBatchSplitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.AskBatchSplitResponse)
}

void AskBatchSplitResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AskBatchSplitResponse_pdpb_2eproto.base);
  header_ = NULL;
}

AskBatchSplitResponse::~AskBatchSplitResponse() {
  // @@protoc_insertion_point(destructor:pdpb.AskBatchSplitResponse)
  SharedDtor();
}

void AskBatchSplitResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AskBatchSplitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AskBatchSplitResponse& AskBatchSplitResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AskBatchSplitResponse_pdpb_2eproto.base);
  return *internal_default_instance();
}


void AskBatchSplitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.AskBatchSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AskBatchSplitResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AskBatchSplitResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // repeated .pdpb.SplitID ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::pdpb::SplitID::_InternalParse;
          object = msg->add_ids();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AskBatchSplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.AskBatchSplitResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pdpb.SplitID ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.AskBatchSplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.AskBatchSplitResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AskBatchSplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.AskBatchSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // repeated .pdpb.SplitID ids = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->ids(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.AskBatchSplitResponse)
}

::google::protobuf::uint8* AskBatchSplitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.AskBatchSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // repeated .pdpb.SplitID ids = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->ids(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.AskBatchSplitResponse)
  return target;
}

size_t AskBatchSplitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.AskBatchSplitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pdpb.SplitID ids = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ids(static_cast<int>(i)));
    }
  }

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AskBatchSplitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.AskBatchSplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AskBatchSplitResponse* source =
      ::google::protobuf::DynamicCastToGenerated<AskBatchSplitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.AskBatchSplitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.AskBatchSplitResponse)
    MergeFrom(*source);
  }
}

void AskBatchSplitResponse::MergeFrom(const AskBatchSplitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.AskBatchSplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AskBatchSplitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.AskBatchSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskBatchSplitResponse::CopyFrom(const AskBatchSplitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.AskBatchSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskBatchSplitResponse::IsInitialized() const {
  return true;
}

void AskBatchSplitResponse::Swap(AskBatchSplitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AskBatchSplitResponse::InternalSwap(AskBatchSplitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&ids_)->InternalSwap(CastToBase(&other->ids_));
  swap(header_, other->header_);
}

::google::protobuf::Metadata AskBatchSplitResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReportBatchSplitRequest::InitAsDefaultInstance() {
  ::pdpb::_ReportBatchSplitRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
}
class ReportBatchSplitRequest::HasBitSetters {
 public:
  static const ::pdpb::RequestHeader& header(const ReportBatchSplitRequest* msg);
};

const ::pdpb::RequestHeader&
ReportBatchSplitRequest::HasBitSetters::header(const ReportBatchSplitRequest* msg) {
  return *msg->header_;
}
void ReportBatchSplitRequest::clear_regions() {
  regions_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportBatchSplitRequest::kHeaderFieldNumber;
const int ReportBatchSplitRequest::kRegionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportBatchSplitRequest::ReportBatchSplitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.ReportBatchSplitRequest)
}
ReportBatchSplitRequest::ReportBatchSplitRequest(const ReportBatchSplitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      regions_(from.regions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.ReportBatchSplitRequest)
}

void ReportBatchSplitRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ReportBatchSplitRequest_pdpb_2eproto.base);
  header_ = NULL;
}

ReportBatchSplitRequest::~ReportBatchSplitRequest() {
  // @@protoc_insertion_point(destructor:pdpb.ReportBatchSplitRequest)
  SharedDtor();
}

void ReportBatchSplitRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ReportBatchSplitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportBatchSplitRequest& ReportBatchSplitRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReportBatchSplitRequest_pdpb_2eproto.base);
  return *internal_default_instance();
}


void ReportBatchSplitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.ReportBatchSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  regions_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReportBatchSplitRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReportBatchSplitRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::RequestHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // repeated .metapb.Region regions = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::metapb::Region::_InternalParse;
          object = msg->add_regions();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReportBatchSplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.ReportBatchSplitRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metapb.Region regions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_regions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.ReportBatchSplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.ReportBatchSplitRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReportBatchSplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.ReportBatchSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // repeated .metapb.Region regions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->regions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->regions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.ReportBatchSplitRequest)
}

::google::protobuf::uint8* ReportBatchSplitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.ReportBatchSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // repeated .metapb.Region regions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->regions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->regions(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.ReportBatchSplitRequest)
  return target;
}

size_t ReportBatchSplitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.ReportBatchSplitRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metapb.Region regions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->regions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->regions(static_cast<int>(i)));
    }
  }

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportBatchSplitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.ReportBatchSplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportBatchSplitRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ReportBatchSplitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.ReportBatchSplitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.ReportBatchSplitRequest)
    MergeFrom(*source);
  }
}

void ReportBatchSplitRequest::MergeFrom(const ReportBatchSplitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.ReportBatchSplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  regions_.MergeFrom(from.regions_);
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
}

void ReportBatchSplitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.ReportBatchSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportBatchSplitRequest::CopyFrom(const ReportBatchSplitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.ReportBatchSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportBatchSplitRequest::IsInitialized() const {
  return true;
}

void ReportBatchSplitRequest::Swap(ReportBatchSplitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportBatchSplitRequest::InternalSwap(ReportBatchSplitRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&regions_)->InternalSwap(CastToBase(&other->regions_));
  swap(header_, other->header_);
}

::google::protobuf::Metadata ReportBatchSplitRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReportBatchSplitResponse::InitAsDefaultInstance() {
  ::pdpb::_ReportBatchSplitResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}
class ReportBatchSplitResponse::HasBitSetters {
 public:
  static const ::pdpb::ResponseHeader& header(const ReportBatchSplitResponse* msg);
};

const ::pdpb::ResponseHeader&
ReportBatchSplitResponse::HasBitSetters::header(const ReportBatchSplitResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportBatchSplitResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportBatchSplitResponse::ReportBatchSplitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.ReportBatchSplitResponse)
}
ReportBatchSplitResponse::ReportBatchSplitResponse(const ReportBatchSplitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.ReportBatchSplitResponse)
}

void ReportBatchSplitResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ReportBatchSplitResponse_pdpb_2eproto.base);
  header_ = NULL;
}

ReportBatchSplitResponse::~ReportBatchSplitResponse() {
  // @@protoc_insertion_point(destructor:pdpb.ReportBatchSplitResponse)
  SharedDtor();
}

void ReportBatchSplitResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ReportBatchSplitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportBatchSplitResponse& ReportBatchSplitResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReportBatchSplitResponse_pdpb_2eproto.base);
  return *internal_default_instance();
}


void ReportBatchSplitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.ReportBatchSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReportBatchSplitResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReportBatchSplitResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReportBatchSplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.ReportBatchSplitResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.ReportBatchSplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.ReportBatchSplitResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReportBatchSplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.ReportBatchSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.ReportBatchSplitResponse)
}

::google::protobuf::uint8* ReportBatchSplitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.ReportBatchSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.ReportBatchSplitResponse)
  return target;
}

size_t ReportBatchSplitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.ReportBatchSplitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportBatchSplitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.ReportBatchSplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportBatchSplitResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ReportBatchSplitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.ReportBatchSplitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.ReportBatchSplitResponse)
    MergeFrom(*source);
  }
}

void ReportBatchSplitResponse::MergeFrom(const ReportBatchSplitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.ReportBatchSplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
}

void ReportBatchSplitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.ReportBatchSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportBatchSplitResponse::CopyFrom(const ReportBatchSplitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.ReportBatchSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportBatchSplitResponse::IsInitialized() const {
  return true;
}

void ReportBatchSplitResponse::Swap(ReportBatchSplitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportBatchSplitResponse::InternalSwap(ReportBatchSplitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::google::protobuf::Metadata ReportBatchSplitResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TimeInterval::InitAsDefaultInstance() {
}
class TimeInterval::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeInterval::kStartTimestampFieldNumber;
const int TimeInterval::kEndTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeInterval::TimeInterval()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.TimeInterval)
}
TimeInterval::TimeInterval(const TimeInterval& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_timestamp_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(end_timestamp_));
  // @@protoc_insertion_point(copy_constructor:pdpb.TimeInterval)
}

void TimeInterval::SharedCtor() {
  ::memset(&start_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_timestamp_) -
      reinterpret_cast<char*>(&start_timestamp_)) + sizeof(end_timestamp_));
}

TimeInterval::~TimeInterval() {
  // @@protoc_insertion_point(destructor:pdpb.TimeInterval)
  SharedDtor();
}

void TimeInterval::SharedDtor() {
}

void TimeInterval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeInterval& TimeInterval::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TimeInterval_pdpb_2eproto.base);
  return *internal_default_instance();
}


void TimeInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.TimeInterval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_timestamp_) -
      reinterpret_cast<char*>(&start_timestamp_)) + sizeof(end_timestamp_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TimeInterval::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TimeInterval*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // uint64 start_timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_start_timestamp(value);
        break;
      }
      // uint64 end_timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_end_timestamp(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TimeInterval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.TimeInterval)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 start_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 end_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.TimeInterval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.TimeInterval)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TimeInterval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.TimeInterval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_timestamp = 1;
  if (this->start_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_timestamp(), output);
  }

  // uint64 end_timestamp = 2;
  if (this->end_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.TimeInterval)
}

::google::protobuf::uint8* TimeInterval::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.TimeInterval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_timestamp = 1;
  if (this->start_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_timestamp(), target);
  }

  // uint64 end_timestamp = 2;
  if (this->end_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.TimeInterval)
  return target;
}

size_t TimeInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.TimeInterval)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 start_timestamp = 1;
  if (this->start_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_timestamp());
  }

  // uint64 end_timestamp = 2;
  if (this->end_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeInterval::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.TimeInterval)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeInterval* source =
      ::google::protobuf::DynamicCastToGenerated<TimeInterval>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.TimeInterval)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.TimeInterval)
    MergeFrom(*source);
  }
}

void TimeInterval::MergeFrom(const TimeInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.TimeInterval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_timestamp() != 0) {
    set_start_timestamp(from.start_timestamp());
  }
  if (from.end_timestamp() != 0) {
    set_end_timestamp(from.end_timestamp());
  }
}

void TimeInterval::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.TimeInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeInterval::CopyFrom(const TimeInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.TimeInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeInterval::IsInitialized() const {
  return true;
}

void TimeInterval::Swap(TimeInterval* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeInterval::InternalSwap(TimeInterval* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_timestamp_, other->start_timestamp_);
  swap(end_timestamp_, other->end_timestamp_);
}

::google::protobuf::Metadata TimeInterval::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StoreStats::InitAsDefaultInstance() {
  ::pdpb::_StoreStats_default_instance_._instance.get_mutable()->interval_ = const_cast< ::pdpb::TimeInterval*>(
      ::pdpb::TimeInterval::internal_default_instance());
}
class StoreStats::HasBitSetters {
 public:
  static const ::pdpb::TimeInterval& interval(const StoreStats* msg);
};

const ::pdpb::TimeInterval&
StoreStats::HasBitSetters::interval(const StoreStats* msg) {
  return *msg->interval_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreStats::kStoreIdFieldNumber;
const int StoreStats::kCapacityFieldNumber;
const int StoreStats::kAvailableFieldNumber;
const int StoreStats::kRegionCountFieldNumber;
const int StoreStats::kSendingSnapCountFieldNumber;
const int StoreStats::kReceivingSnapCountFieldNumber;
const int StoreStats::kStartTimeFieldNumber;
const int StoreStats::kApplyingSnapCountFieldNumber;
const int StoreStats::kIsBusyFieldNumber;
const int StoreStats::kUsedSizeFieldNumber;
const int StoreStats::kBytesWrittenFieldNumber;
const int StoreStats::kKeysWrittenFieldNumber;
const int StoreStats::kBytesReadFieldNumber;
const int StoreStats::kKeysReadFieldNumber;
const int StoreStats::kIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreStats::StoreStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.StoreStats)
}
StoreStats::StoreStats(const StoreStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_interval()) {
    interval_ = new ::pdpb::TimeInterval(*from.interval_);
  } else {
    interval_ = NULL;
  }
  ::memcpy(&store_id_, &from.store_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&keys_read_) -
    reinterpret_cast<char*>(&store_id_)) + sizeof(keys_read_));
  // @@protoc_insertion_point(copy_constructor:pdpb.StoreStats)
}

void StoreStats::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StoreStats_pdpb_2eproto.base);
  ::memset(&interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keys_read_) -
      reinterpret_cast<char*>(&interval_)) + sizeof(keys_read_));
}

StoreStats::~StoreStats() {
  // @@protoc_insertion_point(destructor:pdpb.StoreStats)
  SharedDtor();
}

void StoreStats::SharedDtor() {
  if (this != internal_default_instance()) delete interval_;
}

void StoreStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreStats& StoreStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StoreStats_pdpb_2eproto.base);
  return *internal_default_instance();
}


void StoreStats::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.StoreStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && interval_ != NULL) {
    delete interval_;
  }
  interval_ = NULL;
  ::memset(&store_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keys_read_) -
      reinterpret_cast<char*>(&store_id_)) + sizeof(keys_read_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoreStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StoreStats*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // uint64 store_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_store_id(value);
        break;
      }
      // uint64 capacity = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_capacity(value);
        break;
      }
      // uint64 available = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_available(value);
        break;
      }
      // uint32 region_count = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint32 value = val;
        msg->set_region_count(value);
        break;
      }
      // uint32 sending_snap_count = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint32 value = val;
        msg->set_sending_snap_count(value);
        break;
      }
      // uint32 receiving_snap_count = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint32 value = val;
        msg->set_receiving_snap_count(value);
        break;
      }
      // uint32 start_time = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint32 value = val;
        msg->set_start_time(value);
        break;
      }
      // uint32 applying_snap_count = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint32 value = val;
        msg->set_applying_snap_count(value);
        break;
      }
      // bool is_busy = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_is_busy(value);
        break;
      }
      // uint64 used_size = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_used_size(value);
        break;
      }
      // uint64 bytes_written = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_bytes_written(value);
        break;
      }
      // uint64 keys_written = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_keys_written(value);
        break;
      }
      // uint64 bytes_read = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_bytes_read(value);
        break;
      }
      // uint64 keys_read = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_keys_read(value);
        break;
      }
      // .pdpb.TimeInterval interval = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::TimeInterval::_InternalParse;
        object = msg->mutable_interval();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoreStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.StoreStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 store_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &store_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 capacity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 available = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 region_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sending_snap_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sending_snap_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 receiving_snap_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiving_snap_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 start_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 applying_snap_count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applying_snap_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_busy = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_busy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 used_size = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &used_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bytes_written = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_written_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 keys_written = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keys_written_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bytes_read = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 keys_read = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keys_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pdpb.TimeInterval interval = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.StoreStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.StoreStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoreStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.StoreStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 store_id = 1;
  if (this->store_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->store_id(), output);
  }

  // uint64 capacity = 2;
  if (this->capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->capacity(), output);
  }

  // uint64 available = 3;
  if (this->available() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->available(), output);
  }

  // uint32 region_count = 4;
  if (this->region_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->region_count(), output);
  }

  // uint32 sending_snap_count = 5;
  if (this->sending_snap_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sending_snap_count(), output);
  }

  // uint32 receiving_snap_count = 6;
  if (this->receiving_snap_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->receiving_snap_count(), output);
  }

  // uint32 start_time = 7;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->start_time(), output);
  }

  // uint32 applying_snap_count = 8;
  if (this->applying_snap_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->applying_snap_count(), output);
  }

  // bool is_busy = 9;
  if (this->is_busy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_busy(), output);
  }

  // uint64 used_size = 10;
  if (this->used_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->used_size(), output);
  }

  // uint64 bytes_written = 11;
  if (this->bytes_written() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->bytes_written(), output);
  }

  // uint64 keys_written = 12;
  if (this->keys_written() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->keys_written(), output);
  }

  // uint64 bytes_read = 13;
  if (this->bytes_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->bytes_read(), output);
  }

  // uint64 keys_read = 14;
  if (this->keys_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->keys_read(), output);
  }

  // .pdpb.TimeInterval interval = 15;
  if (this->has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::interval(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.StoreStats)
}

::google::protobuf::uint8* StoreStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.StoreStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 store_id = 1;
  if (this->store_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->store_id(), target);
  }

  // uint64 capacity = 2;
  if (this->capacity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->capacity(), target);
  }

  // uint64 available = 3;
  if (this->available() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->available(), target);
  }

  // uint32 region_count = 4;
  if (this->region_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->region_count(), target);
  }

  // uint32 sending_snap_count = 5;
  if (this->sending_snap_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sending_snap_count(), target);
  }

  // uint32 receiving_snap_count = 6;
  if (this->receiving_snap_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->receiving_snap_count(), target);
  }

  // uint32 start_time = 7;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->start_time(), target);
  }

  // uint32 applying_snap_count = 8;
  if (this->applying_snap_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->applying_snap_count(), target);
  }

  // bool is_busy = 9;
  if (this->is_busy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_busy(), target);
  }

  // uint64 used_size = 10;
  if (this->used_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->used_size(), target);
  }

  // uint64 bytes_written = 11;
  if (this->bytes_written() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->bytes_written(), target);
  }

  // uint64 keys_written = 12;
  if (this->keys_written() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->keys_written(), target);
  }

  // uint64 bytes_read = 13;
  if (this->bytes_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->bytes_read(), target);
  }

  // uint64 keys_read = 14;
  if (this->keys_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->keys_read(), target);
  }

  // .pdpb.TimeInterval interval = 15;
  if (this->has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::interval(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.StoreStats)
  return target;
}

size_t StoreStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.StoreStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.TimeInterval interval = 15;
  if (this->has_interval()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *interval_);
  }

  // uint64 store_id = 1;
  if (this->store_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->store_id());
  }

  // uint64 capacity = 2;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->capacity());
  }

  // uint64 available = 3;
  if (this->available() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->available());
  }

  // uint32 region_count = 4;
  if (this->region_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->region_count());
  }

  // uint32 sending_snap_count = 5;
  if (this->sending_snap_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sending_snap_count());
  }

  // uint32 receiving_snap_count = 6;
  if (this->receiving_snap_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->receiving_snap_count());
  }

  // uint32 start_time = 7;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start_time());
  }

  // uint32 applying_snap_count = 8;
  if (this->applying_snap_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->applying_snap_count());
  }

  // bool is_busy = 9;
  if (this->is_busy() != 0) {
    total_size += 1 + 1;
  }

  // uint64 used_size = 10;
  if (this->used_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->used_size());
  }

  // uint64 bytes_written = 11;
  if (this->bytes_written() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes_written());
  }

  // uint64 keys_written = 12;
  if (this->keys_written() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->keys_written());
  }

  // uint64 bytes_read = 13;
  if (this->bytes_read() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes_read());
  }

  // uint64 keys_read = 14;
  if (this->keys_read() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->keys_read());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.StoreStats)
  GOOGLE_DCHECK_NE(&from, this);
  const StoreStats* source =
      ::google::protobuf::DynamicCastToGenerated<StoreStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.StoreStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.StoreStats)
    MergeFrom(*source);
  }
}

void StoreStats::MergeFrom(const StoreStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.StoreStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_interval()) {
    mutable_interval()->::pdpb::TimeInterval::MergeFrom(from.interval());
  }
  if (from.store_id() != 0) {
    set_store_id(from.store_id());
  }
  if (from.capacity() != 0) {
    set_capacity(from.capacity());
  }
  if (from.available() != 0) {
    set_available(from.available());
  }
  if (from.region_count() != 0) {
    set_region_count(from.region_count());
  }
  if (from.sending_snap_count() != 0) {
    set_sending_snap_count(from.sending_snap_count());
  }
  if (from.receiving_snap_count() != 0) {
    set_receiving_snap_count(from.receiving_snap_count());
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.applying_snap_count() != 0) {
    set_applying_snap_count(from.applying_snap_count());
  }
  if (from.is_busy() != 0) {
    set_is_busy(from.is_busy());
  }
  if (from.used_size() != 0) {
    set_used_size(from.used_size());
  }
  if (from.bytes_written() != 0) {
    set_bytes_written(from.bytes_written());
  }
  if (from.keys_written() != 0) {
    set_keys_written(from.keys_written());
  }
  if (from.bytes_read() != 0) {
    set_bytes_read(from.bytes_read());
  }
  if (from.keys_read() != 0) {
    set_keys_read(from.keys_read());
  }
}

void StoreStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.StoreStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreStats::CopyFrom(const StoreStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.StoreStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreStats::IsInitialized() const {
  return true;
}

void StoreStats::Swap(StoreStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreStats::InternalSwap(StoreStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(interval_, other->interval_);
  swap(store_id_, other->store_id_);
  swap(capacity_, other->capacity_);
  swap(available_, other->available_);
  swap(region_count_, other->region_count_);
  swap(sending_snap_count_, other->sending_snap_count_);
  swap(receiving_snap_count_, other->receiving_snap_count_);
  swap(start_time_, other->start_time_);
  swap(applying_snap_count_, other->applying_snap_count_);
  swap(is_busy_, other->is_busy_);
  swap(used_size_, other->used_size_);
  swap(bytes_written_, other->bytes_written_);
  swap(keys_written_, other->keys_written_);
  swap(bytes_read_, other->bytes_read_);
  swap(keys_read_, other->keys_read_);
}

::google::protobuf::Metadata StoreStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StoreHeartbeatRequest::InitAsDefaultInstance() {
  ::pdpb::_StoreHeartbeatRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
  ::pdpb::_StoreHeartbeatRequest_default_instance_._instance.get_mutable()->stats_ = const_cast< ::pdpb::StoreStats*>(
      ::pdpb::StoreStats::internal_default_instance());
}
class StoreHeartbeatRequest::HasBitSetters {
 public:
  static const ::pdpb::RequestHeader& header(const StoreHeartbeatRequest* msg);
  static const ::pdpb::StoreStats& stats(const StoreHeartbeatRequest* msg);
};

const ::pdpb::RequestHeader&
StoreHeartbeatRequest::HasBitSetters::header(const StoreHeartbeatRequest* msg) {
  return *msg->header_;
}
const ::pdpb::StoreStats&
StoreHeartbeatRequest::HasBitSetters::stats(const StoreHeartbeatRequest* msg) {
  return *msg->stats_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreHeartbeatRequest::kHeaderFieldNumber;
const int StoreHeartbeatRequest::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreHeartbeatRequest::StoreHeartbeatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.StoreHeartbeatRequest)
}
StoreHeartbeatRequest::StoreHeartbeatRequest(const StoreHeartbeatRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_stats()) {
    stats_ = new ::pdpb::StoreStats(*from.stats_);
  } else {
    stats_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.StoreHeartbeatRequest)
}

void StoreHeartbeatRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StoreHeartbeatRequest_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stats_) -
      reinterpret_cast<char*>(&header_)) + sizeof(stats_));
}

StoreHeartbeatRequest::~StoreHeartbeatRequest() {
  // @@protoc_insertion_point(destructor:pdpb.StoreHeartbeatRequest)
  SharedDtor();
}

void StoreHeartbeatRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete stats_;
}

void StoreHeartbeatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreHeartbeatRequest& StoreHeartbeatRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StoreHeartbeatRequest_pdpb_2eproto.base);
  return *internal_default_instance();
}


void StoreHeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.StoreHeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) {
    delete stats_;
  }
  stats_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoreHeartbeatRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StoreHeartbeatRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::RequestHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .pdpb.StoreStats stats = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::StoreStats::_InternalParse;
        object = msg->mutable_stats();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoreHeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.StoreHeartbeatRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pdpb.StoreStats stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.StoreHeartbeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.StoreHeartbeatRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoreHeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.StoreHeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .pdpb.StoreStats stats = 2;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::stats(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.StoreHeartbeatRequest)
}

::google::protobuf::uint8* StoreHeartbeatRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.StoreHeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // .pdpb.StoreStats stats = 2;
  if (this->has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::stats(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.StoreHeartbeatRequest)
  return target;
}

size_t StoreHeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.StoreHeartbeatRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .pdpb.StoreStats stats = 2;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stats_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreHeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.StoreHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StoreHeartbeatRequest* source =
      ::google::protobuf::DynamicCastToGenerated<StoreHeartbeatRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.StoreHeartbeatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.StoreHeartbeatRequest)
    MergeFrom(*source);
  }
}

void StoreHeartbeatRequest::MergeFrom(const StoreHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.StoreHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_stats()) {
    mutable_stats()->::pdpb::StoreStats::MergeFrom(from.stats());
  }
}

void StoreHeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.StoreHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreHeartbeatRequest::CopyFrom(const StoreHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.StoreHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreHeartbeatRequest::IsInitialized() const {
  return true;
}

void StoreHeartbeatRequest::Swap(StoreHeartbeatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreHeartbeatRequest::InternalSwap(StoreHeartbeatRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(stats_, other->stats_);
}

::google::protobuf::Metadata StoreHeartbeatRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StoreHeartbeatResponse::InitAsDefaultInstance() {
  ::pdpb::_StoreHeartbeatResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}
class StoreHeartbeatResponse::HasBitSetters {
 public:
  static const ::pdpb::ResponseHeader& header(const StoreHeartbeatResponse* msg);
};

const ::pdpb::ResponseHeader&
StoreHeartbeatResponse::HasBitSetters::header(const StoreHeartbeatResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreHeartbeatResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreHeartbeatResponse::StoreHeartbeatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.StoreHeartbeatResponse)
}
StoreHeartbeatResponse::StoreHeartbeatResponse(const StoreHeartbeatResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.StoreHeartbeatResponse)
}

void StoreHeartbeatResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StoreHeartbeatResponse_pdpb_2eproto.base);
  header_ = NULL;
}

StoreHeartbeatResponse::~StoreHeartbeatResponse() {
  // @@protoc_insertion_point(destructor:pdpb.StoreHeartbeatResponse)
  SharedDtor();
}

void StoreHeartbeatResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void StoreHeartbeatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreHeartbeatResponse& StoreHeartbeatResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StoreHeartbeatResponse_pdpb_2eproto.base);
  return *internal_default_instance();
}


void StoreHeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.StoreHeartbeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoreHeartbeatResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StoreHeartbeatResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoreHeartbeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.StoreHeartbeatResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.StoreHeartbeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.StoreHeartbeatResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoreHeartbeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.StoreHeartbeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.StoreHeartbeatResponse)
}

::google::protobuf::uint8* StoreHeartbeatResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.StoreHeartbeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.StoreHeartbeatResponse)
  return target;
}

size_t StoreHeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.StoreHeartbeatResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreHeartbeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.StoreHeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StoreHeartbeatResponse* source =
      ::google::protobuf::DynamicCastToGenerated<StoreHeartbeatResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.StoreHeartbeatResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.StoreHeartbeatResponse)
    MergeFrom(*source);
  }
}

void StoreHeartbeatResponse::MergeFrom(const StoreHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.StoreHeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
}

void StoreHeartbeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.StoreHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreHeartbeatResponse::CopyFrom(const StoreHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.StoreHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreHeartbeatResponse::IsInitialized() const {
  return true;
}

void StoreHeartbeatResponse::Swap(StoreHeartbeatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreHeartbeatResponse::InternalSwap(StoreHeartbeatResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::google::protobuf::Metadata StoreHeartbeatResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ScatterRegionRequest::InitAsDefaultInstance() {
  ::pdpb::_ScatterRegionRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
  ::pdpb::_ScatterRegionRequest_default_instance_._instance.get_mutable()->region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
  ::pdpb::_ScatterRegionRequest_default_instance_._instance.get_mutable()->leader_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}
class ScatterRegionRequest::HasBitSetters {
 public:
  static const ::pdpb::RequestHeader& header(const ScatterRegionRequest* msg);
  static const ::metapb::Region& region(const ScatterRegionRequest* msg);
  static const ::metapb::Peer& leader(const ScatterRegionRequest* msg);
};

const ::pdpb::RequestHeader&
ScatterRegionRequest::HasBitSetters::header(const ScatterRegionRequest* msg) {
  return *msg->header_;
}
const ::metapb::Region&
ScatterRegionRequest::HasBitSetters::region(const ScatterRegionRequest* msg) {
  return *msg->region_;
}
const ::metapb::Peer&
ScatterRegionRequest::HasBitSetters::leader(const ScatterRegionRequest* msg) {
  return *msg->leader_;
}
void ScatterRegionRequest::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) {
    delete region_;
  }
  region_ = NULL;
}
void ScatterRegionRequest::clear_leader() {
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) {
    delete leader_;
  }
  leader_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScatterRegionRequest::kHeaderFieldNumber;
const int ScatterRegionRequest::kRegionIdFieldNumber;
const int ScatterRegionRequest::kRegionFieldNumber;
const int ScatterRegionRequest::kLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScatterRegionRequest::ScatterRegionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.ScatterRegionRequest)
}
ScatterRegionRequest::ScatterRegionRequest(const ScatterRegionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_region()) {
    region_ = new ::metapb::Region(*from.region_);
  } else {
    region_ = NULL;
  }
  if (from.has_leader()) {
    leader_ = new ::metapb::Peer(*from.leader_);
  } else {
    leader_ = NULL;
  }
  region_id_ = from.region_id_;
  // @@protoc_insertion_point(copy_constructor:pdpb.ScatterRegionRequest)
}

void ScatterRegionRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ScatterRegionRequest_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(region_id_));
}

ScatterRegionRequest::~ScatterRegionRequest() {
  // @@protoc_insertion_point(destructor:pdpb.ScatterRegionRequest)
  SharedDtor();
}

void ScatterRegionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete region_;
  if (this != internal_default_instance()) delete leader_;
}

void ScatterRegionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScatterRegionRequest& ScatterRegionRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ScatterRegionRequest_pdpb_2eproto.base);
  return *internal_default_instance();
}


void ScatterRegionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.ScatterRegionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && region_ != NULL) {
    delete region_;
  }
  region_ = NULL;
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) {
    delete leader_;
  }
  leader_ = NULL;
  region_id_ = GOOGLE_PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScatterRegionRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ScatterRegionRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::RequestHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // uint64 region_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_region_id(value);
        break;
      }
      // .metapb.Region region = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Region::_InternalParse;
        object = msg->mutable_region();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .metapb.Peer leader = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Peer::_InternalParse;
        object = msg->mutable_leader();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScatterRegionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.ScatterRegionRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 region_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Region region = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Peer leader = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.ScatterRegionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.ScatterRegionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScatterRegionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.ScatterRegionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // uint64 region_id = 2;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->region_id(), output);
  }

  // .metapb.Region region = 3;
  if (this->has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::region(this), output);
  }

  // .metapb.Peer leader = 4;
  if (this->has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::leader(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.ScatterRegionRequest)
}

::google::protobuf::uint8* ScatterRegionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.ScatterRegionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // uint64 region_id = 2;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->region_id(), target);
  }

  // .metapb.Region region = 3;
  if (this->has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::region(this), deterministic, target);
  }

  // .metapb.Peer leader = 4;
  if (this->has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::leader(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.ScatterRegionRequest)
  return target;
}

size_t ScatterRegionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.ScatterRegionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .metapb.Region region = 3;
  if (this->has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *region_);
  }

  // .metapb.Peer leader = 4;
  if (this->has_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *leader_);
  }

  // uint64 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->region_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScatterRegionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.ScatterRegionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ScatterRegionRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ScatterRegionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.ScatterRegionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.ScatterRegionRequest)
    MergeFrom(*source);
  }
}

void ScatterRegionRequest::MergeFrom(const ScatterRegionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.ScatterRegionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
  if (from.has_leader()) {
    mutable_leader()->::metapb::Peer::MergeFrom(from.leader());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
}

void ScatterRegionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.ScatterRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScatterRegionRequest::CopyFrom(const ScatterRegionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.ScatterRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScatterRegionRequest::IsInitialized() const {
  return true;
}

void ScatterRegionRequest::Swap(ScatterRegionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScatterRegionRequest::InternalSwap(ScatterRegionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(region_, other->region_);
  swap(leader_, other->leader_);
  swap(region_id_, other->region_id_);
}

::google::protobuf::Metadata ScatterRegionRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ScatterRegionResponse::InitAsDefaultInstance() {
  ::pdpb::_ScatterRegionResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}
class ScatterRegionResponse::HasBitSetters {
 public:
  static const ::pdpb::ResponseHeader& header(const ScatterRegionResponse* msg);
};

const ::pdpb::ResponseHeader&
ScatterRegionResponse::HasBitSetters::header(const ScatterRegionResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScatterRegionResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScatterRegionResponse::ScatterRegionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.ScatterRegionResponse)
}
ScatterRegionResponse::ScatterRegionResponse(const ScatterRegionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.ScatterRegionResponse)
}

void ScatterRegionResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ScatterRegionResponse_pdpb_2eproto.base);
  header_ = NULL;
}

ScatterRegionResponse::~ScatterRegionResponse() {
  // @@protoc_insertion_point(destructor:pdpb.ScatterRegionResponse)
  SharedDtor();
}

void ScatterRegionResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void ScatterRegionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScatterRegionResponse& ScatterRegionResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ScatterRegionResponse_pdpb_2eproto.base);
  return *internal_default_instance();
}


void ScatterRegionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.ScatterRegionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScatterRegionResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ScatterRegionResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScatterRegionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.ScatterRegionResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.ScatterRegionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.ScatterRegionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScatterRegionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.ScatterRegionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.ScatterRegionResponse)
}

::google::protobuf::uint8* ScatterRegionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.ScatterRegionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.ScatterRegionResponse)
  return target;
}

size_t ScatterRegionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.ScatterRegionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScatterRegionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.ScatterRegionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ScatterRegionResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ScatterRegionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.ScatterRegionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.ScatterRegionResponse)
    MergeFrom(*source);
  }
}

void ScatterRegionResponse::MergeFrom(const ScatterRegionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.ScatterRegionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
}

void ScatterRegionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.ScatterRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScatterRegionResponse::CopyFrom(const ScatterRegionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.ScatterRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScatterRegionResponse::IsInitialized() const {
  return true;
}

void ScatterRegionResponse::Swap(ScatterRegionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScatterRegionResponse::InternalSwap(ScatterRegionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::google::protobuf::Metadata ScatterRegionResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetGCSafePointRequest::InitAsDefaultInstance() {
  ::pdpb::_GetGCSafePointRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
}
class GetGCSafePointRequest::HasBitSetters {
 public:
  static const ::pdpb::RequestHeader& header(const GetGCSafePointRequest* msg);
};

const ::pdpb::RequestHeader&
GetGCSafePointRequest::HasBitSetters::header(const GetGCSafePointRequest* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetGCSafePointRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetGCSafePointRequest::GetGCSafePointRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetGCSafePointRequest)
}
GetGCSafePointRequest::GetGCSafePointRequest(const GetGCSafePointRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.GetGCSafePointRequest)
}

void GetGCSafePointRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetGCSafePointRequest_pdpb_2eproto.base);
  header_ = NULL;
}

GetGCSafePointRequest::~GetGCSafePointRequest() {
  // @@protoc_insertion_point(destructor:pdpb.GetGCSafePointRequest)
  SharedDtor();
}

void GetGCSafePointRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetGCSafePointRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetGCSafePointRequest& GetGCSafePointRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetGCSafePointRequest_pdpb_2eproto.base);
  return *internal_default_instance();
}


void GetGCSafePointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetGCSafePointRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetGCSafePointRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetGCSafePointRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::RequestHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetGCSafePointRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetGCSafePointRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetGCSafePointRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetGCSafePointRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetGCSafePointRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetGCSafePointRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.GetGCSafePointRequest)
}

::google::protobuf::uint8* GetGCSafePointRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetGCSafePointRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetGCSafePointRequest)
  return target;
}

size_t GetGCSafePointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetGCSafePointRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGCSafePointRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetGCSafePointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGCSafePointRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetGCSafePointRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetGCSafePointRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetGCSafePointRequest)
    MergeFrom(*source);
  }
}

void GetGCSafePointRequest::MergeFrom(const GetGCSafePointRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetGCSafePointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
}

void GetGCSafePointRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetGCSafePointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGCSafePointRequest::CopyFrom(const GetGCSafePointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetGCSafePointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGCSafePointRequest::IsInitialized() const {
  return true;
}

void GetGCSafePointRequest::Swap(GetGCSafePointRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetGCSafePointRequest::InternalSwap(GetGCSafePointRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::google::protobuf::Metadata GetGCSafePointRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetGCSafePointResponse::InitAsDefaultInstance() {
  ::pdpb::_GetGCSafePointResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}
class GetGCSafePointResponse::HasBitSetters {
 public:
  static const ::pdpb::ResponseHeader& header(const GetGCSafePointResponse* msg);
};

const ::pdpb::ResponseHeader&
GetGCSafePointResponse::HasBitSetters::header(const GetGCSafePointResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetGCSafePointResponse::kHeaderFieldNumber;
const int GetGCSafePointResponse::kSafePointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetGCSafePointResponse::GetGCSafePointResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetGCSafePointResponse)
}
GetGCSafePointResponse::GetGCSafePointResponse(const GetGCSafePointResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  safe_point_ = from.safe_point_;
  // @@protoc_insertion_point(copy_constructor:pdpb.GetGCSafePointResponse)
}

void GetGCSafePointResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetGCSafePointResponse_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safe_point_) -
      reinterpret_cast<char*>(&header_)) + sizeof(safe_point_));
}

GetGCSafePointResponse::~GetGCSafePointResponse() {
  // @@protoc_insertion_point(destructor:pdpb.GetGCSafePointResponse)
  SharedDtor();
}

void GetGCSafePointResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GetGCSafePointResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetGCSafePointResponse& GetGCSafePointResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetGCSafePointResponse_pdpb_2eproto.base);
  return *internal_default_instance();
}


void GetGCSafePointResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetGCSafePointResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  safe_point_ = GOOGLE_PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetGCSafePointResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetGCSafePointResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // uint64 safe_point = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_safe_point(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetGCSafePointResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetGCSafePointResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 safe_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &safe_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetGCSafePointResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetGCSafePointResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetGCSafePointResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetGCSafePointResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // uint64 safe_point = 2;
  if (this->safe_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->safe_point(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.GetGCSafePointResponse)
}

::google::protobuf::uint8* GetGCSafePointResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetGCSafePointResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // uint64 safe_point = 2;
  if (this->safe_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->safe_point(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetGCSafePointResponse)
  return target;
}

size_t GetGCSafePointResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetGCSafePointResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 safe_point = 2;
  if (this->safe_point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->safe_point());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetGCSafePointResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetGCSafePointResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGCSafePointResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetGCSafePointResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetGCSafePointResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetGCSafePointResponse)
    MergeFrom(*source);
  }
}

void GetGCSafePointResponse::MergeFrom(const GetGCSafePointResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetGCSafePointResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.safe_point() != 0) {
    set_safe_point(from.safe_point());
  }
}

void GetGCSafePointResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetGCSafePointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGCSafePointResponse::CopyFrom(const GetGCSafePointResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetGCSafePointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGCSafePointResponse::IsInitialized() const {
  return true;
}

void GetGCSafePointResponse::Swap(GetGCSafePointResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetGCSafePointResponse::InternalSwap(GetGCSafePointResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(safe_point_, other->safe_point_);
}

::google::protobuf::Metadata GetGCSafePointResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateGCSafePointRequest::InitAsDefaultInstance() {
  ::pdpb::_UpdateGCSafePointRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
}
class UpdateGCSafePointRequest::HasBitSetters {
 public:
  static const ::pdpb::RequestHeader& header(const UpdateGCSafePointRequest* msg);
};

const ::pdpb::RequestHeader&
UpdateGCSafePointRequest::HasBitSetters::header(const UpdateGCSafePointRequest* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateGCSafePointRequest::kHeaderFieldNumber;
const int UpdateGCSafePointRequest::kSafePointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateGCSafePointRequest::UpdateGCSafePointRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.UpdateGCSafePointRequest)
}
UpdateGCSafePointRequest::UpdateGCSafePointRequest(const UpdateGCSafePointRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  safe_point_ = from.safe_point_;
  // @@protoc_insertion_point(copy_constructor:pdpb.UpdateGCSafePointRequest)
}

void UpdateGCSafePointRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateGCSafePointRequest_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safe_point_) -
      reinterpret_cast<char*>(&header_)) + sizeof(safe_point_));
}

UpdateGCSafePointRequest::~UpdateGCSafePointRequest() {
  // @@protoc_insertion_point(destructor:pdpb.UpdateGCSafePointRequest)
  SharedDtor();
}

void UpdateGCSafePointRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void UpdateGCSafePointRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateGCSafePointRequest& UpdateGCSafePointRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateGCSafePointRequest_pdpb_2eproto.base);
  return *internal_default_instance();
}


void UpdateGCSafePointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.UpdateGCSafePointRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  safe_point_ = GOOGLE_PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateGCSafePointRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateGCSafePointRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::RequestHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // uint64 safe_point = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_safe_point(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateGCSafePointRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.UpdateGCSafePointRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 safe_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &safe_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.UpdateGCSafePointRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.UpdateGCSafePointRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateGCSafePointRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.UpdateGCSafePointRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // uint64 safe_point = 2;
  if (this->safe_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->safe_point(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.UpdateGCSafePointRequest)
}

::google::protobuf::uint8* UpdateGCSafePointRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.UpdateGCSafePointRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // uint64 safe_point = 2;
  if (this->safe_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->safe_point(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.UpdateGCSafePointRequest)
  return target;
}

size_t UpdateGCSafePointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.UpdateGCSafePointRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 safe_point = 2;
  if (this->safe_point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->safe_point());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateGCSafePointRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.UpdateGCSafePointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateGCSafePointRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateGCSafePointRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.UpdateGCSafePointRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.UpdateGCSafePointRequest)
    MergeFrom(*source);
  }
}

void UpdateGCSafePointRequest::MergeFrom(const UpdateGCSafePointRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.UpdateGCSafePointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.safe_point() != 0) {
    set_safe_point(from.safe_point());
  }
}

void UpdateGCSafePointRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.UpdateGCSafePointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGCSafePointRequest::CopyFrom(const UpdateGCSafePointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.UpdateGCSafePointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGCSafePointRequest::IsInitialized() const {
  return true;
}

void UpdateGCSafePointRequest::Swap(UpdateGCSafePointRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateGCSafePointRequest::InternalSwap(UpdateGCSafePointRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(safe_point_, other->safe_point_);
}

::google::protobuf::Metadata UpdateGCSafePointRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateGCSafePointResponse::InitAsDefaultInstance() {
  ::pdpb::_UpdateGCSafePointResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}
class UpdateGCSafePointResponse::HasBitSetters {
 public:
  static const ::pdpb::ResponseHeader& header(const UpdateGCSafePointResponse* msg);
};

const ::pdpb::ResponseHeader&
UpdateGCSafePointResponse::HasBitSetters::header(const UpdateGCSafePointResponse* msg) {
  return *msg->header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateGCSafePointResponse::kHeaderFieldNumber;
const int UpdateGCSafePointResponse::kNewSafePointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateGCSafePointResponse::UpdateGCSafePointResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.UpdateGCSafePointResponse)
}
UpdateGCSafePointResponse::UpdateGCSafePointResponse(const UpdateGCSafePointResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  new_safe_point_ = from.new_safe_point_;
  // @@protoc_insertion_point(copy_constructor:pdpb.UpdateGCSafePointResponse)
}

void UpdateGCSafePointResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateGCSafePointResponse_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_safe_point_) -
      reinterpret_cast<char*>(&header_)) + sizeof(new_safe_point_));
}

UpdateGCSafePointResponse::~UpdateGCSafePointResponse() {
  // @@protoc_insertion_point(destructor:pdpb.UpdateGCSafePointResponse)
  SharedDtor();
}

void UpdateGCSafePointResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void UpdateGCSafePointResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateGCSafePointResponse& UpdateGCSafePointResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateGCSafePointResponse_pdpb_2eproto.base);
  return *internal_default_instance();
}


void UpdateGCSafePointResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.UpdateGCSafePointResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  new_safe_point_ = GOOGLE_PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateGCSafePointResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateGCSafePointResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // uint64 new_safe_point = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_new_safe_point(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateGCSafePointResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.UpdateGCSafePointResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 new_safe_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_safe_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.UpdateGCSafePointResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.UpdateGCSafePointResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateGCSafePointResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.UpdateGCSafePointResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // uint64 new_safe_point = 2;
  if (this->new_safe_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->new_safe_point(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.UpdateGCSafePointResponse)
}

::google::protobuf::uint8* UpdateGCSafePointResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.UpdateGCSafePointResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // uint64 new_safe_point = 2;
  if (this->new_safe_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->new_safe_point(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.UpdateGCSafePointResponse)
  return target;
}

size_t UpdateGCSafePointResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.UpdateGCSafePointResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 new_safe_point = 2;
  if (this->new_safe_point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->new_safe_point());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateGCSafePointResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.UpdateGCSafePointResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateGCSafePointResponse* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateGCSafePointResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.UpdateGCSafePointResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.UpdateGCSafePointResponse)
    MergeFrom(*source);
  }
}

void UpdateGCSafePointResponse::MergeFrom(const UpdateGCSafePointResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.UpdateGCSafePointResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.new_safe_point() != 0) {
    set_new_safe_point(from.new_safe_point());
  }
}

void UpdateGCSafePointResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.UpdateGCSafePointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGCSafePointResponse::CopyFrom(const UpdateGCSafePointResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.UpdateGCSafePointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGCSafePointResponse::IsInitialized() const {
  return true;
}

void UpdateGCSafePointResponse::Swap(UpdateGCSafePointResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateGCSafePointResponse::InternalSwap(UpdateGCSafePointResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(new_safe_point_, other->new_safe_point_);
}

::google::protobuf::Metadata UpdateGCSafePointResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SyncRegionRequest::InitAsDefaultInstance() {
  ::pdpb::_SyncRegionRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
  ::pdpb::_SyncRegionRequest_default_instance_._instance.get_mutable()->member_ = const_cast< ::pdpb::Member*>(
      ::pdpb::Member::internal_default_instance());
}
class SyncRegionRequest::HasBitSetters {
 public:
  static const ::pdpb::RequestHeader& header(const SyncRegionRequest* msg);
  static const ::pdpb::Member& member(const SyncRegionRequest* msg);
};

const ::pdpb::RequestHeader&
SyncRegionRequest::HasBitSetters::header(const SyncRegionRequest* msg) {
  return *msg->header_;
}
const ::pdpb::Member&
SyncRegionRequest::HasBitSetters::member(const SyncRegionRequest* msg) {
  return *msg->member_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncRegionRequest::kHeaderFieldNumber;
const int SyncRegionRequest::kMemberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncRegionRequest::SyncRegionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.SyncRegionRequest)
}
SyncRegionRequest::SyncRegionRequest(const SyncRegionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::RequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_member()) {
    member_ = new ::pdpb::Member(*from.member_);
  } else {
    member_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.SyncRegionRequest)
}

void SyncRegionRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SyncRegionRequest_pdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_) -
      reinterpret_cast<char*>(&header_)) + sizeof(member_));
}

SyncRegionRequest::~SyncRegionRequest() {
  // @@protoc_insertion_point(destructor:pdpb.SyncRegionRequest)
  SharedDtor();
}

void SyncRegionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete member_;
}

void SyncRegionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncRegionRequest& SyncRegionRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SyncRegionRequest_pdpb_2eproto.base);
  return *internal_default_instance();
}


void SyncRegionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.SyncRegionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && member_ != NULL) {
    delete member_;
  }
  member_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SyncRegionRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SyncRegionRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::RequestHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .pdpb.Member member = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::Member::_InternalParse;
        object = msg->mutable_member();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SyncRegionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.SyncRegionRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.RequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pdpb.Member member = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_member()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.SyncRegionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.SyncRegionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SyncRegionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.SyncRegionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // .pdpb.Member member = 2;
  if (this->has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::member(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.SyncRegionRequest)
}

::google::protobuf::uint8* SyncRegionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.SyncRegionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // .pdpb.Member member = 2;
  if (this->has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::member(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.SyncRegionRequest)
  return target;
}

size_t SyncRegionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.SyncRegionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .pdpb.Member member = 2;
  if (this->has_member()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *member_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncRegionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.SyncRegionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncRegionRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SyncRegionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.SyncRegionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.SyncRegionRequest)
    MergeFrom(*source);
  }
}

void SyncRegionRequest::MergeFrom(const SyncRegionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.SyncRegionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_member()) {
    mutable_member()->::pdpb::Member::MergeFrom(from.member());
  }
}

void SyncRegionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.SyncRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncRegionRequest::CopyFrom(const SyncRegionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.SyncRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncRegionRequest::IsInitialized() const {
  return true;
}

void SyncRegionRequest::Swap(SyncRegionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncRegionRequest::InternalSwap(SyncRegionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(member_, other->member_);
}

::google::protobuf::Metadata SyncRegionRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SyncRegionResponse::InitAsDefaultInstance() {
  ::pdpb::_SyncRegionResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}
class SyncRegionResponse::HasBitSetters {
 public:
  static const ::pdpb::ResponseHeader& header(const SyncRegionResponse* msg);
};

const ::pdpb::ResponseHeader&
SyncRegionResponse::HasBitSetters::header(const SyncRegionResponse* msg) {
  return *msg->header_;
}
void SyncRegionResponse::clear_regions() {
  regions_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncRegionResponse::kHeaderFieldNumber;
const int SyncRegionResponse::kRegionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncRegionResponse::SyncRegionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.SyncRegionResponse)
}
SyncRegionResponse::SyncRegionResponse(const SyncRegionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      regions_(from.regions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::pdpb::ResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pdpb.SyncRegionResponse)
}

void SyncRegionResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SyncRegionResponse_pdpb_2eproto.base);
  header_ = NULL;
}

SyncRegionResponse::~SyncRegionResponse() {
  // @@protoc_insertion_point(destructor:pdpb.SyncRegionResponse)
  SharedDtor();
}

void SyncRegionResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void SyncRegionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncRegionResponse& SyncRegionResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SyncRegionResponse_pdpb_2eproto.base);
  return *internal_default_instance();
}


void SyncRegionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.SyncRegionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  regions_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SyncRegionResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SyncRegionResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::pdpb::ResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // repeated .metapb.Region regions = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::metapb::Region::_InternalParse;
          object = msg->add_regions();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SyncRegionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.SyncRegionResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pdpb.ResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metapb.Region regions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_regions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.SyncRegionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.SyncRegionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SyncRegionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.SyncRegionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // repeated .metapb.Region regions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->regions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->regions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pdpb.SyncRegionResponse)
}

::google::protobuf::uint8* SyncRegionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.SyncRegionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // repeated .metapb.Region regions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->regions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->regions(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pdpb.SyncRegionResponse)
  return target;
}

size_t SyncRegionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.SyncRegionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metapb.Region regions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->regions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->regions(static_cast<int>(i)));
    }
  }

  // .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncRegionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.SyncRegionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncRegionResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SyncRegionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.SyncRegionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.SyncRegionResponse)
    MergeFrom(*source);
  }
}

void SyncRegionResponse::MergeFrom(const SyncRegionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.SyncRegionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  regions_.MergeFrom(from.regions_);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
}

void SyncRegionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.SyncRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncRegionResponse::CopyFrom(const SyncRegionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.SyncRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncRegionResponse::IsInitialized() const {
  return true;
}

void SyncRegionResponse::Swap(SyncRegionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncRegionResponse::InternalSwap(SyncRegionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&regions_)->InternalSwap(CastToBase(&other->regions_));
  swap(header_, other->header_);
}

::google::protobuf::Metadata SyncRegionResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_pdpb_2eproto);
  return ::file_level_metadata_pdpb_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pdpb
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::RequestHeader* Arena::CreateMaybeMessage< ::pdpb::RequestHeader >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::RequestHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::ResponseHeader* Arena::CreateMaybeMessage< ::pdpb::ResponseHeader >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::ResponseHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::Error* Arena::CreateMaybeMessage< ::pdpb::Error >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::Error >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::TsoRequest* Arena::CreateMaybeMessage< ::pdpb::TsoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::TsoRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::Timestamp* Arena::CreateMaybeMessage< ::pdpb::Timestamp >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::Timestamp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::TsoResponse* Arena::CreateMaybeMessage< ::pdpb::TsoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::TsoResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::BootstrapRequest* Arena::CreateMaybeMessage< ::pdpb::BootstrapRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::BootstrapRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::BootstrapResponse* Arena::CreateMaybeMessage< ::pdpb::BootstrapResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::BootstrapResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::IsBootstrappedRequest* Arena::CreateMaybeMessage< ::pdpb::IsBootstrappedRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::IsBootstrappedRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::IsBootstrappedResponse* Arena::CreateMaybeMessage< ::pdpb::IsBootstrappedResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::IsBootstrappedResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::AllocIDRequest* Arena::CreateMaybeMessage< ::pdpb::AllocIDRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::AllocIDRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::AllocIDResponse* Arena::CreateMaybeMessage< ::pdpb::AllocIDResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::AllocIDResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::GetStoreRequest* Arena::CreateMaybeMessage< ::pdpb::GetStoreRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::GetStoreRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::GetStoreResponse* Arena::CreateMaybeMessage< ::pdpb::GetStoreResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::GetStoreResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::PutStoreRequest* Arena::CreateMaybeMessage< ::pdpb::PutStoreRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::PutStoreRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::PutStoreResponse* Arena::CreateMaybeMessage< ::pdpb::PutStoreResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::PutStoreResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::GetAllStoresRequest* Arena::CreateMaybeMessage< ::pdpb::GetAllStoresRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::GetAllStoresRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::GetAllStoresResponse* Arena::CreateMaybeMessage< ::pdpb::GetAllStoresResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::GetAllStoresResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::GetRegionRequest* Arena::CreateMaybeMessage< ::pdpb::GetRegionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::GetRegionRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::GetRegionResponse* Arena::CreateMaybeMessage< ::pdpb::GetRegionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::GetRegionResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::GetRegionByIDRequest* Arena::CreateMaybeMessage< ::pdpb::GetRegionByIDRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::GetRegionByIDRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::GetClusterConfigRequest* Arena::CreateMaybeMessage< ::pdpb::GetClusterConfigRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::GetClusterConfigRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::GetClusterConfigResponse* Arena::CreateMaybeMessage< ::pdpb::GetClusterConfigResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::GetClusterConfigResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::PutClusterConfigRequest* Arena::CreateMaybeMessage< ::pdpb::PutClusterConfigRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::PutClusterConfigRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::PutClusterConfigResponse* Arena::CreateMaybeMessage< ::pdpb::PutClusterConfigResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::PutClusterConfigResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::Member* Arena::CreateMaybeMessage< ::pdpb::Member >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::Member >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::GetMembersRequest* Arena::CreateMaybeMessage< ::pdpb::GetMembersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::GetMembersRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::GetMembersResponse* Arena::CreateMaybeMessage< ::pdpb::GetMembersResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::GetMembersResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::PeerStats* Arena::CreateMaybeMessage< ::pdpb::PeerStats >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::PeerStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::RegionHeartbeatRequest* Arena::CreateMaybeMessage< ::pdpb::RegionHeartbeatRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::RegionHeartbeatRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::ChangePeer* Arena::CreateMaybeMessage< ::pdpb::ChangePeer >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::ChangePeer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::TransferLeader* Arena::CreateMaybeMessage< ::pdpb::TransferLeader >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::TransferLeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::Merge* Arena::CreateMaybeMessage< ::pdpb::Merge >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::Merge >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::SplitRegion* Arena::CreateMaybeMessage< ::pdpb::SplitRegion >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::SplitRegion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::RegionHeartbeatResponse* Arena::CreateMaybeMessage< ::pdpb::RegionHeartbeatResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::RegionHeartbeatResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::AskSplitRequest* Arena::CreateMaybeMessage< ::pdpb::AskSplitRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::AskSplitRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::AskSplitResponse* Arena::CreateMaybeMessage< ::pdpb::AskSplitResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::AskSplitResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::ReportSplitRequest* Arena::CreateMaybeMessage< ::pdpb::ReportSplitRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::ReportSplitRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::ReportSplitResponse* Arena::CreateMaybeMessage< ::pdpb::ReportSplitResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::ReportSplitResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::AskBatchSplitRequest* Arena::CreateMaybeMessage< ::pdpb::AskBatchSplitRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::AskBatchSplitRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::SplitID* Arena::CreateMaybeMessage< ::pdpb::SplitID >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::SplitID >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::AskBatchSplitResponse* Arena::CreateMaybeMessage< ::pdpb::AskBatchSplitResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::AskBatchSplitResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::ReportBatchSplitRequest* Arena::CreateMaybeMessage< ::pdpb::ReportBatchSplitRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::ReportBatchSplitRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::ReportBatchSplitResponse* Arena::CreateMaybeMessage< ::pdpb::ReportBatchSplitResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::ReportBatchSplitResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::TimeInterval* Arena::CreateMaybeMessage< ::pdpb::TimeInterval >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::TimeInterval >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::StoreStats* Arena::CreateMaybeMessage< ::pdpb::StoreStats >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::StoreStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::StoreHeartbeatRequest* Arena::CreateMaybeMessage< ::pdpb::StoreHeartbeatRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::StoreHeartbeatRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::StoreHeartbeatResponse* Arena::CreateMaybeMessage< ::pdpb::StoreHeartbeatResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::StoreHeartbeatResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::ScatterRegionRequest* Arena::CreateMaybeMessage< ::pdpb::ScatterRegionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::ScatterRegionRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::ScatterRegionResponse* Arena::CreateMaybeMessage< ::pdpb::ScatterRegionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::ScatterRegionResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::GetGCSafePointRequest* Arena::CreateMaybeMessage< ::pdpb::GetGCSafePointRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::GetGCSafePointRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::GetGCSafePointResponse* Arena::CreateMaybeMessage< ::pdpb::GetGCSafePointResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::GetGCSafePointResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::UpdateGCSafePointRequest* Arena::CreateMaybeMessage< ::pdpb::UpdateGCSafePointRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::UpdateGCSafePointRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::UpdateGCSafePointResponse* Arena::CreateMaybeMessage< ::pdpb::UpdateGCSafePointResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::UpdateGCSafePointResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::SyncRegionRequest* Arena::CreateMaybeMessage< ::pdpb::SyncRegionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::SyncRegionRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::pdpb::SyncRegionResponse* Arena::CreateMaybeMessage< ::pdpb::SyncRegionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::pdpb::SyncRegionResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
