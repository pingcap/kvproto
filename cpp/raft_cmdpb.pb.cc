// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_cmdpb.proto

#include "raft_cmdpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_eraftpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Entry_eraftpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_errorpb_2eproto ::google::protobuf::internal::SCCInfo<8> scc_info_Error_errorpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_import_5fsstpb_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SSTMeta_import_5fsstpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metapb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Peer_metapb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metapb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RegionEpoch_metapb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metapb_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Region_metapb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CommitMergeResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CompactLogRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CompactLogResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DeleteRangeRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DeleteRangeResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DeleteRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DeleteResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GetResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IngestSSTResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PrepareMergeResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PrewriteRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PrewriteResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PutRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PutResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RegionDetailRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RegionLeaderRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RollbackMergeRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RollbackMergeResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SnapRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SplitRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TransferLeaderResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VerifyHashRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VerifyHashResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BatchSplitRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BatchSplitResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ChangePeerRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ChangePeerResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_IngestSSTRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PrepareMergeRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RaftResponseHeader_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RegionLeaderResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SnapResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SplitResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TransferLeaderRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CommitMergeRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RaftRequestHeader_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RegionDetailResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_StatusRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_StatusResponse_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_Request_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_Response_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_AdminRequest_raft_5fcmdpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raft_5fcmdpb_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_AdminResponse_raft_5fcmdpb_2eproto;
namespace raft_cmdpb {
class GetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRequest> _instance;
} _GetRequest_default_instance_;
class GetResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetResponse> _instance;
} _GetResponse_default_instance_;
class PutRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PutRequest> _instance;
} _PutRequest_default_instance_;
class PutResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PutResponse> _instance;
} _PutResponse_default_instance_;
class DeleteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteRequest> _instance;
} _DeleteRequest_default_instance_;
class DeleteResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteResponse> _instance;
} _DeleteResponse_default_instance_;
class DeleteRangeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteRangeRequest> _instance;
} _DeleteRangeRequest_default_instance_;
class DeleteRangeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteRangeResponse> _instance;
} _DeleteRangeResponse_default_instance_;
class SnapRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SnapRequest> _instance;
} _SnapRequest_default_instance_;
class SnapResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SnapResponse> _instance;
} _SnapResponse_default_instance_;
class PrewriteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrewriteRequest> _instance;
} _PrewriteRequest_default_instance_;
class PrewriteResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrewriteResponse> _instance;
} _PrewriteResponse_default_instance_;
class IngestSSTRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IngestSSTRequest> _instance;
} _IngestSSTRequest_default_instance_;
class IngestSSTResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IngestSSTResponse> _instance;
} _IngestSSTResponse_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request> _instance;
} _Request_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response> _instance;
} _Response_default_instance_;
class ChangePeerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChangePeerRequest> _instance;
} _ChangePeerRequest_default_instance_;
class ChangePeerResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChangePeerResponse> _instance;
} _ChangePeerResponse_default_instance_;
class SplitRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SplitRequest> _instance;
} _SplitRequest_default_instance_;
class SplitResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SplitResponse> _instance;
} _SplitResponse_default_instance_;
class BatchSplitRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BatchSplitRequest> _instance;
} _BatchSplitRequest_default_instance_;
class BatchSplitResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BatchSplitResponse> _instance;
} _BatchSplitResponse_default_instance_;
class CompactLogRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CompactLogRequest> _instance;
} _CompactLogRequest_default_instance_;
class CompactLogResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CompactLogResponse> _instance;
} _CompactLogResponse_default_instance_;
class TransferLeaderRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransferLeaderRequest> _instance;
} _TransferLeaderRequest_default_instance_;
class TransferLeaderResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransferLeaderResponse> _instance;
} _TransferLeaderResponse_default_instance_;
class VerifyHashRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VerifyHashRequest> _instance;
} _VerifyHashRequest_default_instance_;
class VerifyHashResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VerifyHashResponse> _instance;
} _VerifyHashResponse_default_instance_;
class PrepareMergeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrepareMergeRequest> _instance;
} _PrepareMergeRequest_default_instance_;
class PrepareMergeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrepareMergeResponse> _instance;
} _PrepareMergeResponse_default_instance_;
class CommitMergeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommitMergeRequest> _instance;
} _CommitMergeRequest_default_instance_;
class CommitMergeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommitMergeResponse> _instance;
} _CommitMergeResponse_default_instance_;
class RollbackMergeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RollbackMergeRequest> _instance;
} _RollbackMergeRequest_default_instance_;
class RollbackMergeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RollbackMergeResponse> _instance;
} _RollbackMergeResponse_default_instance_;
class AdminRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdminRequest> _instance;
} _AdminRequest_default_instance_;
class AdminResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdminResponse> _instance;
} _AdminResponse_default_instance_;
class RegionLeaderRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegionLeaderRequest> _instance;
} _RegionLeaderRequest_default_instance_;
class RegionLeaderResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegionLeaderResponse> _instance;
} _RegionLeaderResponse_default_instance_;
class RegionDetailRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegionDetailRequest> _instance;
} _RegionDetailRequest_default_instance_;
class RegionDetailResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegionDetailResponse> _instance;
} _RegionDetailResponse_default_instance_;
class StatusRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StatusRequest> _instance;
} _StatusRequest_default_instance_;
class StatusResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StatusResponse> _instance;
} _StatusResponse_default_instance_;
class RaftRequestHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RaftRequestHeader> _instance;
} _RaftRequestHeader_default_instance_;
class RaftResponseHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RaftResponseHeader> _instance;
} _RaftResponseHeader_default_instance_;
class RaftCmdRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RaftCmdRequest> _instance;
} _RaftCmdRequest_default_instance_;
class RaftCmdResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RaftCmdResponse> _instance;
} _RaftCmdResponse_default_instance_;
}  // namespace raft_cmdpb
static void InitDefaultsGetRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_GetRequest_default_instance_;
    new (ptr) ::raft_cmdpb::GetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::GetRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetRequest_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsGetResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_GetResponse_default_instance_;
    new (ptr) ::raft_cmdpb::GetResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::GetResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetResponse_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsPutRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_PutRequest_default_instance_;
    new (ptr) ::raft_cmdpb::PutRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::PutRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PutRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPutRequest_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsPutResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_PutResponse_default_instance_;
    new (ptr) ::raft_cmdpb::PutResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::PutResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PutResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPutResponse_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsDeleteRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_DeleteRequest_default_instance_;
    new (ptr) ::raft_cmdpb::DeleteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::DeleteRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteRequest_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsDeleteResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_DeleteResponse_default_instance_;
    new (ptr) ::raft_cmdpb::DeleteResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::DeleteResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteResponse_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsDeleteRangeRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_DeleteRangeRequest_default_instance_;
    new (ptr) ::raft_cmdpb::DeleteRangeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::DeleteRangeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteRangeRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteRangeRequest_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsDeleteRangeResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_DeleteRangeResponse_default_instance_;
    new (ptr) ::raft_cmdpb::DeleteRangeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::DeleteRangeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteRangeResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteRangeResponse_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsSnapRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_SnapRequest_default_instance_;
    new (ptr) ::raft_cmdpb::SnapRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::SnapRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SnapRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSnapRequest_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsSnapResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_SnapResponse_default_instance_;
    new (ptr) ::raft_cmdpb::SnapResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::SnapResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SnapResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSnapResponse_raft_5fcmdpb_2eproto}, {
      &scc_info_Region_metapb_2eproto.base,}};

static void InitDefaultsPrewriteRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_PrewriteRequest_default_instance_;
    new (ptr) ::raft_cmdpb::PrewriteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::PrewriteRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PrewriteRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPrewriteRequest_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsPrewriteResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_PrewriteResponse_default_instance_;
    new (ptr) ::raft_cmdpb::PrewriteResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::PrewriteResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PrewriteResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPrewriteResponse_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsIngestSSTRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_IngestSSTRequest_default_instance_;
    new (ptr) ::raft_cmdpb::IngestSSTRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::IngestSSTRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_IngestSSTRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIngestSSTRequest_raft_5fcmdpb_2eproto}, {
      &scc_info_SSTMeta_import_5fsstpb_2eproto.base,}};

static void InitDefaultsIngestSSTResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_IngestSSTResponse_default_instance_;
    new (ptr) ::raft_cmdpb::IngestSSTResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::IngestSSTResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IngestSSTResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIngestSSTResponse_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_Request_default_instance_;
    new (ptr) ::raft_cmdpb::Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_Request_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsRequest_raft_5fcmdpb_2eproto}, {
      &scc_info_GetRequest_raft_5fcmdpb_2eproto.base,
      &scc_info_PutRequest_raft_5fcmdpb_2eproto.base,
      &scc_info_DeleteRequest_raft_5fcmdpb_2eproto.base,
      &scc_info_SnapRequest_raft_5fcmdpb_2eproto.base,
      &scc_info_PrewriteRequest_raft_5fcmdpb_2eproto.base,
      &scc_info_DeleteRangeRequest_raft_5fcmdpb_2eproto.base,
      &scc_info_IngestSSTRequest_raft_5fcmdpb_2eproto.base,}};

static void InitDefaultsResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_Response_default_instance_;
    new (ptr) ::raft_cmdpb::Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_Response_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsResponse_raft_5fcmdpb_2eproto}, {
      &scc_info_GetResponse_raft_5fcmdpb_2eproto.base,
      &scc_info_PutResponse_raft_5fcmdpb_2eproto.base,
      &scc_info_DeleteResponse_raft_5fcmdpb_2eproto.base,
      &scc_info_SnapResponse_raft_5fcmdpb_2eproto.base,
      &scc_info_PrewriteResponse_raft_5fcmdpb_2eproto.base,
      &scc_info_DeleteRangeResponse_raft_5fcmdpb_2eproto.base,
      &scc_info_IngestSSTResponse_raft_5fcmdpb_2eproto.base,}};

static void InitDefaultsChangePeerRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_ChangePeerRequest_default_instance_;
    new (ptr) ::raft_cmdpb::ChangePeerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::ChangePeerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ChangePeerRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChangePeerRequest_raft_5fcmdpb_2eproto}, {
      &scc_info_Peer_metapb_2eproto.base,}};

static void InitDefaultsChangePeerResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_ChangePeerResponse_default_instance_;
    new (ptr) ::raft_cmdpb::ChangePeerResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::ChangePeerResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ChangePeerResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChangePeerResponse_raft_5fcmdpb_2eproto}, {
      &scc_info_Region_metapb_2eproto.base,}};

static void InitDefaultsSplitRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_SplitRequest_default_instance_;
    new (ptr) ::raft_cmdpb::SplitRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::SplitRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SplitRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSplitRequest_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsSplitResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_SplitResponse_default_instance_;
    new (ptr) ::raft_cmdpb::SplitResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::SplitResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SplitResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSplitResponse_raft_5fcmdpb_2eproto}, {
      &scc_info_Region_metapb_2eproto.base,}};

static void InitDefaultsBatchSplitRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_BatchSplitRequest_default_instance_;
    new (ptr) ::raft_cmdpb::BatchSplitRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::BatchSplitRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BatchSplitRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBatchSplitRequest_raft_5fcmdpb_2eproto}, {
      &scc_info_SplitRequest_raft_5fcmdpb_2eproto.base,}};

static void InitDefaultsBatchSplitResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_BatchSplitResponse_default_instance_;
    new (ptr) ::raft_cmdpb::BatchSplitResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::BatchSplitResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BatchSplitResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBatchSplitResponse_raft_5fcmdpb_2eproto}, {
      &scc_info_Region_metapb_2eproto.base,}};

static void InitDefaultsCompactLogRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_CompactLogRequest_default_instance_;
    new (ptr) ::raft_cmdpb::CompactLogRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::CompactLogRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CompactLogRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCompactLogRequest_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsCompactLogResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_CompactLogResponse_default_instance_;
    new (ptr) ::raft_cmdpb::CompactLogResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::CompactLogResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CompactLogResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCompactLogResponse_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsTransferLeaderRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_TransferLeaderRequest_default_instance_;
    new (ptr) ::raft_cmdpb::TransferLeaderRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::TransferLeaderRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TransferLeaderRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTransferLeaderRequest_raft_5fcmdpb_2eproto}, {
      &scc_info_Peer_metapb_2eproto.base,}};

static void InitDefaultsTransferLeaderResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_TransferLeaderResponse_default_instance_;
    new (ptr) ::raft_cmdpb::TransferLeaderResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::TransferLeaderResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TransferLeaderResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransferLeaderResponse_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsVerifyHashRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_VerifyHashRequest_default_instance_;
    new (ptr) ::raft_cmdpb::VerifyHashRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::VerifyHashRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VerifyHashRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVerifyHashRequest_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsVerifyHashResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_VerifyHashResponse_default_instance_;
    new (ptr) ::raft_cmdpb::VerifyHashResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::VerifyHashResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VerifyHashResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVerifyHashResponse_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsPrepareMergeRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_PrepareMergeRequest_default_instance_;
    new (ptr) ::raft_cmdpb::PrepareMergeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::PrepareMergeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PrepareMergeRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPrepareMergeRequest_raft_5fcmdpb_2eproto}, {
      &scc_info_Region_metapb_2eproto.base,}};

static void InitDefaultsPrepareMergeResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_PrepareMergeResponse_default_instance_;
    new (ptr) ::raft_cmdpb::PrepareMergeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::PrepareMergeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PrepareMergeResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPrepareMergeResponse_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsCommitMergeRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_CommitMergeRequest_default_instance_;
    new (ptr) ::raft_cmdpb::CommitMergeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::CommitMergeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CommitMergeRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCommitMergeRequest_raft_5fcmdpb_2eproto}, {
      &scc_info_Region_metapb_2eproto.base,
      &scc_info_Entry_eraftpb_2eproto.base,}};

static void InitDefaultsCommitMergeResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_CommitMergeResponse_default_instance_;
    new (ptr) ::raft_cmdpb::CommitMergeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::CommitMergeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CommitMergeResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCommitMergeResponse_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsRollbackMergeRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_RollbackMergeRequest_default_instance_;
    new (ptr) ::raft_cmdpb::RollbackMergeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::RollbackMergeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RollbackMergeRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRollbackMergeRequest_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsRollbackMergeResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_RollbackMergeResponse_default_instance_;
    new (ptr) ::raft_cmdpb::RollbackMergeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::RollbackMergeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RollbackMergeResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRollbackMergeResponse_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsAdminRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_AdminRequest_default_instance_;
    new (ptr) ::raft_cmdpb::AdminRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::AdminRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<9> scc_info_AdminRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsAdminRequest_raft_5fcmdpb_2eproto}, {
      &scc_info_ChangePeerRequest_raft_5fcmdpb_2eproto.base,
      &scc_info_SplitRequest_raft_5fcmdpb_2eproto.base,
      &scc_info_CompactLogRequest_raft_5fcmdpb_2eproto.base,
      &scc_info_TransferLeaderRequest_raft_5fcmdpb_2eproto.base,
      &scc_info_VerifyHashRequest_raft_5fcmdpb_2eproto.base,
      &scc_info_PrepareMergeRequest_raft_5fcmdpb_2eproto.base,
      &scc_info_CommitMergeRequest_raft_5fcmdpb_2eproto.base,
      &scc_info_RollbackMergeRequest_raft_5fcmdpb_2eproto.base,
      &scc_info_BatchSplitRequest_raft_5fcmdpb_2eproto.base,}};

static void InitDefaultsAdminResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_AdminResponse_default_instance_;
    new (ptr) ::raft_cmdpb::AdminResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::AdminResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<9> scc_info_AdminResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsAdminResponse_raft_5fcmdpb_2eproto}, {
      &scc_info_ChangePeerResponse_raft_5fcmdpb_2eproto.base,
      &scc_info_SplitResponse_raft_5fcmdpb_2eproto.base,
      &scc_info_CompactLogResponse_raft_5fcmdpb_2eproto.base,
      &scc_info_TransferLeaderResponse_raft_5fcmdpb_2eproto.base,
      &scc_info_VerifyHashResponse_raft_5fcmdpb_2eproto.base,
      &scc_info_PrepareMergeResponse_raft_5fcmdpb_2eproto.base,
      &scc_info_CommitMergeResponse_raft_5fcmdpb_2eproto.base,
      &scc_info_RollbackMergeResponse_raft_5fcmdpb_2eproto.base,
      &scc_info_BatchSplitResponse_raft_5fcmdpb_2eproto.base,}};

static void InitDefaultsRegionLeaderRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_RegionLeaderRequest_default_instance_;
    new (ptr) ::raft_cmdpb::RegionLeaderRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::RegionLeaderRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RegionLeaderRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRegionLeaderRequest_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsRegionLeaderResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_RegionLeaderResponse_default_instance_;
    new (ptr) ::raft_cmdpb::RegionLeaderResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::RegionLeaderResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RegionLeaderResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRegionLeaderResponse_raft_5fcmdpb_2eproto}, {
      &scc_info_Peer_metapb_2eproto.base,}};

static void InitDefaultsRegionDetailRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_RegionDetailRequest_default_instance_;
    new (ptr) ::raft_cmdpb::RegionDetailRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::RegionDetailRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RegionDetailRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRegionDetailRequest_raft_5fcmdpb_2eproto}, {}};

static void InitDefaultsRegionDetailResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_RegionDetailResponse_default_instance_;
    new (ptr) ::raft_cmdpb::RegionDetailResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::RegionDetailResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RegionDetailResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRegionDetailResponse_raft_5fcmdpb_2eproto}, {
      &scc_info_Region_metapb_2eproto.base,
      &scc_info_Peer_metapb_2eproto.base,}};

static void InitDefaultsStatusRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_StatusRequest_default_instance_;
    new (ptr) ::raft_cmdpb::StatusRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::StatusRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_StatusRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsStatusRequest_raft_5fcmdpb_2eproto}, {
      &scc_info_RegionLeaderRequest_raft_5fcmdpb_2eproto.base,
      &scc_info_RegionDetailRequest_raft_5fcmdpb_2eproto.base,}};

static void InitDefaultsStatusResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_StatusResponse_default_instance_;
    new (ptr) ::raft_cmdpb::StatusResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::StatusResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_StatusResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsStatusResponse_raft_5fcmdpb_2eproto}, {
      &scc_info_RegionLeaderResponse_raft_5fcmdpb_2eproto.base,
      &scc_info_RegionDetailResponse_raft_5fcmdpb_2eproto.base,}};

static void InitDefaultsRaftRequestHeader_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_RaftRequestHeader_default_instance_;
    new (ptr) ::raft_cmdpb::RaftRequestHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::RaftRequestHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RaftRequestHeader_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRaftRequestHeader_raft_5fcmdpb_2eproto}, {
      &scc_info_Peer_metapb_2eproto.base,
      &scc_info_RegionEpoch_metapb_2eproto.base,}};

static void InitDefaultsRaftResponseHeader_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_RaftResponseHeader_default_instance_;
    new (ptr) ::raft_cmdpb::RaftResponseHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::RaftResponseHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RaftResponseHeader_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRaftResponseHeader_raft_5fcmdpb_2eproto}, {
      &scc_info_Error_errorpb_2eproto.base,}};

static void InitDefaultsRaftCmdRequest_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_RaftCmdRequest_default_instance_;
    new (ptr) ::raft_cmdpb::RaftCmdRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::RaftCmdRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_RaftCmdRequest_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsRaftCmdRequest_raft_5fcmdpb_2eproto}, {
      &scc_info_RaftRequestHeader_raft_5fcmdpb_2eproto.base,
      &scc_info_Request_raft_5fcmdpb_2eproto.base,
      &scc_info_AdminRequest_raft_5fcmdpb_2eproto.base,
      &scc_info_StatusRequest_raft_5fcmdpb_2eproto.base,}};

static void InitDefaultsRaftCmdResponse_raft_5fcmdpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_cmdpb::_RaftCmdResponse_default_instance_;
    new (ptr) ::raft_cmdpb::RaftCmdResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_cmdpb::RaftCmdResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_RaftCmdResponse_raft_5fcmdpb_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsRaftCmdResponse_raft_5fcmdpb_2eproto}, {
      &scc_info_RaftResponseHeader_raft_5fcmdpb_2eproto.base,
      &scc_info_Response_raft_5fcmdpb_2eproto.base,
      &scc_info_AdminResponse_raft_5fcmdpb_2eproto.base,
      &scc_info_StatusResponse_raft_5fcmdpb_2eproto.base,}};

void InitDefaults_raft_5fcmdpb_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_GetRequest_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetResponse_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PutRequest_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PutResponse_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteRequest_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteResponse_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteRangeRequest_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteRangeResponse_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SnapRequest_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SnapResponse_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrewriteRequest_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrewriteResponse_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IngestSSTRequest_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IngestSSTResponse_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Request_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Response_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChangePeerRequest_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChangePeerResponse_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SplitRequest_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SplitResponse_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BatchSplitRequest_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BatchSplitResponse_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CompactLogRequest_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CompactLogResponse_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransferLeaderRequest_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransferLeaderResponse_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VerifyHashRequest_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VerifyHashResponse_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrepareMergeRequest_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrepareMergeResponse_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommitMergeRequest_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommitMergeResponse_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RollbackMergeRequest_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RollbackMergeResponse_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdminRequest_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AdminResponse_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegionLeaderRequest_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegionLeaderResponse_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegionDetailRequest_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegionDetailResponse_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StatusRequest_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StatusResponse_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RaftRequestHeader_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RaftResponseHeader_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RaftCmdRequest_raft_5fcmdpb_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RaftCmdResponse_raft_5fcmdpb_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_raft_5fcmdpb_2eproto[46];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_raft_5fcmdpb_2eproto[3];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_raft_5fcmdpb_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_raft_5fcmdpb_2eproto::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::GetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::GetRequest, cf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::GetRequest, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::GetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::GetResponse, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::PutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::PutRequest, cf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::PutRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::PutRequest, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::PutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::DeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::DeleteRequest, cf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::DeleteRequest, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::DeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::DeleteRangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::DeleteRangeRequest, cf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::DeleteRangeRequest, start_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::DeleteRangeRequest, end_key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::DeleteRangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::SnapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::SnapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::SnapResponse, region_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::PrewriteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::PrewriteRequest, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::PrewriteRequest, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::PrewriteRequest, lock_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::PrewriteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::IngestSSTRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::IngestSSTRequest, sst_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::IngestSSTResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::Request, cmd_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::Request, get_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::Request, put_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::Request, delete__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::Request, snap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::Request, prewrite_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::Request, delete_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::Request, ingest_sst_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::Response, cmd_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::Response, get_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::Response, put_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::Response, delete__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::Response, snap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::Response, prewrite_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::Response, delte_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::Response, ingest_sst_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::ChangePeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::ChangePeerRequest, change_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::ChangePeerRequest, peer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::ChangePeerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::ChangePeerResponse, region_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::SplitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::SplitRequest, split_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::SplitRequest, new_region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::SplitRequest, new_peer_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::SplitRequest, right_derive_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::SplitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::SplitResponse, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::SplitResponse, right_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::BatchSplitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::BatchSplitRequest, requests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::BatchSplitRequest, right_derive_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::BatchSplitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::BatchSplitResponse, regions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::CompactLogRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::CompactLogRequest, compact_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::CompactLogRequest, compact_term_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::CompactLogResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::TransferLeaderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::TransferLeaderRequest, peer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::TransferLeaderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::VerifyHashRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::VerifyHashRequest, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::VerifyHashRequest, hash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::VerifyHashResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::PrepareMergeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::PrepareMergeRequest, min_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::PrepareMergeRequest, target_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::PrepareMergeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::CommitMergeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::CommitMergeRequest, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::CommitMergeRequest, commit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::CommitMergeRequest, entries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::CommitMergeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RollbackMergeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RollbackMergeRequest, commit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RollbackMergeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::AdminRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::AdminRequest, cmd_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::AdminRequest, change_peer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::AdminRequest, split_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::AdminRequest, compact_log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::AdminRequest, transfer_leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::AdminRequest, verify_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::AdminRequest, prepare_merge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::AdminRequest, commit_merge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::AdminRequest, rollback_merge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::AdminRequest, splits_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::AdminResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::AdminResponse, cmd_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::AdminResponse, change_peer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::AdminResponse, split_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::AdminResponse, compact_log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::AdminResponse, transfer_leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::AdminResponse, verify_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::AdminResponse, prepare_merge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::AdminResponse, commit_merge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::AdminResponse, rollback_merge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::AdminResponse, splits_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RegionLeaderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RegionLeaderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RegionLeaderResponse, leader_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RegionDetailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RegionDetailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RegionDetailResponse, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RegionDetailResponse, leader_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::StatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::StatusRequest, cmd_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::StatusRequest, region_leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::StatusRequest, region_detail_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::StatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::StatusResponse, cmd_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::StatusResponse, region_leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::StatusResponse, region_detail_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RaftRequestHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RaftRequestHeader, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RaftRequestHeader, peer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RaftRequestHeader, read_quorum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RaftRequestHeader, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RaftRequestHeader, region_epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RaftRequestHeader, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RaftRequestHeader, sync_log_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RaftResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RaftResponseHeader, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RaftResponseHeader, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RaftResponseHeader, current_term_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RaftCmdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RaftCmdRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RaftCmdRequest, requests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RaftCmdRequest, admin_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RaftCmdRequest, status_request_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RaftCmdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RaftCmdResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RaftCmdResponse, responses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RaftCmdResponse, admin_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft_cmdpb::RaftCmdResponse, status_response_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::raft_cmdpb::GetRequest)},
  { 7, -1, sizeof(::raft_cmdpb::GetResponse)},
  { 13, -1, sizeof(::raft_cmdpb::PutRequest)},
  { 21, -1, sizeof(::raft_cmdpb::PutResponse)},
  { 26, -1, sizeof(::raft_cmdpb::DeleteRequest)},
  { 33, -1, sizeof(::raft_cmdpb::DeleteResponse)},
  { 38, -1, sizeof(::raft_cmdpb::DeleteRangeRequest)},
  { 46, -1, sizeof(::raft_cmdpb::DeleteRangeResponse)},
  { 51, -1, sizeof(::raft_cmdpb::SnapRequest)},
  { 56, -1, sizeof(::raft_cmdpb::SnapResponse)},
  { 62, -1, sizeof(::raft_cmdpb::PrewriteRequest)},
  { 70, -1, sizeof(::raft_cmdpb::PrewriteResponse)},
  { 75, -1, sizeof(::raft_cmdpb::IngestSSTRequest)},
  { 81, -1, sizeof(::raft_cmdpb::IngestSSTResponse)},
  { 86, -1, sizeof(::raft_cmdpb::Request)},
  { 99, -1, sizeof(::raft_cmdpb::Response)},
  { 112, -1, sizeof(::raft_cmdpb::ChangePeerRequest)},
  { 119, -1, sizeof(::raft_cmdpb::ChangePeerResponse)},
  { 125, -1, sizeof(::raft_cmdpb::SplitRequest)},
  { 134, -1, sizeof(::raft_cmdpb::SplitResponse)},
  { 141, -1, sizeof(::raft_cmdpb::BatchSplitRequest)},
  { 148, -1, sizeof(::raft_cmdpb::BatchSplitResponse)},
  { 154, -1, sizeof(::raft_cmdpb::CompactLogRequest)},
  { 161, -1, sizeof(::raft_cmdpb::CompactLogResponse)},
  { 166, -1, sizeof(::raft_cmdpb::TransferLeaderRequest)},
  { 172, -1, sizeof(::raft_cmdpb::TransferLeaderResponse)},
  { 177, -1, sizeof(::raft_cmdpb::VerifyHashRequest)},
  { 184, -1, sizeof(::raft_cmdpb::VerifyHashResponse)},
  { 189, -1, sizeof(::raft_cmdpb::PrepareMergeRequest)},
  { 196, -1, sizeof(::raft_cmdpb::PrepareMergeResponse)},
  { 201, -1, sizeof(::raft_cmdpb::CommitMergeRequest)},
  { 209, -1, sizeof(::raft_cmdpb::CommitMergeResponse)},
  { 214, -1, sizeof(::raft_cmdpb::RollbackMergeRequest)},
  { 220, -1, sizeof(::raft_cmdpb::RollbackMergeResponse)},
  { 225, -1, sizeof(::raft_cmdpb::AdminRequest)},
  { 240, -1, sizeof(::raft_cmdpb::AdminResponse)},
  { 255, -1, sizeof(::raft_cmdpb::RegionLeaderRequest)},
  { 260, -1, sizeof(::raft_cmdpb::RegionLeaderResponse)},
  { 266, -1, sizeof(::raft_cmdpb::RegionDetailRequest)},
  { 271, -1, sizeof(::raft_cmdpb::RegionDetailResponse)},
  { 278, -1, sizeof(::raft_cmdpb::StatusRequest)},
  { 286, -1, sizeof(::raft_cmdpb::StatusResponse)},
  { 294, -1, sizeof(::raft_cmdpb::RaftRequestHeader)},
  { 306, -1, sizeof(::raft_cmdpb::RaftResponseHeader)},
  { 314, -1, sizeof(::raft_cmdpb::RaftCmdRequest)},
  { 323, -1, sizeof(::raft_cmdpb::RaftCmdResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_GetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_GetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_PutRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_PutResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_DeleteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_DeleteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_DeleteRangeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_DeleteRangeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_SnapRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_SnapResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_PrewriteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_PrewriteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_IngestSSTRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_IngestSSTResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_ChangePeerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_ChangePeerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_SplitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_SplitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_BatchSplitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_BatchSplitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_CompactLogRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_CompactLogResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_TransferLeaderRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_TransferLeaderResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_VerifyHashRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_VerifyHashResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_PrepareMergeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_PrepareMergeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_CommitMergeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_CommitMergeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_RollbackMergeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_RollbackMergeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_AdminRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_AdminResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_RegionLeaderRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_RegionLeaderResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_RegionDetailRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_RegionDetailResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_StatusRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_StatusResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_RaftRequestHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_RaftResponseHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_RaftCmdRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_cmdpb::_RaftCmdResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_raft_5fcmdpb_2eproto = {
  {}, AddDescriptors_raft_5fcmdpb_2eproto, "raft_cmdpb.proto", schemas,
  file_default_instances, TableStruct_raft_5fcmdpb_2eproto::offsets,
  file_level_metadata_raft_5fcmdpb_2eproto, 46, file_level_enum_descriptors_raft_5fcmdpb_2eproto, file_level_service_descriptors_raft_5fcmdpb_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_raft_5fcmdpb_2eproto = {
  false, InitDefaults_raft_5fcmdpb_2eproto, 
  "\n\020raft_cmdpb.proto\022\nraft_cmdpb\032\014metapb.p"
  "roto\032\rerrorpb.proto\032\reraftpb.proto\032\022impo"
  "rt_sstpb.proto\"%\n\nGetRequest\022\n\n\002cf\030\001 \001(\t"
  "\022\013\n\003key\030\002 \001(\014\"\034\n\013GetResponse\022\r\n\005value\030\001 "
  "\001(\014\"4\n\nPutRequest\022\n\n\002cf\030\001 \001(\t\022\013\n\003key\030\002 \001"
  "(\014\022\r\n\005value\030\003 \001(\014\"\r\n\013PutResponse\"(\n\rDele"
  "teRequest\022\n\n\002cf\030\001 \001(\t\022\013\n\003key\030\002 \001(\014\"\020\n\016De"
  "leteResponse\"D\n\022DeleteRangeRequest\022\n\n\002cf"
  "\030\001 \001(\t\022\021\n\tstart_key\030\002 \001(\014\022\017\n\007end_key\030\003 \001"
  "(\014\"\025\n\023DeleteRangeResponse\"\r\n\013SnapRequest"
  "\".\n\014SnapResponse\022\036\n\006region\030\001 \001(\0132\016.metap"
  "b.Region\";\n\017PrewriteRequest\022\013\n\003key\030\001 \001(\014"
  "\022\r\n\005value\030\002 \001(\014\022\014\n\004lock\030\003 \001(\014\"\022\n\020Prewrit"
  "eResponse\"6\n\020IngestSSTRequest\022\"\n\003sst\030\001 \001"
  "(\0132\025.import_sstpb.SSTMeta\"\023\n\021IngestSSTRe"
  "sponse\"\343\002\n\007Request\022%\n\010cmd_type\030\001 \001(\0162\023.r"
  "aft_cmdpb.CmdType\022#\n\003get\030\002 \001(\0132\026.raft_cm"
  "dpb.GetRequest\022#\n\003put\030\004 \001(\0132\026.raft_cmdpb"
  ".PutRequest\022)\n\006delete\030\005 \001(\0132\031.raft_cmdpb"
  ".DeleteRequest\022%\n\004snap\030\006 \001(\0132\027.raft_cmdp"
  "b.SnapRequest\022-\n\010prewrite\030\007 \001(\0132\033.raft_c"
  "mdpb.PrewriteRequest\0224\n\014delete_range\030\010 \001"
  "(\0132\036.raft_cmdpb.DeleteRangeRequest\0220\n\nin"
  "gest_sst\030\t \001(\0132\034.raft_cmdpb.IngestSSTReq"
  "uest\"\352\002\n\010Response\022%\n\010cmd_type\030\001 \001(\0162\023.ra"
  "ft_cmdpb.CmdType\022$\n\003get\030\002 \001(\0132\027.raft_cmd"
  "pb.GetResponse\022$\n\003put\030\004 \001(\0132\027.raft_cmdpb"
  ".PutResponse\022*\n\006delete\030\005 \001(\0132\032.raft_cmdp"
  "b.DeleteResponse\022&\n\004snap\030\006 \001(\0132\030.raft_cm"
  "dpb.SnapResponse\022.\n\010prewrite\030\007 \001(\0132\034.raf"
  "t_cmdpb.PrewriteResponse\0224\n\013delte_range\030"
  "\010 \001(\0132\037.raft_cmdpb.DeleteRangeResponse\0221"
  "\n\ningest_sst\030\t \001(\0132\035.raft_cmdpb.IngestSS"
  "TResponse\"]\n\021ChangePeerRequest\022,\n\013change"
  "_type\030\001 \001(\0162\027.eraftpb.ConfChangeType\022\032\n\004"
  "peer\030\002 \001(\0132\014.metapb.Peer\"4\n\022ChangePeerRe"
  "sponse\022\036\n\006region\030\001 \001(\0132\016.metapb.Region\"h"
  "\n\014SplitRequest\022\021\n\tsplit_key\030\001 \001(\014\022\025\n\rnew"
  "_region_id\030\002 \001(\004\022\024\n\014new_peer_ids\030\003 \003(\004\022\030"
  "\n\014right_derive\030\004 \001(\010B\002\030\001\"L\n\rSplitRespons"
  "e\022\034\n\004left\030\001 \001(\0132\016.metapb.Region\022\035\n\005right"
  "\030\002 \001(\0132\016.metapb.Region\"U\n\021BatchSplitRequ"
  "est\022*\n\010requests\030\001 \003(\0132\030.raft_cmdpb.Split"
  "Request\022\024\n\014right_derive\030\002 \001(\010\"5\n\022BatchSp"
  "litResponse\022\037\n\007regions\030\001 \003(\0132\016.metapb.Re"
  "gion\"@\n\021CompactLogRequest\022\025\n\rcompact_ind"
  "ex\030\001 \001(\004\022\024\n\014compact_term\030\002 \001(\004\"\024\n\022Compac"
  "tLogResponse\"3\n\025TransferLeaderRequest\022\032\n"
  "\004peer\030\001 \001(\0132\014.metapb.Peer\"\030\n\026TransferLea"
  "derResponse\"0\n\021VerifyHashRequest\022\r\n\005inde"
  "x\030\001 \001(\004\022\014\n\004hash\030\002 \001(\014\"\024\n\022VerifyHashRespo"
  "nse\"H\n\023PrepareMergeRequest\022\021\n\tmin_index\030"
  "\001 \001(\004\022\036\n\006target\030\002 \001(\0132\016.metapb.Region\"\026\n"
  "\024PrepareMergeResponse\"e\n\022CommitMergeRequ"
  "est\022\036\n\006source\030\001 \001(\0132\016.metapb.Region\022\016\n\006c"
  "ommit\030\002 \001(\004\022\037\n\007entries\030\003 \003(\0132\016.eraftpb.E"
  "ntry\"\025\n\023CommitMergeResponse\"&\n\024RollbackM"
  "ergeRequest\022\016\n\006commit\030\001 \001(\004\"\027\n\025RollbackM"
  "ergeResponse\"\226\004\n\014AdminRequest\022*\n\010cmd_typ"
  "e\030\001 \001(\0162\030.raft_cmdpb.AdminCmdType\0222\n\013cha"
  "nge_peer\030\002 \001(\0132\035.raft_cmdpb.ChangePeerRe"
  "quest\022+\n\005split\030\003 \001(\0132\030.raft_cmdpb.SplitR"
  "equestB\002\030\001\0222\n\013compact_log\030\004 \001(\0132\035.raft_c"
  "mdpb.CompactLogRequest\022:\n\017transfer_leade"
  "r\030\005 \001(\0132!.raft_cmdpb.TransferLeaderReque"
  "st\0222\n\013verify_hash\030\006 \001(\0132\035.raft_cmdpb.Ver"
  "ifyHashRequest\0226\n\rprepare_merge\030\007 \001(\0132\037."
  "raft_cmdpb.PrepareMergeRequest\0224\n\014commit"
  "_merge\030\010 \001(\0132\036.raft_cmdpb.CommitMergeReq"
  "uest\0228\n\016rollback_merge\030\t \001(\0132 .raft_cmdp"
  "b.RollbackMergeRequest\022-\n\006splits\030\n \001(\0132\035"
  ".raft_cmdpb.BatchSplitRequest\"\240\004\n\rAdminR"
  "esponse\022*\n\010cmd_type\030\001 \001(\0162\030.raft_cmdpb.A"
  "dminCmdType\0223\n\013change_peer\030\002 \001(\0132\036.raft_"
  "cmdpb.ChangePeerResponse\022,\n\005split\030\003 \001(\0132"
  "\031.raft_cmdpb.SplitResponseB\002\030\001\0223\n\013compac"
  "t_log\030\004 \001(\0132\036.raft_cmdpb.CompactLogRespo"
  "nse\022;\n\017transfer_leader\030\005 \001(\0132\".raft_cmdp"
  "b.TransferLeaderResponse\0223\n\013verify_hash\030"
  "\006 \001(\0132\036.raft_cmdpb.VerifyHashResponse\0227\n"
  "\rprepare_merge\030\007 \001(\0132 .raft_cmdpb.Prepar"
  "eMergeResponse\0225\n\014commit_merge\030\010 \001(\0132\037.r"
  "aft_cmdpb.CommitMergeResponse\0229\n\016rollbac"
  "k_merge\030\t \001(\0132!.raft_cmdpb.RollbackMerge"
  "Response\022.\n\006splits\030\n \001(\0132\036.raft_cmdpb.Ba"
  "tchSplitResponse\"\025\n\023RegionLeaderRequest\""
  "4\n\024RegionLeaderResponse\022\034\n\006leader\030\001 \001(\0132"
  "\014.metapb.Peer\"\025\n\023RegionDetailRequest\"T\n\024"
  "RegionDetailResponse\022\036\n\006region\030\001 \001(\0132\016.m"
  "etapb.Region\022\034\n\006leader\030\002 \001(\0132\014.metapb.Pe"
  "er\"\254\001\n\rStatusRequest\022+\n\010cmd_type\030\001 \001(\0162\031"
  ".raft_cmdpb.StatusCmdType\0226\n\rregion_lead"
  "er\030\002 \001(\0132\037.raft_cmdpb.RegionLeaderReques"
  "t\0226\n\rregion_detail\030\003 \001(\0132\037.raft_cmdpb.Re"
  "gionDetailRequest\"\257\001\n\016StatusResponse\022+\n\010"
  "cmd_type\030\001 \001(\0162\031.raft_cmdpb.StatusCmdTyp"
  "e\0227\n\rregion_leader\030\002 \001(\0132 .raft_cmdpb.Re"
  "gionLeaderResponse\0227\n\rregion_detail\030\003 \001("
  "\0132 .raft_cmdpb.RegionDetailResponse\"\260\001\n\021"
  "RaftRequestHeader\022\021\n\tregion_id\030\001 \001(\004\022\032\n\004"
  "peer\030\002 \001(\0132\014.metapb.Peer\022\023\n\013read_quorum\030"
  "\003 \001(\010\022\014\n\004uuid\030\004 \001(\014\022)\n\014region_epoch\030\005 \001("
  "\0132\023.metapb.RegionEpoch\022\014\n\004term\030\006 \001(\004\022\020\n\010"
  "sync_log\030\007 \001(\010\"W\n\022RaftResponseHeader\022\035\n\005"
  "error\030\001 \001(\0132\016.errorpb.Error\022\014\n\004uuid\030\002 \001("
  "\014\022\024\n\014current_term\030\003 \001(\004\"\312\001\n\016RaftCmdReque"
  "st\022-\n\006header\030\001 \001(\0132\035.raft_cmdpb.RaftRequ"
  "estHeader\022%\n\010requests\030\002 \003(\0132\023.raft_cmdpb"
  ".Request\022/\n\radmin_request\030\003 \001(\0132\030.raft_c"
  "mdpb.AdminRequest\0221\n\016status_request\030\004 \001("
  "\0132\031.raft_cmdpb.StatusRequest\"\322\001\n\017RaftCmd"
  "Response\022.\n\006header\030\001 \001(\0132\036.raft_cmdpb.Ra"
  "ftResponseHeader\022\'\n\tresponses\030\002 \003(\0132\024.ra"
  "ft_cmdpb.Response\0221\n\016admin_response\030\003 \001("
  "\0132\031.raft_cmdpb.AdminResponse\0223\n\017status_r"
  "esponse\030\004 \001(\0132\032.raft_cmdpb.StatusRespons"
  "e*l\n\007CmdType\022\013\n\007Invalid\020\000\022\007\n\003Get\020\001\022\007\n\003Pu"
  "t\020\003\022\n\n\006Delete\020\004\022\010\n\004Snap\020\005\022\014\n\010Prewrite\020\006\022"
  "\017\n\013DeleteRange\020\007\022\r\n\tIngestSST\020\010*\312\001\n\014Admi"
  "nCmdType\022\020\n\014InvalidAdmin\020\000\022\016\n\nChangePeer"
  "\020\001\022\r\n\005Split\020\002\032\002\010\001\022\016\n\nCompactLog\020\003\022\022\n\016Tra"
  "nsferLeader\020\004\022\017\n\013ComputeHash\020\005\022\016\n\nVerify"
  "Hash\020\006\022\020\n\014PrepareMerge\020\007\022\017\n\013CommitMerge\020"
  "\010\022\021\n\rRollbackMerge\020\t\022\016\n\nBatchSplit\020\n*F\n\r"
  "StatusCmdType\022\021\n\rInvalidStatus\020\000\022\020\n\014Regi"
  "onLeader\020\001\022\020\n\014RegionDetail\020\002B\032\n\030com.ping"
  "cap.tikv.kvprotob\006proto3"
,
  "raft_cmdpb.proto", &assign_descriptors_table_raft_5fcmdpb_2eproto, 5064,
};

void AddDescriptors_raft_5fcmdpb_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[4] =
  {
    ::AddDescriptors_metapb_2eproto,
    ::AddDescriptors_errorpb_2eproto,
    ::AddDescriptors_eraftpb_2eproto,
    ::AddDescriptors_import_5fsstpb_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_raft_5fcmdpb_2eproto, deps, 4);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_raft_5fcmdpb_2eproto = []() { AddDescriptors_raft_5fcmdpb_2eproto(); return true; }();
namespace raft_cmdpb {
const ::google::protobuf::EnumDescriptor* CmdType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_raft_5fcmdpb_2eproto);
  return file_level_enum_descriptors_raft_5fcmdpb_2eproto[0];
}
bool CmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AdminCmdType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_raft_5fcmdpb_2eproto);
  return file_level_enum_descriptors_raft_5fcmdpb_2eproto[1];
}
bool AdminCmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StatusCmdType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_raft_5fcmdpb_2eproto);
  return file_level_enum_descriptors_raft_5fcmdpb_2eproto[2];
}
bool StatusCmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GetRequest::InitAsDefaultInstance() {
}
class GetRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRequest::kCfFieldNumber;
const int GetRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRequest::GetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.GetRequest)
}
GetRequest::GetRequest(const GetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cf().size() > 0) {
    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.GetRequest)
}

void GetRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetRequest_raft_5fcmdpb_2eproto.base);
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.GetRequest)
  SharedDtor();
}

void GetRequest::SharedDtor() {
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRequest& GetRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.GetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // string cf = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        ctx->extra_parse_data().SetFieldName("raft_cmdpb.GetRequest.cf");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_cf();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // bytes key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_key();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.GetRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), static_cast<int>(this->cf().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raft_cmdpb.GetRequest.cf"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.GetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.GetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.GetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), static_cast<int>(this->cf().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_cmdpb.GetRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cf(), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.GetRequest)
}

::google::protobuf::uint8* GetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.GetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), static_cast<int>(this->cf().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_cmdpb.GetRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cf(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.GetRequest)
  return target;
}

size_t GetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.GetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cf = 1;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.GetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.GetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.GetRequest)
    MergeFrom(*source);
  }
}

void GetRequest::MergeFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.GetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void GetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {
  return true;
}

void GetRequest::Swap(GetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRequest::InternalSwap(GetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cf_.Swap(&other->cf_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetResponse::InitAsDefaultInstance() {
}
class GetResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetResponse::GetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.GetResponse)
}
GetResponse::GetResponse(const GetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.GetResponse)
}

void GetResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetResponse_raft_5fcmdpb_2eproto.base);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.GetResponse)
  SharedDtor();
}

void GetResponse::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetResponse& GetResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.GetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // bytes value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_value();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.GetResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.GetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.GetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.GetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.GetResponse)
}

::google::protobuf::uint8* GetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.GetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.GetResponse)
  return target;
}

size_t GetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.GetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.GetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.GetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.GetResponse)
    MergeFrom(*source);
  }
}

void GetResponse::MergeFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.GetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void GetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {
  return true;
}

void GetResponse::Swap(GetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetResponse::InternalSwap(GetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PutRequest::InitAsDefaultInstance() {
}
class PutRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutRequest::kCfFieldNumber;
const int PutRequest::kKeyFieldNumber;
const int PutRequest::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutRequest::PutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.PutRequest)
}
PutRequest::PutRequest(const PutRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cf().size() > 0) {
    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.PutRequest)
}

void PutRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PutRequest_raft_5fcmdpb_2eproto.base);
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PutRequest::~PutRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.PutRequest)
  SharedDtor();
}

void PutRequest::SharedDtor() {
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PutRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutRequest& PutRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PutRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void PutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.PutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PutRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PutRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // string cf = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        ctx->extra_parse_data().SetFieldName("raft_cmdpb.PutRequest.cf");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_cf();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // bytes key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_key();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // bytes value = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_value();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.PutRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), static_cast<int>(this->cf().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raft_cmdpb.PutRequest.cf"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.PutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.PutRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.PutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), static_cast<int>(this->cf().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_cmdpb.PutRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cf(), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.PutRequest)
}

::google::protobuf::uint8* PutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.PutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), static_cast<int>(this->cf().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_cmdpb.PutRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cf(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.PutRequest)
  return target;
}

size_t PutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.PutRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cf = 1;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.PutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PutRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.PutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.PutRequest)
    MergeFrom(*source);
  }
}

void PutRequest::MergeFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.PutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void PutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.PutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutRequest::CopyFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.PutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutRequest::IsInitialized() const {
  return true;
}

void PutRequest::Swap(PutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutRequest::InternalSwap(PutRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cf_.Swap(&other->cf_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata PutRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PutResponse::InitAsDefaultInstance() {
}
class PutResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutResponse::PutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.PutResponse)
}
PutResponse::PutResponse(const PutResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.PutResponse)
}

void PutResponse::SharedCtor() {
}

PutResponse::~PutResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.PutResponse)
  SharedDtor();
}

void PutResponse::SharedDtor() {
}

void PutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutResponse& PutResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PutResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void PutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.PutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PutResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PutResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.PutResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.PutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.PutResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.PutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.PutResponse)
}

::google::protobuf::uint8* PutResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.PutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.PutResponse)
  return target;
}

size_t PutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.PutResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.PutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PutResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PutResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.PutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.PutResponse)
    MergeFrom(*source);
  }
}

void PutResponse::MergeFrom(const PutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.PutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.PutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutResponse::CopyFrom(const PutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.PutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutResponse::IsInitialized() const {
  return true;
}

void PutResponse::Swap(PutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutResponse::InternalSwap(PutResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PutResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteRequest::InitAsDefaultInstance() {
}
class DeleteRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRequest::kCfFieldNumber;
const int DeleteRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRequest::DeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.DeleteRequest)
}
DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cf().size() > 0) {
    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.DeleteRequest)
}

void DeleteRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeleteRequest_raft_5fcmdpb_2eproto.base);
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeleteRequest::~DeleteRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.DeleteRequest)
  SharedDtor();
}

void DeleteRequest::SharedDtor() {
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteRequest& DeleteRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void DeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.DeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // string cf = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        ctx->extra_parse_data().SetFieldName("raft_cmdpb.DeleteRequest.cf");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_cf();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // bytes key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_key();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.DeleteRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), static_cast<int>(this->cf().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raft_cmdpb.DeleteRequest.cf"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.DeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.DeleteRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.DeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), static_cast<int>(this->cf().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_cmdpb.DeleteRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cf(), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.DeleteRequest)
}

::google::protobuf::uint8* DeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.DeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), static_cast<int>(this->cf().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_cmdpb.DeleteRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cf(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.DeleteRequest)
  return target;
}

size_t DeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.DeleteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cf = 1;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRequest* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.DeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.DeleteRequest)
    MergeFrom(*source);
  }
}

void DeleteRequest::MergeFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void DeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {
  return true;
}

void DeleteRequest::Swap(DeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRequest::InternalSwap(DeleteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cf_.Swap(&other->cf_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata DeleteRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteResponse::InitAsDefaultInstance() {
}
class DeleteResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteResponse::DeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.DeleteResponse)
}
DeleteResponse::DeleteResponse(const DeleteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.DeleteResponse)
}

void DeleteResponse::SharedCtor() {
}

DeleteResponse::~DeleteResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.DeleteResponse)
  SharedDtor();
}

void DeleteResponse::SharedDtor() {
}

void DeleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteResponse& DeleteResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void DeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.DeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.DeleteResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.DeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.DeleteResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.DeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.DeleteResponse)
}

::google::protobuf::uint8* DeleteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.DeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.DeleteResponse)
  return target;
}

size_t DeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.DeleteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.DeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteResponse* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.DeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.DeleteResponse)
    MergeFrom(*source);
  }
}

void DeleteResponse::MergeFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.DeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteResponse::CopyFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResponse::IsInitialized() const {
  return true;
}

void DeleteResponse::Swap(DeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteResponse::InternalSwap(DeleteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeleteResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteRangeRequest::InitAsDefaultInstance() {
}
class DeleteRangeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRangeRequest::kCfFieldNumber;
const int DeleteRangeRequest::kStartKeyFieldNumber;
const int DeleteRangeRequest::kEndKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRangeRequest::DeleteRangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.DeleteRangeRequest)
}
DeleteRangeRequest::DeleteRangeRequest(const DeleteRangeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cf().size() > 0) {
    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start_key().size() > 0) {
    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.end_key().size() > 0) {
    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.DeleteRangeRequest)
}

void DeleteRangeRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeleteRangeRequest_raft_5fcmdpb_2eproto.base);
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeleteRangeRequest::~DeleteRangeRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.DeleteRangeRequest)
  SharedDtor();
}

void DeleteRangeRequest::SharedDtor() {
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteRangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteRangeRequest& DeleteRangeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteRangeRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void DeleteRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.DeleteRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteRangeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteRangeRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // string cf = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        ctx->extra_parse_data().SetFieldName("raft_cmdpb.DeleteRangeRequest.cf");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_cf();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // bytes start_key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_start_key();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // bytes end_key = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_end_key();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteRangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.DeleteRangeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), static_cast<int>(this->cf().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raft_cmdpb.DeleteRangeRequest.cf"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes start_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes end_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.DeleteRangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.DeleteRangeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteRangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.DeleteRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), static_cast<int>(this->cf().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_cmdpb.DeleteRangeRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cf(), output);
  }

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key(), output);
  }

  // bytes end_key = 3;
  if (this->end_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->end_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.DeleteRangeRequest)
}

::google::protobuf::uint8* DeleteRangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.DeleteRangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), static_cast<int>(this->cf().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_cmdpb.DeleteRangeRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cf(), target);
  }

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_key(), target);
  }

  // bytes end_key = 3;
  if (this->end_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->end_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.DeleteRangeRequest)
  return target;
}

size_t DeleteRangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.DeleteRangeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cf = 1;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_key());
  }

  // bytes end_key = 3;
  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteRangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.DeleteRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRangeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteRangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.DeleteRangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.DeleteRangeRequest)
    MergeFrom(*source);
  }
}

void DeleteRangeRequest::MergeFrom(const DeleteRangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.DeleteRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.start_key().size() > 0) {

    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  if (from.end_key().size() > 0) {

    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
}

void DeleteRangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.DeleteRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRangeRequest::CopyFrom(const DeleteRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.DeleteRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRangeRequest::IsInitialized() const {
  return true;
}

void DeleteRangeRequest::Swap(DeleteRangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRangeRequest::InternalSwap(DeleteRangeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cf_.Swap(&other->cf_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_key_.Swap(&other->start_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  end_key_.Swap(&other->end_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata DeleteRangeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteRangeResponse::InitAsDefaultInstance() {
}
class DeleteRangeResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRangeResponse::DeleteRangeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.DeleteRangeResponse)
}
DeleteRangeResponse::DeleteRangeResponse(const DeleteRangeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.DeleteRangeResponse)
}

void DeleteRangeResponse::SharedCtor() {
}

DeleteRangeResponse::~DeleteRangeResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.DeleteRangeResponse)
  SharedDtor();
}

void DeleteRangeResponse::SharedDtor() {
}

void DeleteRangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteRangeResponse& DeleteRangeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteRangeResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void DeleteRangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.DeleteRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteRangeResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteRangeResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteRangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.DeleteRangeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.DeleteRangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.DeleteRangeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteRangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.DeleteRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.DeleteRangeResponse)
}

::google::protobuf::uint8* DeleteRangeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.DeleteRangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.DeleteRangeResponse)
  return target;
}

size_t DeleteRangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.DeleteRangeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteRangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.DeleteRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRangeResponse* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteRangeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.DeleteRangeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.DeleteRangeResponse)
    MergeFrom(*source);
  }
}

void DeleteRangeResponse::MergeFrom(const DeleteRangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.DeleteRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteRangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.DeleteRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRangeResponse::CopyFrom(const DeleteRangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.DeleteRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRangeResponse::IsInitialized() const {
  return true;
}

void DeleteRangeResponse::Swap(DeleteRangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRangeResponse::InternalSwap(DeleteRangeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeleteRangeResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SnapRequest::InitAsDefaultInstance() {
}
class SnapRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapRequest::SnapRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.SnapRequest)
}
SnapRequest::SnapRequest(const SnapRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.SnapRequest)
}

void SnapRequest::SharedCtor() {
}

SnapRequest::~SnapRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.SnapRequest)
  SharedDtor();
}

void SnapRequest::SharedDtor() {
}

void SnapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnapRequest& SnapRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SnapRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void SnapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.SnapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SnapRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SnapRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SnapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.SnapRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.SnapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.SnapRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SnapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.SnapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.SnapRequest)
}

::google::protobuf::uint8* SnapRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.SnapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.SnapRequest)
  return target;
}

size_t SnapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.SnapRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.SnapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SnapRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.SnapRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.SnapRequest)
    MergeFrom(*source);
  }
}

void SnapRequest::MergeFrom(const SnapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.SnapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SnapRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.SnapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapRequest::CopyFrom(const SnapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.SnapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapRequest::IsInitialized() const {
  return true;
}

void SnapRequest::Swap(SnapRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapRequest::InternalSwap(SnapRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SnapRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SnapResponse::InitAsDefaultInstance() {
  ::raft_cmdpb::_SnapResponse_default_instance_._instance.get_mutable()->region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}
class SnapResponse::HasBitSetters {
 public:
  static const ::metapb::Region& region(const SnapResponse* msg);
};

const ::metapb::Region&
SnapResponse::HasBitSetters::region(const SnapResponse* msg) {
  return *msg->region_;
}
void SnapResponse::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) {
    delete region_;
  }
  region_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapResponse::kRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapResponse::SnapResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.SnapResponse)
}
SnapResponse::SnapResponse(const SnapResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region()) {
    region_ = new ::metapb::Region(*from.region_);
  } else {
    region_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.SnapResponse)
}

void SnapResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SnapResponse_raft_5fcmdpb_2eproto.base);
  region_ = NULL;
}

SnapResponse::~SnapResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.SnapResponse)
  SharedDtor();
}

void SnapResponse::SharedDtor() {
  if (this != internal_default_instance()) delete region_;
}

void SnapResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnapResponse& SnapResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SnapResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void SnapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.SnapResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && region_ != NULL) {
    delete region_;
  }
  region_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SnapResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SnapResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .metapb.Region region = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Region::_InternalParse;
        object = msg->mutable_region();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SnapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.SnapResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Region region = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.SnapResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.SnapResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SnapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.SnapResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Region region = 1;
  if (this->has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::region(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.SnapResponse)
}

::google::protobuf::uint8* SnapResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.SnapResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Region region = 1;
  if (this->has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::region(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.SnapResponse)
  return target;
}

size_t SnapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.SnapResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metapb.Region region = 1;
  if (this->has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *region_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.SnapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SnapResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.SnapResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.SnapResponse)
    MergeFrom(*source);
  }
}

void SnapResponse::MergeFrom(const SnapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.SnapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
}

void SnapResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.SnapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapResponse::CopyFrom(const SnapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.SnapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapResponse::IsInitialized() const {
  return true;
}

void SnapResponse::Swap(SnapResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapResponse::InternalSwap(SnapResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(region_, other->region_);
}

::google::protobuf::Metadata SnapResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrewriteRequest::InitAsDefaultInstance() {
}
class PrewriteRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrewriteRequest::kKeyFieldNumber;
const int PrewriteRequest::kValueFieldNumber;
const int PrewriteRequest::kLockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrewriteRequest::PrewriteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.PrewriteRequest)
}
PrewriteRequest::PrewriteRequest(const PrewriteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  lock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lock().size() > 0) {
    lock_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lock_);
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.PrewriteRequest)
}

void PrewriteRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PrewriteRequest_raft_5fcmdpb_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PrewriteRequest::~PrewriteRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.PrewriteRequest)
  SharedDtor();
}

void PrewriteRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PrewriteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrewriteRequest& PrewriteRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrewriteRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void PrewriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.PrewriteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrewriteRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrewriteRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // bytes key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_key();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // bytes value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_value();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // bytes lock = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_lock();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrewriteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.PrewriteRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes lock = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.PrewriteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.PrewriteRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrewriteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.PrewriteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // bytes lock = 3;
  if (this->lock().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->lock(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.PrewriteRequest)
}

::google::protobuf::uint8* PrewriteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.PrewriteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // bytes lock = 3;
  if (this->lock().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->lock(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.PrewriteRequest)
  return target;
}

size_t PrewriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.PrewriteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // bytes lock = 3;
  if (this->lock().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->lock());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrewriteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.PrewriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrewriteRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PrewriteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.PrewriteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.PrewriteRequest)
    MergeFrom(*source);
  }
}

void PrewriteRequest::MergeFrom(const PrewriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.PrewriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.lock().size() > 0) {

    lock_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lock_);
  }
}

void PrewriteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.PrewriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrewriteRequest::CopyFrom(const PrewriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.PrewriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrewriteRequest::IsInitialized() const {
  return true;
}

void PrewriteRequest::Swap(PrewriteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrewriteRequest::InternalSwap(PrewriteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lock_.Swap(&other->lock_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata PrewriteRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrewriteResponse::InitAsDefaultInstance() {
}
class PrewriteResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrewriteResponse::PrewriteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.PrewriteResponse)
}
PrewriteResponse::PrewriteResponse(const PrewriteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.PrewriteResponse)
}

void PrewriteResponse::SharedCtor() {
}

PrewriteResponse::~PrewriteResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.PrewriteResponse)
  SharedDtor();
}

void PrewriteResponse::SharedDtor() {
}

void PrewriteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrewriteResponse& PrewriteResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrewriteResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void PrewriteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.PrewriteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrewriteResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrewriteResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrewriteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.PrewriteResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.PrewriteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.PrewriteResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrewriteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.PrewriteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.PrewriteResponse)
}

::google::protobuf::uint8* PrewriteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.PrewriteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.PrewriteResponse)
  return target;
}

size_t PrewriteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.PrewriteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrewriteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.PrewriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrewriteResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PrewriteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.PrewriteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.PrewriteResponse)
    MergeFrom(*source);
  }
}

void PrewriteResponse::MergeFrom(const PrewriteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.PrewriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PrewriteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.PrewriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrewriteResponse::CopyFrom(const PrewriteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.PrewriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrewriteResponse::IsInitialized() const {
  return true;
}

void PrewriteResponse::Swap(PrewriteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrewriteResponse::InternalSwap(PrewriteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PrewriteResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void IngestSSTRequest::InitAsDefaultInstance() {
  ::raft_cmdpb::_IngestSSTRequest_default_instance_._instance.get_mutable()->sst_ = const_cast< ::import_sstpb::SSTMeta*>(
      ::import_sstpb::SSTMeta::internal_default_instance());
}
class IngestSSTRequest::HasBitSetters {
 public:
  static const ::import_sstpb::SSTMeta& sst(const IngestSSTRequest* msg);
};

const ::import_sstpb::SSTMeta&
IngestSSTRequest::HasBitSetters::sst(const IngestSSTRequest* msg) {
  return *msg->sst_;
}
void IngestSSTRequest::clear_sst() {
  if (GetArenaNoVirtual() == NULL && sst_ != NULL) {
    delete sst_;
  }
  sst_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IngestSSTRequest::kSstFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IngestSSTRequest::IngestSSTRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.IngestSSTRequest)
}
IngestSSTRequest::IngestSSTRequest(const IngestSSTRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sst()) {
    sst_ = new ::import_sstpb::SSTMeta(*from.sst_);
  } else {
    sst_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.IngestSSTRequest)
}

void IngestSSTRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_IngestSSTRequest_raft_5fcmdpb_2eproto.base);
  sst_ = NULL;
}

IngestSSTRequest::~IngestSSTRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.IngestSSTRequest)
  SharedDtor();
}

void IngestSSTRequest::SharedDtor() {
  if (this != internal_default_instance()) delete sst_;
}

void IngestSSTRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IngestSSTRequest& IngestSSTRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_IngestSSTRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void IngestSSTRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.IngestSSTRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sst_ != NULL) {
    delete sst_;
  }
  sst_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IngestSSTRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IngestSSTRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .import_sstpb.SSTMeta sst = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::import_sstpb::SSTMeta::_InternalParse;
        object = msg->mutable_sst();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IngestSSTRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.IngestSSTRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .import_sstpb.SSTMeta sst = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sst()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.IngestSSTRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.IngestSSTRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IngestSSTRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.IngestSSTRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .import_sstpb.SSTMeta sst = 1;
  if (this->has_sst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::sst(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.IngestSSTRequest)
}

::google::protobuf::uint8* IngestSSTRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.IngestSSTRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .import_sstpb.SSTMeta sst = 1;
  if (this->has_sst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::sst(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.IngestSSTRequest)
  return target;
}

size_t IngestSSTRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.IngestSSTRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .import_sstpb.SSTMeta sst = 1;
  if (this->has_sst()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sst_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IngestSSTRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.IngestSSTRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IngestSSTRequest* source =
      ::google::protobuf::DynamicCastToGenerated<IngestSSTRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.IngestSSTRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.IngestSSTRequest)
    MergeFrom(*source);
  }
}

void IngestSSTRequest::MergeFrom(const IngestSSTRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.IngestSSTRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sst()) {
    mutable_sst()->::import_sstpb::SSTMeta::MergeFrom(from.sst());
  }
}

void IngestSSTRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.IngestSSTRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IngestSSTRequest::CopyFrom(const IngestSSTRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.IngestSSTRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IngestSSTRequest::IsInitialized() const {
  return true;
}

void IngestSSTRequest::Swap(IngestSSTRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IngestSSTRequest::InternalSwap(IngestSSTRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sst_, other->sst_);
}

::google::protobuf::Metadata IngestSSTRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void IngestSSTResponse::InitAsDefaultInstance() {
}
class IngestSSTResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IngestSSTResponse::IngestSSTResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.IngestSSTResponse)
}
IngestSSTResponse::IngestSSTResponse(const IngestSSTResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.IngestSSTResponse)
}

void IngestSSTResponse::SharedCtor() {
}

IngestSSTResponse::~IngestSSTResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.IngestSSTResponse)
  SharedDtor();
}

void IngestSSTResponse::SharedDtor() {
}

void IngestSSTResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IngestSSTResponse& IngestSSTResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_IngestSSTResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void IngestSSTResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.IngestSSTResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IngestSSTResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IngestSSTResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IngestSSTResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.IngestSSTResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.IngestSSTResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.IngestSSTResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IngestSSTResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.IngestSSTResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.IngestSSTResponse)
}

::google::protobuf::uint8* IngestSSTResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.IngestSSTResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.IngestSSTResponse)
  return target;
}

size_t IngestSSTResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.IngestSSTResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IngestSSTResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.IngestSSTResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IngestSSTResponse* source =
      ::google::protobuf::DynamicCastToGenerated<IngestSSTResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.IngestSSTResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.IngestSSTResponse)
    MergeFrom(*source);
  }
}

void IngestSSTResponse::MergeFrom(const IngestSSTResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.IngestSSTResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void IngestSSTResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.IngestSSTResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IngestSSTResponse::CopyFrom(const IngestSSTResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.IngestSSTResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IngestSSTResponse::IsInitialized() const {
  return true;
}

void IngestSSTResponse::Swap(IngestSSTResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IngestSSTResponse::InternalSwap(IngestSSTResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IngestSSTResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Request::InitAsDefaultInstance() {
  ::raft_cmdpb::_Request_default_instance_._instance.get_mutable()->get_ = const_cast< ::raft_cmdpb::GetRequest*>(
      ::raft_cmdpb::GetRequest::internal_default_instance());
  ::raft_cmdpb::_Request_default_instance_._instance.get_mutable()->put_ = const_cast< ::raft_cmdpb::PutRequest*>(
      ::raft_cmdpb::PutRequest::internal_default_instance());
  ::raft_cmdpb::_Request_default_instance_._instance.get_mutable()->delete__ = const_cast< ::raft_cmdpb::DeleteRequest*>(
      ::raft_cmdpb::DeleteRequest::internal_default_instance());
  ::raft_cmdpb::_Request_default_instance_._instance.get_mutable()->snap_ = const_cast< ::raft_cmdpb::SnapRequest*>(
      ::raft_cmdpb::SnapRequest::internal_default_instance());
  ::raft_cmdpb::_Request_default_instance_._instance.get_mutable()->prewrite_ = const_cast< ::raft_cmdpb::PrewriteRequest*>(
      ::raft_cmdpb::PrewriteRequest::internal_default_instance());
  ::raft_cmdpb::_Request_default_instance_._instance.get_mutable()->delete_range_ = const_cast< ::raft_cmdpb::DeleteRangeRequest*>(
      ::raft_cmdpb::DeleteRangeRequest::internal_default_instance());
  ::raft_cmdpb::_Request_default_instance_._instance.get_mutable()->ingest_sst_ = const_cast< ::raft_cmdpb::IngestSSTRequest*>(
      ::raft_cmdpb::IngestSSTRequest::internal_default_instance());
}
class Request::HasBitSetters {
 public:
  static const ::raft_cmdpb::GetRequest& get(const Request* msg);
  static const ::raft_cmdpb::PutRequest& put(const Request* msg);
  static const ::raft_cmdpb::DeleteRequest& delete_(const Request* msg);
  static const ::raft_cmdpb::SnapRequest& snap(const Request* msg);
  static const ::raft_cmdpb::PrewriteRequest& prewrite(const Request* msg);
  static const ::raft_cmdpb::DeleteRangeRequest& delete_range(const Request* msg);
  static const ::raft_cmdpb::IngestSSTRequest& ingest_sst(const Request* msg);
};

const ::raft_cmdpb::GetRequest&
Request::HasBitSetters::get(const Request* msg) {
  return *msg->get_;
}
const ::raft_cmdpb::PutRequest&
Request::HasBitSetters::put(const Request* msg) {
  return *msg->put_;
}
const ::raft_cmdpb::DeleteRequest&
Request::HasBitSetters::delete_(const Request* msg) {
  return *msg->delete__;
}
const ::raft_cmdpb::SnapRequest&
Request::HasBitSetters::snap(const Request* msg) {
  return *msg->snap_;
}
const ::raft_cmdpb::PrewriteRequest&
Request::HasBitSetters::prewrite(const Request* msg) {
  return *msg->prewrite_;
}
const ::raft_cmdpb::DeleteRangeRequest&
Request::HasBitSetters::delete_range(const Request* msg) {
  return *msg->delete_range_;
}
const ::raft_cmdpb::IngestSSTRequest&
Request::HasBitSetters::ingest_sst(const Request* msg) {
  return *msg->ingest_sst_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kCmdTypeFieldNumber;
const int Request::kGetFieldNumber;
const int Request::kPutFieldNumber;
const int Request::kDeleteFieldNumber;
const int Request::kSnapFieldNumber;
const int Request::kPrewriteFieldNumber;
const int Request::kDeleteRangeFieldNumber;
const int Request::kIngestSstFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_get()) {
    get_ = new ::raft_cmdpb::GetRequest(*from.get_);
  } else {
    get_ = NULL;
  }
  if (from.has_put()) {
    put_ = new ::raft_cmdpb::PutRequest(*from.put_);
  } else {
    put_ = NULL;
  }
  if (from.has_delete_()) {
    delete__ = new ::raft_cmdpb::DeleteRequest(*from.delete__);
  } else {
    delete__ = NULL;
  }
  if (from.has_snap()) {
    snap_ = new ::raft_cmdpb::SnapRequest(*from.snap_);
  } else {
    snap_ = NULL;
  }
  if (from.has_prewrite()) {
    prewrite_ = new ::raft_cmdpb::PrewriteRequest(*from.prewrite_);
  } else {
    prewrite_ = NULL;
  }
  if (from.has_delete_range()) {
    delete_range_ = new ::raft_cmdpb::DeleteRangeRequest(*from.delete_range_);
  } else {
    delete_range_ = NULL;
  }
  if (from.has_ingest_sst()) {
    ingest_sst_ = new ::raft_cmdpb::IngestSSTRequest(*from.ingest_sst_);
  } else {
    ingest_sst_ = NULL;
  }
  cmd_type_ = from.cmd_type_;
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.Request)
}

void Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Request_raft_5fcmdpb_2eproto.base);
  ::memset(&get_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_type_) -
      reinterpret_cast<char*>(&get_)) + sizeof(cmd_type_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != internal_default_instance()) delete get_;
  if (this != internal_default_instance()) delete put_;
  if (this != internal_default_instance()) delete delete__;
  if (this != internal_default_instance()) delete snap_;
  if (this != internal_default_instance()) delete prewrite_;
  if (this != internal_default_instance()) delete delete_range_;
  if (this != internal_default_instance()) delete ingest_sst_;
}

void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Request_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && get_ != NULL) {
    delete get_;
  }
  get_ = NULL;
  if (GetArenaNoVirtual() == NULL && put_ != NULL) {
    delete put_;
  }
  put_ = NULL;
  if (GetArenaNoVirtual() == NULL && delete__ != NULL) {
    delete delete__;
  }
  delete__ = NULL;
  if (GetArenaNoVirtual() == NULL && snap_ != NULL) {
    delete snap_;
  }
  snap_ = NULL;
  if (GetArenaNoVirtual() == NULL && prewrite_ != NULL) {
    delete prewrite_;
  }
  prewrite_ = NULL;
  if (GetArenaNoVirtual() == NULL && delete_range_ != NULL) {
    delete delete_range_;
  }
  delete_range_ = NULL;
  if (GetArenaNoVirtual() == NULL && ingest_sst_ != NULL) {
    delete ingest_sst_;
  }
  ingest_sst_ = NULL;
  cmd_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Request*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .raft_cmdpb.CmdType cmd_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::raft_cmdpb::CmdType value = static_cast<::raft_cmdpb::CmdType>(val);
        msg->set_cmd_type(value);
        break;
      }
      // .raft_cmdpb.GetRequest get = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::GetRequest::_InternalParse;
        object = msg->mutable_get();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.PutRequest put = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::PutRequest::_InternalParse;
        object = msg->mutable_put();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.DeleteRequest delete = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::DeleteRequest::_InternalParse;
        object = msg->mutable_delete_();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.SnapRequest snap = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::SnapRequest::_InternalParse;
        object = msg->mutable_snap();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.PrewriteRequest prewrite = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::PrewriteRequest::_InternalParse;
        object = msg->mutable_prewrite();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.DeleteRangeRequest delete_range = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::DeleteRangeRequest::_InternalParse;
        object = msg->mutable_delete_range();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.IngestSSTRequest ingest_sst = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::IngestSSTRequest::_InternalParse;
        object = msg->mutable_ingest_sst();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .raft_cmdpb.CmdType cmd_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_type(static_cast< ::raft_cmdpb::CmdType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.GetRequest get = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.PutRequest put = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_put()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.DeleteRequest delete = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.SnapRequest snap = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_snap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.PrewriteRequest prewrite = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prewrite()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.DeleteRangeRequest delete_range = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delete_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.IngestSSTRequest ingest_sst = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ingest_sst()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // .raft_cmdpb.GetRequest get = 2;
  if (this->has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::get(this), output);
  }

  // .raft_cmdpb.PutRequest put = 4;
  if (this->has_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::put(this), output);
  }

  // .raft_cmdpb.DeleteRequest delete = 5;
  if (this->has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::delete_(this), output);
  }

  // .raft_cmdpb.SnapRequest snap = 6;
  if (this->has_snap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::snap(this), output);
  }

  // .raft_cmdpb.PrewriteRequest prewrite = 7;
  if (this->has_prewrite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::prewrite(this), output);
  }

  // .raft_cmdpb.DeleteRangeRequest delete_range = 8;
  if (this->has_delete_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::delete_range(this), output);
  }

  // .raft_cmdpb.IngestSSTRequest ingest_sst = 9;
  if (this->has_ingest_sst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::ingest_sst(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // .raft_cmdpb.GetRequest get = 2;
  if (this->has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::get(this), deterministic, target);
  }

  // .raft_cmdpb.PutRequest put = 4;
  if (this->has_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::put(this), deterministic, target);
  }

  // .raft_cmdpb.DeleteRequest delete = 5;
  if (this->has_delete_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::delete_(this), deterministic, target);
  }

  // .raft_cmdpb.SnapRequest snap = 6;
  if (this->has_snap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::snap(this), deterministic, target);
  }

  // .raft_cmdpb.PrewriteRequest prewrite = 7;
  if (this->has_prewrite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::prewrite(this), deterministic, target);
  }

  // .raft_cmdpb.DeleteRangeRequest delete_range = 8;
  if (this->has_delete_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::delete_range(this), deterministic, target);
  }

  // .raft_cmdpb.IngestSSTRequest ingest_sst = 9;
  if (this->has_ingest_sst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::ingest_sst(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .raft_cmdpb.GetRequest get = 2;
  if (this->has_get()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *get_);
  }

  // .raft_cmdpb.PutRequest put = 4;
  if (this->has_put()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *put_);
  }

  // .raft_cmdpb.DeleteRequest delete = 5;
  if (this->has_delete_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *delete__);
  }

  // .raft_cmdpb.SnapRequest snap = 6;
  if (this->has_snap()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *snap_);
  }

  // .raft_cmdpb.PrewriteRequest prewrite = 7;
  if (this->has_prewrite()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *prewrite_);
  }

  // .raft_cmdpb.DeleteRangeRequest delete_range = 8;
  if (this->has_delete_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *delete_range_);
  }

  // .raft_cmdpb.IngestSSTRequest ingest_sst = 9;
  if (this->has_ingest_sst()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ingest_sst_);
  }

  // .raft_cmdpb.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::google::protobuf::DynamicCastToGenerated<Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_get()) {
    mutable_get()->::raft_cmdpb::GetRequest::MergeFrom(from.get());
  }
  if (from.has_put()) {
    mutable_put()->::raft_cmdpb::PutRequest::MergeFrom(from.put());
  }
  if (from.has_delete_()) {
    mutable_delete_()->::raft_cmdpb::DeleteRequest::MergeFrom(from.delete_());
  }
  if (from.has_snap()) {
    mutable_snap()->::raft_cmdpb::SnapRequest::MergeFrom(from.snap());
  }
  if (from.has_prewrite()) {
    mutable_prewrite()->::raft_cmdpb::PrewriteRequest::MergeFrom(from.prewrite());
  }
  if (from.has_delete_range()) {
    mutable_delete_range()->::raft_cmdpb::DeleteRangeRequest::MergeFrom(from.delete_range());
  }
  if (from.has_ingest_sst()) {
    mutable_ingest_sst()->::raft_cmdpb::IngestSSTRequest::MergeFrom(from.ingest_sst());
  }
  if (from.cmd_type() != 0) {
    set_cmd_type(from.cmd_type());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(get_, other->get_);
  swap(put_, other->put_);
  swap(delete__, other->delete__);
  swap(snap_, other->snap_);
  swap(prewrite_, other->prewrite_);
  swap(delete_range_, other->delete_range_);
  swap(ingest_sst_, other->ingest_sst_);
  swap(cmd_type_, other->cmd_type_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Response::InitAsDefaultInstance() {
  ::raft_cmdpb::_Response_default_instance_._instance.get_mutable()->get_ = const_cast< ::raft_cmdpb::GetResponse*>(
      ::raft_cmdpb::GetResponse::internal_default_instance());
  ::raft_cmdpb::_Response_default_instance_._instance.get_mutable()->put_ = const_cast< ::raft_cmdpb::PutResponse*>(
      ::raft_cmdpb::PutResponse::internal_default_instance());
  ::raft_cmdpb::_Response_default_instance_._instance.get_mutable()->delete__ = const_cast< ::raft_cmdpb::DeleteResponse*>(
      ::raft_cmdpb::DeleteResponse::internal_default_instance());
  ::raft_cmdpb::_Response_default_instance_._instance.get_mutable()->snap_ = const_cast< ::raft_cmdpb::SnapResponse*>(
      ::raft_cmdpb::SnapResponse::internal_default_instance());
  ::raft_cmdpb::_Response_default_instance_._instance.get_mutable()->prewrite_ = const_cast< ::raft_cmdpb::PrewriteResponse*>(
      ::raft_cmdpb::PrewriteResponse::internal_default_instance());
  ::raft_cmdpb::_Response_default_instance_._instance.get_mutable()->delte_range_ = const_cast< ::raft_cmdpb::DeleteRangeResponse*>(
      ::raft_cmdpb::DeleteRangeResponse::internal_default_instance());
  ::raft_cmdpb::_Response_default_instance_._instance.get_mutable()->ingest_sst_ = const_cast< ::raft_cmdpb::IngestSSTResponse*>(
      ::raft_cmdpb::IngestSSTResponse::internal_default_instance());
}
class Response::HasBitSetters {
 public:
  static const ::raft_cmdpb::GetResponse& get(const Response* msg);
  static const ::raft_cmdpb::PutResponse& put(const Response* msg);
  static const ::raft_cmdpb::DeleteResponse& delete_(const Response* msg);
  static const ::raft_cmdpb::SnapResponse& snap(const Response* msg);
  static const ::raft_cmdpb::PrewriteResponse& prewrite(const Response* msg);
  static const ::raft_cmdpb::DeleteRangeResponse& delte_range(const Response* msg);
  static const ::raft_cmdpb::IngestSSTResponse& ingest_sst(const Response* msg);
};

const ::raft_cmdpb::GetResponse&
Response::HasBitSetters::get(const Response* msg) {
  return *msg->get_;
}
const ::raft_cmdpb::PutResponse&
Response::HasBitSetters::put(const Response* msg) {
  return *msg->put_;
}
const ::raft_cmdpb::DeleteResponse&
Response::HasBitSetters::delete_(const Response* msg) {
  return *msg->delete__;
}
const ::raft_cmdpb::SnapResponse&
Response::HasBitSetters::snap(const Response* msg) {
  return *msg->snap_;
}
const ::raft_cmdpb::PrewriteResponse&
Response::HasBitSetters::prewrite(const Response* msg) {
  return *msg->prewrite_;
}
const ::raft_cmdpb::DeleteRangeResponse&
Response::HasBitSetters::delte_range(const Response* msg) {
  return *msg->delte_range_;
}
const ::raft_cmdpb::IngestSSTResponse&
Response::HasBitSetters::ingest_sst(const Response* msg) {
  return *msg->ingest_sst_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kCmdTypeFieldNumber;
const int Response::kGetFieldNumber;
const int Response::kPutFieldNumber;
const int Response::kDeleteFieldNumber;
const int Response::kSnapFieldNumber;
const int Response::kPrewriteFieldNumber;
const int Response::kDelteRangeFieldNumber;
const int Response::kIngestSstFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.Response)
}
Response::Response(const Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_get()) {
    get_ = new ::raft_cmdpb::GetResponse(*from.get_);
  } else {
    get_ = NULL;
  }
  if (from.has_put()) {
    put_ = new ::raft_cmdpb::PutResponse(*from.put_);
  } else {
    put_ = NULL;
  }
  if (from.has_delete_()) {
    delete__ = new ::raft_cmdpb::DeleteResponse(*from.delete__);
  } else {
    delete__ = NULL;
  }
  if (from.has_snap()) {
    snap_ = new ::raft_cmdpb::SnapResponse(*from.snap_);
  } else {
    snap_ = NULL;
  }
  if (from.has_prewrite()) {
    prewrite_ = new ::raft_cmdpb::PrewriteResponse(*from.prewrite_);
  } else {
    prewrite_ = NULL;
  }
  if (from.has_delte_range()) {
    delte_range_ = new ::raft_cmdpb::DeleteRangeResponse(*from.delte_range_);
  } else {
    delte_range_ = NULL;
  }
  if (from.has_ingest_sst()) {
    ingest_sst_ = new ::raft_cmdpb::IngestSSTResponse(*from.ingest_sst_);
  } else {
    ingest_sst_ = NULL;
  }
  cmd_type_ = from.cmd_type_;
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.Response)
}

void Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Response_raft_5fcmdpb_2eproto.base);
  ::memset(&get_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_type_) -
      reinterpret_cast<char*>(&get_)) + sizeof(cmd_type_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != internal_default_instance()) delete get_;
  if (this != internal_default_instance()) delete put_;
  if (this != internal_default_instance()) delete delete__;
  if (this != internal_default_instance()) delete snap_;
  if (this != internal_default_instance()) delete prewrite_;
  if (this != internal_default_instance()) delete delte_range_;
  if (this != internal_default_instance()) delete ingest_sst_;
}

void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response& Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Response_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && get_ != NULL) {
    delete get_;
  }
  get_ = NULL;
  if (GetArenaNoVirtual() == NULL && put_ != NULL) {
    delete put_;
  }
  put_ = NULL;
  if (GetArenaNoVirtual() == NULL && delete__ != NULL) {
    delete delete__;
  }
  delete__ = NULL;
  if (GetArenaNoVirtual() == NULL && snap_ != NULL) {
    delete snap_;
  }
  snap_ = NULL;
  if (GetArenaNoVirtual() == NULL && prewrite_ != NULL) {
    delete prewrite_;
  }
  prewrite_ = NULL;
  if (GetArenaNoVirtual() == NULL && delte_range_ != NULL) {
    delete delte_range_;
  }
  delte_range_ = NULL;
  if (GetArenaNoVirtual() == NULL && ingest_sst_ != NULL) {
    delete ingest_sst_;
  }
  ingest_sst_ = NULL;
  cmd_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Response*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .raft_cmdpb.CmdType cmd_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::raft_cmdpb::CmdType value = static_cast<::raft_cmdpb::CmdType>(val);
        msg->set_cmd_type(value);
        break;
      }
      // .raft_cmdpb.GetResponse get = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::GetResponse::_InternalParse;
        object = msg->mutable_get();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.PutResponse put = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::PutResponse::_InternalParse;
        object = msg->mutable_put();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.DeleteResponse delete = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::DeleteResponse::_InternalParse;
        object = msg->mutable_delete_();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.SnapResponse snap = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::SnapResponse::_InternalParse;
        object = msg->mutable_snap();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.PrewriteResponse prewrite = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::PrewriteResponse::_InternalParse;
        object = msg->mutable_prewrite();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.DeleteRangeResponse delte_range = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::DeleteRangeResponse::_InternalParse;
        object = msg->mutable_delte_range();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.IngestSSTResponse ingest_sst = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::IngestSSTResponse::_InternalParse;
        object = msg->mutable_ingest_sst();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .raft_cmdpb.CmdType cmd_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_type(static_cast< ::raft_cmdpb::CmdType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.GetResponse get = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.PutResponse put = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_put()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.DeleteResponse delete = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.SnapResponse snap = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_snap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.PrewriteResponse prewrite = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prewrite()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.DeleteRangeResponse delte_range = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delte_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.IngestSSTResponse ingest_sst = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ingest_sst()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // .raft_cmdpb.GetResponse get = 2;
  if (this->has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::get(this), output);
  }

  // .raft_cmdpb.PutResponse put = 4;
  if (this->has_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::put(this), output);
  }

  // .raft_cmdpb.DeleteResponse delete = 5;
  if (this->has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::delete_(this), output);
  }

  // .raft_cmdpb.SnapResponse snap = 6;
  if (this->has_snap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::snap(this), output);
  }

  // .raft_cmdpb.PrewriteResponse prewrite = 7;
  if (this->has_prewrite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::prewrite(this), output);
  }

  // .raft_cmdpb.DeleteRangeResponse delte_range = 8;
  if (this->has_delte_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::delte_range(this), output);
  }

  // .raft_cmdpb.IngestSSTResponse ingest_sst = 9;
  if (this->has_ingest_sst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::ingest_sst(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // .raft_cmdpb.GetResponse get = 2;
  if (this->has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::get(this), deterministic, target);
  }

  // .raft_cmdpb.PutResponse put = 4;
  if (this->has_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::put(this), deterministic, target);
  }

  // .raft_cmdpb.DeleteResponse delete = 5;
  if (this->has_delete_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::delete_(this), deterministic, target);
  }

  // .raft_cmdpb.SnapResponse snap = 6;
  if (this->has_snap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::snap(this), deterministic, target);
  }

  // .raft_cmdpb.PrewriteResponse prewrite = 7;
  if (this->has_prewrite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::prewrite(this), deterministic, target);
  }

  // .raft_cmdpb.DeleteRangeResponse delte_range = 8;
  if (this->has_delte_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::delte_range(this), deterministic, target);
  }

  // .raft_cmdpb.IngestSSTResponse ingest_sst = 9;
  if (this->has_ingest_sst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::ingest_sst(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .raft_cmdpb.GetResponse get = 2;
  if (this->has_get()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *get_);
  }

  // .raft_cmdpb.PutResponse put = 4;
  if (this->has_put()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *put_);
  }

  // .raft_cmdpb.DeleteResponse delete = 5;
  if (this->has_delete_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *delete__);
  }

  // .raft_cmdpb.SnapResponse snap = 6;
  if (this->has_snap()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *snap_);
  }

  // .raft_cmdpb.PrewriteResponse prewrite = 7;
  if (this->has_prewrite()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *prewrite_);
  }

  // .raft_cmdpb.DeleteRangeResponse delte_range = 8;
  if (this->has_delte_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *delte_range_);
  }

  // .raft_cmdpb.IngestSSTResponse ingest_sst = 9;
  if (this->has_ingest_sst()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ingest_sst_);
  }

  // .raft_cmdpb.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::google::protobuf::DynamicCastToGenerated<Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_get()) {
    mutable_get()->::raft_cmdpb::GetResponse::MergeFrom(from.get());
  }
  if (from.has_put()) {
    mutable_put()->::raft_cmdpb::PutResponse::MergeFrom(from.put());
  }
  if (from.has_delete_()) {
    mutable_delete_()->::raft_cmdpb::DeleteResponse::MergeFrom(from.delete_());
  }
  if (from.has_snap()) {
    mutable_snap()->::raft_cmdpb::SnapResponse::MergeFrom(from.snap());
  }
  if (from.has_prewrite()) {
    mutable_prewrite()->::raft_cmdpb::PrewriteResponse::MergeFrom(from.prewrite());
  }
  if (from.has_delte_range()) {
    mutable_delte_range()->::raft_cmdpb::DeleteRangeResponse::MergeFrom(from.delte_range());
  }
  if (from.has_ingest_sst()) {
    mutable_ingest_sst()->::raft_cmdpb::IngestSSTResponse::MergeFrom(from.ingest_sst());
  }
  if (from.cmd_type() != 0) {
    set_cmd_type(from.cmd_type());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(get_, other->get_);
  swap(put_, other->put_);
  swap(delete__, other->delete__);
  swap(snap_, other->snap_);
  swap(prewrite_, other->prewrite_);
  swap(delte_range_, other->delte_range_);
  swap(ingest_sst_, other->ingest_sst_);
  swap(cmd_type_, other->cmd_type_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ChangePeerRequest::InitAsDefaultInstance() {
  ::raft_cmdpb::_ChangePeerRequest_default_instance_._instance.get_mutable()->peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}
class ChangePeerRequest::HasBitSetters {
 public:
  static const ::metapb::Peer& peer(const ChangePeerRequest* msg);
};

const ::metapb::Peer&
ChangePeerRequest::HasBitSetters::peer(const ChangePeerRequest* msg) {
  return *msg->peer_;
}
void ChangePeerRequest::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangePeerRequest::kChangeTypeFieldNumber;
const int ChangePeerRequest::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangePeerRequest::ChangePeerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.ChangePeerRequest)
}
ChangePeerRequest::ChangePeerRequest(const ChangePeerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peer()) {
    peer_ = new ::metapb::Peer(*from.peer_);
  } else {
    peer_ = NULL;
  }
  change_type_ = from.change_type_;
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.ChangePeerRequest)
}

void ChangePeerRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ChangePeerRequest_raft_5fcmdpb_2eproto.base);
  ::memset(&peer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_type_) -
      reinterpret_cast<char*>(&peer_)) + sizeof(change_type_));
}

ChangePeerRequest::~ChangePeerRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.ChangePeerRequest)
  SharedDtor();
}

void ChangePeerRequest::SharedDtor() {
  if (this != internal_default_instance()) delete peer_;
}

void ChangePeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangePeerRequest& ChangePeerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ChangePeerRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void ChangePeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.ChangePeerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
  change_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChangePeerRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ChangePeerRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .eraftpb.ConfChangeType change_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::eraftpb::ConfChangeType value = static_cast<::eraftpb::ConfChangeType>(val);
        msg->set_change_type(value);
        break;
      }
      // .metapb.Peer peer = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Peer::_InternalParse;
        object = msg->mutable_peer();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChangePeerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.ChangePeerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .eraftpb.ConfChangeType change_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_change_type(static_cast< ::eraftpb::ConfChangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Peer peer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.ChangePeerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.ChangePeerRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChangePeerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.ChangePeerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .eraftpb.ConfChangeType change_type = 1;
  if (this->change_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->change_type(), output);
  }

  // .metapb.Peer peer = 2;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::peer(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.ChangePeerRequest)
}

::google::protobuf::uint8* ChangePeerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.ChangePeerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .eraftpb.ConfChangeType change_type = 1;
  if (this->change_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->change_type(), target);
  }

  // .metapb.Peer peer = 2;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::peer(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.ChangePeerRequest)
  return target;
}

size_t ChangePeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.ChangePeerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metapb.Peer peer = 2;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  // .eraftpb.ConfChangeType change_type = 1;
  if (this->change_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangePeerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.ChangePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangePeerRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ChangePeerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.ChangePeerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.ChangePeerRequest)
    MergeFrom(*source);
  }
}

void ChangePeerRequest::MergeFrom(const ChangePeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.ChangePeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
  if (from.change_type() != 0) {
    set_change_type(from.change_type());
  }
}

void ChangePeerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.ChangePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePeerRequest::CopyFrom(const ChangePeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.ChangePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePeerRequest::IsInitialized() const {
  return true;
}

void ChangePeerRequest::Swap(ChangePeerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangePeerRequest::InternalSwap(ChangePeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(peer_, other->peer_);
  swap(change_type_, other->change_type_);
}

::google::protobuf::Metadata ChangePeerRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ChangePeerResponse::InitAsDefaultInstance() {
  ::raft_cmdpb::_ChangePeerResponse_default_instance_._instance.get_mutable()->region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}
class ChangePeerResponse::HasBitSetters {
 public:
  static const ::metapb::Region& region(const ChangePeerResponse* msg);
};

const ::metapb::Region&
ChangePeerResponse::HasBitSetters::region(const ChangePeerResponse* msg) {
  return *msg->region_;
}
void ChangePeerResponse::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) {
    delete region_;
  }
  region_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangePeerResponse::kRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangePeerResponse::ChangePeerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.ChangePeerResponse)
}
ChangePeerResponse::ChangePeerResponse(const ChangePeerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region()) {
    region_ = new ::metapb::Region(*from.region_);
  } else {
    region_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.ChangePeerResponse)
}

void ChangePeerResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ChangePeerResponse_raft_5fcmdpb_2eproto.base);
  region_ = NULL;
}

ChangePeerResponse::~ChangePeerResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.ChangePeerResponse)
  SharedDtor();
}

void ChangePeerResponse::SharedDtor() {
  if (this != internal_default_instance()) delete region_;
}

void ChangePeerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangePeerResponse& ChangePeerResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ChangePeerResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void ChangePeerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.ChangePeerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && region_ != NULL) {
    delete region_;
  }
  region_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChangePeerResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ChangePeerResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .metapb.Region region = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Region::_InternalParse;
        object = msg->mutable_region();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChangePeerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.ChangePeerResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Region region = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.ChangePeerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.ChangePeerResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChangePeerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.ChangePeerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Region region = 1;
  if (this->has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::region(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.ChangePeerResponse)
}

::google::protobuf::uint8* ChangePeerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.ChangePeerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Region region = 1;
  if (this->has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::region(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.ChangePeerResponse)
  return target;
}

size_t ChangePeerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.ChangePeerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metapb.Region region = 1;
  if (this->has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *region_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangePeerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.ChangePeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangePeerResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ChangePeerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.ChangePeerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.ChangePeerResponse)
    MergeFrom(*source);
  }
}

void ChangePeerResponse::MergeFrom(const ChangePeerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.ChangePeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
}

void ChangePeerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.ChangePeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePeerResponse::CopyFrom(const ChangePeerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.ChangePeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePeerResponse::IsInitialized() const {
  return true;
}

void ChangePeerResponse::Swap(ChangePeerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangePeerResponse::InternalSwap(ChangePeerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(region_, other->region_);
}

::google::protobuf::Metadata ChangePeerResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SplitRequest::InitAsDefaultInstance() {
}
class SplitRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitRequest::kSplitKeyFieldNumber;
const int SplitRequest::kNewRegionIdFieldNumber;
const int SplitRequest::kNewPeerIdsFieldNumber;
const int SplitRequest::kRightDeriveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitRequest::SplitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.SplitRequest)
}
SplitRequest::SplitRequest(const SplitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      new_peer_ids_(from.new_peer_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  split_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.split_key().size() > 0) {
    split_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
  ::memcpy(&new_region_id_, &from.new_region_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_derive_) -
    reinterpret_cast<char*>(&new_region_id_)) + sizeof(right_derive_));
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.SplitRequest)
}

void SplitRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SplitRequest_raft_5fcmdpb_2eproto.base);
  split_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&new_region_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_derive_) -
      reinterpret_cast<char*>(&new_region_id_)) + sizeof(right_derive_));
}

SplitRequest::~SplitRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.SplitRequest)
  SharedDtor();
}

void SplitRequest::SharedDtor() {
  split_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SplitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SplitRequest& SplitRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SplitRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void SplitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.SplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_peer_ids_.Clear();
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&new_region_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_derive_) -
      reinterpret_cast<char*>(&new_region_id_)) + sizeof(right_derive_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SplitRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SplitRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // bytes split_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_split_key();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // uint64 new_region_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_new_region_id(value);
        break;
      }
      // repeated uint64 new_peer_ids = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
          object = msg->mutable_new_peer_ids();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val;
          ptr = Varint::Parse64(ptr, &val);
          if (!ptr) goto error;
          ::google::protobuf::uint64 value = val;
          msg->add_new_peer_ids(value);
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      // bool right_derive = 4 [deprecated = true];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_right_derive(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.SplitRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes split_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_split_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 new_region_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 new_peer_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_new_peer_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26u, input, this->mutable_new_peer_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool right_derive = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_derive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.SplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.SplitRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.SplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes split_key = 1;
  if (this->split_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->split_key(), output);
  }

  // uint64 new_region_id = 2;
  if (this->new_region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->new_region_id(), output);
  }

  // repeated uint64 new_peer_ids = 3;
  if (this->new_peer_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_new_peer_ids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->new_peer_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->new_peer_ids(i), output);
  }

  // bool right_derive = 4 [deprecated = true];
  if (this->right_derive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->right_derive(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.SplitRequest)
}

::google::protobuf::uint8* SplitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.SplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes split_key = 1;
  if (this->split_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->split_key(), target);
  }

  // uint64 new_region_id = 2;
  if (this->new_region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->new_region_id(), target);
  }

  // repeated uint64 new_peer_ids = 3;
  if (this->new_peer_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _new_peer_ids_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->new_peer_ids_, target);
  }

  // bool right_derive = 4 [deprecated = true];
  if (this->right_derive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->right_derive(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.SplitRequest)
  return target;
}

size_t SplitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.SplitRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 new_peer_ids = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->new_peer_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _new_peer_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes split_key = 1;
  if (this->split_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->split_key());
  }

  // uint64 new_region_id = 2;
  if (this->new_region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->new_region_id());
  }

  // bool right_derive = 4 [deprecated = true];
  if (this->right_derive() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.SplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SplitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.SplitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.SplitRequest)
    MergeFrom(*source);
  }
}

void SplitRequest::MergeFrom(const SplitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.SplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  new_peer_ids_.MergeFrom(from.new_peer_ids_);
  if (from.split_key().size() > 0) {

    split_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
  if (from.new_region_id() != 0) {
    set_new_region_id(from.new_region_id());
  }
  if (from.right_derive() != 0) {
    set_right_derive(from.right_derive());
  }
}

void SplitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.SplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitRequest::CopyFrom(const SplitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.SplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitRequest::IsInitialized() const {
  return true;
}

void SplitRequest::Swap(SplitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitRequest::InternalSwap(SplitRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  new_peer_ids_.InternalSwap(&other->new_peer_ids_);
  split_key_.Swap(&other->split_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(new_region_id_, other->new_region_id_);
  swap(right_derive_, other->right_derive_);
}

::google::protobuf::Metadata SplitRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SplitResponse::InitAsDefaultInstance() {
  ::raft_cmdpb::_SplitResponse_default_instance_._instance.get_mutable()->left_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
  ::raft_cmdpb::_SplitResponse_default_instance_._instance.get_mutable()->right_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}
class SplitResponse::HasBitSetters {
 public:
  static const ::metapb::Region& left(const SplitResponse* msg);
  static const ::metapb::Region& right(const SplitResponse* msg);
};

const ::metapb::Region&
SplitResponse::HasBitSetters::left(const SplitResponse* msg) {
  return *msg->left_;
}
const ::metapb::Region&
SplitResponse::HasBitSetters::right(const SplitResponse* msg) {
  return *msg->right_;
}
void SplitResponse::clear_left() {
  if (GetArenaNoVirtual() == NULL && left_ != NULL) {
    delete left_;
  }
  left_ = NULL;
}
void SplitResponse::clear_right() {
  if (GetArenaNoVirtual() == NULL && right_ != NULL) {
    delete right_;
  }
  right_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitResponse::kLeftFieldNumber;
const int SplitResponse::kRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitResponse::SplitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.SplitResponse)
}
SplitResponse::SplitResponse(const SplitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_left()) {
    left_ = new ::metapb::Region(*from.left_);
  } else {
    left_ = NULL;
  }
  if (from.has_right()) {
    right_ = new ::metapb::Region(*from.right_);
  } else {
    right_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.SplitResponse)
}

void SplitResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SplitResponse_raft_5fcmdpb_2eproto.base);
  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&left_)) + sizeof(right_));
}

SplitResponse::~SplitResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.SplitResponse)
  SharedDtor();
}

void SplitResponse::SharedDtor() {
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
}

void SplitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SplitResponse& SplitResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SplitResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void SplitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.SplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && left_ != NULL) {
    delete left_;
  }
  left_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_ != NULL) {
    delete right_;
  }
  right_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SplitResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SplitResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .metapb.Region left = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Region::_InternalParse;
        object = msg->mutable_left();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .metapb.Region right = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Region::_InternalParse;
        object = msg->mutable_right();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.SplitResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Region left = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Region right = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.SplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.SplitResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.SplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Region left = 1;
  if (this->has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::left(this), output);
  }

  // .metapb.Region right = 2;
  if (this->has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::right(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.SplitResponse)
}

::google::protobuf::uint8* SplitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.SplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Region left = 1;
  if (this->has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::left(this), deterministic, target);
  }

  // .metapb.Region right = 2;
  if (this->has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::right(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.SplitResponse)
  return target;
}

size_t SplitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.SplitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metapb.Region left = 1;
  if (this->has_left()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .metapb.Region right = 2;
  if (this->has_right()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *right_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.SplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SplitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.SplitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.SplitResponse)
    MergeFrom(*source);
  }
}

void SplitResponse::MergeFrom(const SplitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.SplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_left()) {
    mutable_left()->::metapb::Region::MergeFrom(from.left());
  }
  if (from.has_right()) {
    mutable_right()->::metapb::Region::MergeFrom(from.right());
  }
}

void SplitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.SplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitResponse::CopyFrom(const SplitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.SplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitResponse::IsInitialized() const {
  return true;
}

void SplitResponse::Swap(SplitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitResponse::InternalSwap(SplitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(left_, other->left_);
  swap(right_, other->right_);
}

::google::protobuf::Metadata SplitResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BatchSplitRequest::InitAsDefaultInstance() {
}
class BatchSplitRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchSplitRequest::kRequestsFieldNumber;
const int BatchSplitRequest::kRightDeriveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchSplitRequest::BatchSplitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.BatchSplitRequest)
}
BatchSplitRequest::BatchSplitRequest(const BatchSplitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  right_derive_ = from.right_derive_;
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.BatchSplitRequest)
}

void BatchSplitRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BatchSplitRequest_raft_5fcmdpb_2eproto.base);
  right_derive_ = false;
}

BatchSplitRequest::~BatchSplitRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.BatchSplitRequest)
  SharedDtor();
}

void BatchSplitRequest::SharedDtor() {
}

void BatchSplitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchSplitRequest& BatchSplitRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BatchSplitRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void BatchSplitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.BatchSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  right_derive_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BatchSplitRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BatchSplitRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // repeated .raft_cmdpb.SplitRequest requests = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::raft_cmdpb::SplitRequest::_InternalParse;
          object = msg->add_requests();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // bool right_derive = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_right_derive(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BatchSplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.BatchSplitRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .raft_cmdpb.SplitRequest requests = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_requests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool right_derive = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_derive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.BatchSplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.BatchSplitRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BatchSplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.BatchSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .raft_cmdpb.SplitRequest requests = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->requests_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->requests(static_cast<int>(i)),
      output);
  }

  // bool right_derive = 2;
  if (this->right_derive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->right_derive(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.BatchSplitRequest)
}

::google::protobuf::uint8* BatchSplitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.BatchSplitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .raft_cmdpb.SplitRequest requests = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->requests_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->requests(static_cast<int>(i)), deterministic, target);
  }

  // bool right_derive = 2;
  if (this->right_derive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->right_derive(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.BatchSplitRequest)
  return target;
}

size_t BatchSplitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.BatchSplitRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .raft_cmdpb.SplitRequest requests = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->requests_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->requests(static_cast<int>(i)));
    }
  }

  // bool right_derive = 2;
  if (this->right_derive() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchSplitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.BatchSplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchSplitRequest* source =
      ::google::protobuf::DynamicCastToGenerated<BatchSplitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.BatchSplitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.BatchSplitRequest)
    MergeFrom(*source);
  }
}

void BatchSplitRequest::MergeFrom(const BatchSplitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.BatchSplitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.right_derive() != 0) {
    set_right_derive(from.right_derive());
  }
}

void BatchSplitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.BatchSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchSplitRequest::CopyFrom(const BatchSplitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.BatchSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchSplitRequest::IsInitialized() const {
  return true;
}

void BatchSplitRequest::Swap(BatchSplitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchSplitRequest::InternalSwap(BatchSplitRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&requests_)->InternalSwap(CastToBase(&other->requests_));
  swap(right_derive_, other->right_derive_);
}

::google::protobuf::Metadata BatchSplitRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BatchSplitResponse::InitAsDefaultInstance() {
}
class BatchSplitResponse::HasBitSetters {
 public:
};

void BatchSplitResponse::clear_regions() {
  regions_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchSplitResponse::kRegionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchSplitResponse::BatchSplitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.BatchSplitResponse)
}
BatchSplitResponse::BatchSplitResponse(const BatchSplitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      regions_(from.regions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.BatchSplitResponse)
}

void BatchSplitResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BatchSplitResponse_raft_5fcmdpb_2eproto.base);
}

BatchSplitResponse::~BatchSplitResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.BatchSplitResponse)
  SharedDtor();
}

void BatchSplitResponse::SharedDtor() {
}

void BatchSplitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchSplitResponse& BatchSplitResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BatchSplitResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void BatchSplitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.BatchSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  regions_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BatchSplitResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BatchSplitResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // repeated .metapb.Region regions = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::metapb::Region::_InternalParse;
          object = msg->add_regions();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BatchSplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.BatchSplitResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metapb.Region regions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_regions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.BatchSplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.BatchSplitResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BatchSplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.BatchSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metapb.Region regions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->regions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->regions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.BatchSplitResponse)
}

::google::protobuf::uint8* BatchSplitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.BatchSplitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metapb.Region regions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->regions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->regions(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.BatchSplitResponse)
  return target;
}

size_t BatchSplitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.BatchSplitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metapb.Region regions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->regions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->regions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchSplitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.BatchSplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchSplitResponse* source =
      ::google::protobuf::DynamicCastToGenerated<BatchSplitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.BatchSplitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.BatchSplitResponse)
    MergeFrom(*source);
  }
}

void BatchSplitResponse::MergeFrom(const BatchSplitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.BatchSplitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  regions_.MergeFrom(from.regions_);
}

void BatchSplitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.BatchSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchSplitResponse::CopyFrom(const BatchSplitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.BatchSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchSplitResponse::IsInitialized() const {
  return true;
}

void BatchSplitResponse::Swap(BatchSplitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchSplitResponse::InternalSwap(BatchSplitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&regions_)->InternalSwap(CastToBase(&other->regions_));
}

::google::protobuf::Metadata BatchSplitResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CompactLogRequest::InitAsDefaultInstance() {
}
class CompactLogRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompactLogRequest::kCompactIndexFieldNumber;
const int CompactLogRequest::kCompactTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompactLogRequest::CompactLogRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.CompactLogRequest)
}
CompactLogRequest::CompactLogRequest(const CompactLogRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&compact_index_, &from.compact_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&compact_term_) -
    reinterpret_cast<char*>(&compact_index_)) + sizeof(compact_term_));
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.CompactLogRequest)
}

void CompactLogRequest::SharedCtor() {
  ::memset(&compact_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compact_term_) -
      reinterpret_cast<char*>(&compact_index_)) + sizeof(compact_term_));
}

CompactLogRequest::~CompactLogRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.CompactLogRequest)
  SharedDtor();
}

void CompactLogRequest::SharedDtor() {
}

void CompactLogRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompactLogRequest& CompactLogRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CompactLogRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void CompactLogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.CompactLogRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&compact_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compact_term_) -
      reinterpret_cast<char*>(&compact_index_)) + sizeof(compact_term_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CompactLogRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CompactLogRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // uint64 compact_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_compact_index(value);
        break;
      }
      // uint64 compact_term = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_compact_term(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CompactLogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.CompactLogRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 compact_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &compact_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 compact_term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &compact_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.CompactLogRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.CompactLogRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CompactLogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.CompactLogRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 compact_index = 1;
  if (this->compact_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->compact_index(), output);
  }

  // uint64 compact_term = 2;
  if (this->compact_term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->compact_term(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.CompactLogRequest)
}

::google::protobuf::uint8* CompactLogRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.CompactLogRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 compact_index = 1;
  if (this->compact_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->compact_index(), target);
  }

  // uint64 compact_term = 2;
  if (this->compact_term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->compact_term(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.CompactLogRequest)
  return target;
}

size_t CompactLogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.CompactLogRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 compact_index = 1;
  if (this->compact_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->compact_index());
  }

  // uint64 compact_term = 2;
  if (this->compact_term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->compact_term());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompactLogRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.CompactLogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CompactLogRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CompactLogRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.CompactLogRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.CompactLogRequest)
    MergeFrom(*source);
  }
}

void CompactLogRequest::MergeFrom(const CompactLogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.CompactLogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.compact_index() != 0) {
    set_compact_index(from.compact_index());
  }
  if (from.compact_term() != 0) {
    set_compact_term(from.compact_term());
  }
}

void CompactLogRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.CompactLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactLogRequest::CopyFrom(const CompactLogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.CompactLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactLogRequest::IsInitialized() const {
  return true;
}

void CompactLogRequest::Swap(CompactLogRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompactLogRequest::InternalSwap(CompactLogRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(compact_index_, other->compact_index_);
  swap(compact_term_, other->compact_term_);
}

::google::protobuf::Metadata CompactLogRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CompactLogResponse::InitAsDefaultInstance() {
}
class CompactLogResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompactLogResponse::CompactLogResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.CompactLogResponse)
}
CompactLogResponse::CompactLogResponse(const CompactLogResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.CompactLogResponse)
}

void CompactLogResponse::SharedCtor() {
}

CompactLogResponse::~CompactLogResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.CompactLogResponse)
  SharedDtor();
}

void CompactLogResponse::SharedDtor() {
}

void CompactLogResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompactLogResponse& CompactLogResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CompactLogResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void CompactLogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.CompactLogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CompactLogResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CompactLogResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CompactLogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.CompactLogResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.CompactLogResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.CompactLogResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CompactLogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.CompactLogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.CompactLogResponse)
}

::google::protobuf::uint8* CompactLogResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.CompactLogResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.CompactLogResponse)
  return target;
}

size_t CompactLogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.CompactLogResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompactLogResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.CompactLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CompactLogResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CompactLogResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.CompactLogResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.CompactLogResponse)
    MergeFrom(*source);
  }
}

void CompactLogResponse::MergeFrom(const CompactLogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.CompactLogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CompactLogResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.CompactLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactLogResponse::CopyFrom(const CompactLogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.CompactLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactLogResponse::IsInitialized() const {
  return true;
}

void CompactLogResponse::Swap(CompactLogResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompactLogResponse::InternalSwap(CompactLogResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CompactLogResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TransferLeaderRequest::InitAsDefaultInstance() {
  ::raft_cmdpb::_TransferLeaderRequest_default_instance_._instance.get_mutable()->peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}
class TransferLeaderRequest::HasBitSetters {
 public:
  static const ::metapb::Peer& peer(const TransferLeaderRequest* msg);
};

const ::metapb::Peer&
TransferLeaderRequest::HasBitSetters::peer(const TransferLeaderRequest* msg) {
  return *msg->peer_;
}
void TransferLeaderRequest::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferLeaderRequest::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferLeaderRequest::TransferLeaderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.TransferLeaderRequest)
}
TransferLeaderRequest::TransferLeaderRequest(const TransferLeaderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peer()) {
    peer_ = new ::metapb::Peer(*from.peer_);
  } else {
    peer_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.TransferLeaderRequest)
}

void TransferLeaderRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TransferLeaderRequest_raft_5fcmdpb_2eproto.base);
  peer_ = NULL;
}

TransferLeaderRequest::~TransferLeaderRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.TransferLeaderRequest)
  SharedDtor();
}

void TransferLeaderRequest::SharedDtor() {
  if (this != internal_default_instance()) delete peer_;
}

void TransferLeaderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferLeaderRequest& TransferLeaderRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransferLeaderRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void TransferLeaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.TransferLeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransferLeaderRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransferLeaderRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .metapb.Peer peer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Peer::_InternalParse;
        object = msg->mutable_peer();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransferLeaderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.TransferLeaderRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Peer peer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.TransferLeaderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.TransferLeaderRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransferLeaderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.TransferLeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::peer(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.TransferLeaderRequest)
}

::google::protobuf::uint8* TransferLeaderRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.TransferLeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::peer(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.TransferLeaderRequest)
  return target;
}

size_t TransferLeaderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.TransferLeaderRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metapb.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferLeaderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.TransferLeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferLeaderRequest* source =
      ::google::protobuf::DynamicCastToGenerated<TransferLeaderRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.TransferLeaderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.TransferLeaderRequest)
    MergeFrom(*source);
  }
}

void TransferLeaderRequest::MergeFrom(const TransferLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.TransferLeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
}

void TransferLeaderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.TransferLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferLeaderRequest::CopyFrom(const TransferLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.TransferLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferLeaderRequest::IsInitialized() const {
  return true;
}

void TransferLeaderRequest::Swap(TransferLeaderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferLeaderRequest::InternalSwap(TransferLeaderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(peer_, other->peer_);
}

::google::protobuf::Metadata TransferLeaderRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TransferLeaderResponse::InitAsDefaultInstance() {
}
class TransferLeaderResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferLeaderResponse::TransferLeaderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.TransferLeaderResponse)
}
TransferLeaderResponse::TransferLeaderResponse(const TransferLeaderResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.TransferLeaderResponse)
}

void TransferLeaderResponse::SharedCtor() {
}

TransferLeaderResponse::~TransferLeaderResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.TransferLeaderResponse)
  SharedDtor();
}

void TransferLeaderResponse::SharedDtor() {
}

void TransferLeaderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferLeaderResponse& TransferLeaderResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransferLeaderResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void TransferLeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.TransferLeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransferLeaderResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransferLeaderResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransferLeaderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.TransferLeaderResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.TransferLeaderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.TransferLeaderResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransferLeaderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.TransferLeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.TransferLeaderResponse)
}

::google::protobuf::uint8* TransferLeaderResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.TransferLeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.TransferLeaderResponse)
  return target;
}

size_t TransferLeaderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.TransferLeaderResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferLeaderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.TransferLeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferLeaderResponse* source =
      ::google::protobuf::DynamicCastToGenerated<TransferLeaderResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.TransferLeaderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.TransferLeaderResponse)
    MergeFrom(*source);
  }
}

void TransferLeaderResponse::MergeFrom(const TransferLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.TransferLeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TransferLeaderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.TransferLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferLeaderResponse::CopyFrom(const TransferLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.TransferLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferLeaderResponse::IsInitialized() const {
  return true;
}

void TransferLeaderResponse::Swap(TransferLeaderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferLeaderResponse::InternalSwap(TransferLeaderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TransferLeaderResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VerifyHashRequest::InitAsDefaultInstance() {
}
class VerifyHashRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyHashRequest::kIndexFieldNumber;
const int VerifyHashRequest::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyHashRequest::VerifyHashRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.VerifyHashRequest)
}
VerifyHashRequest::VerifyHashRequest(const VerifyHashRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.VerifyHashRequest)
}

void VerifyHashRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_VerifyHashRequest_raft_5fcmdpb_2eproto.base);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = GOOGLE_PROTOBUF_ULONGLONG(0);
}

VerifyHashRequest::~VerifyHashRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.VerifyHashRequest)
  SharedDtor();
}

void VerifyHashRequest::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VerifyHashRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerifyHashRequest& VerifyHashRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VerifyHashRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void VerifyHashRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.VerifyHashRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = GOOGLE_PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VerifyHashRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VerifyHashRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // uint64 index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_index(value);
        break;
      }
      // bytes hash = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_hash();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VerifyHashRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.VerifyHashRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.VerifyHashRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.VerifyHashRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VerifyHashRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.VerifyHashRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->index(), output);
  }

  // bytes hash = 2;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.VerifyHashRequest)
}

::google::protobuf::uint8* VerifyHashRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.VerifyHashRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->index(), target);
  }

  // bytes hash = 2;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.VerifyHashRequest)
  return target;
}

size_t VerifyHashRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.VerifyHashRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 2;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // uint64 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyHashRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.VerifyHashRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyHashRequest* source =
      ::google::protobuf::DynamicCastToGenerated<VerifyHashRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.VerifyHashRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.VerifyHashRequest)
    MergeFrom(*source);
  }
}

void VerifyHashRequest::MergeFrom(const VerifyHashRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.VerifyHashRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void VerifyHashRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.VerifyHashRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyHashRequest::CopyFrom(const VerifyHashRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.VerifyHashRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyHashRequest::IsInitialized() const {
  return true;
}

void VerifyHashRequest::Swap(VerifyHashRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyHashRequest::InternalSwap(VerifyHashRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
}

::google::protobuf::Metadata VerifyHashRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VerifyHashResponse::InitAsDefaultInstance() {
}
class VerifyHashResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyHashResponse::VerifyHashResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.VerifyHashResponse)
}
VerifyHashResponse::VerifyHashResponse(const VerifyHashResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.VerifyHashResponse)
}

void VerifyHashResponse::SharedCtor() {
}

VerifyHashResponse::~VerifyHashResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.VerifyHashResponse)
  SharedDtor();
}

void VerifyHashResponse::SharedDtor() {
}

void VerifyHashResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerifyHashResponse& VerifyHashResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VerifyHashResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void VerifyHashResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.VerifyHashResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VerifyHashResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VerifyHashResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VerifyHashResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.VerifyHashResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.VerifyHashResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.VerifyHashResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VerifyHashResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.VerifyHashResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.VerifyHashResponse)
}

::google::protobuf::uint8* VerifyHashResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.VerifyHashResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.VerifyHashResponse)
  return target;
}

size_t VerifyHashResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.VerifyHashResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyHashResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.VerifyHashResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyHashResponse* source =
      ::google::protobuf::DynamicCastToGenerated<VerifyHashResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.VerifyHashResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.VerifyHashResponse)
    MergeFrom(*source);
  }
}

void VerifyHashResponse::MergeFrom(const VerifyHashResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.VerifyHashResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void VerifyHashResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.VerifyHashResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyHashResponse::CopyFrom(const VerifyHashResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.VerifyHashResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyHashResponse::IsInitialized() const {
  return true;
}

void VerifyHashResponse::Swap(VerifyHashResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyHashResponse::InternalSwap(VerifyHashResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VerifyHashResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrepareMergeRequest::InitAsDefaultInstance() {
  ::raft_cmdpb::_PrepareMergeRequest_default_instance_._instance.get_mutable()->target_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}
class PrepareMergeRequest::HasBitSetters {
 public:
  static const ::metapb::Region& target(const PrepareMergeRequest* msg);
};

const ::metapb::Region&
PrepareMergeRequest::HasBitSetters::target(const PrepareMergeRequest* msg) {
  return *msg->target_;
}
void PrepareMergeRequest::clear_target() {
  if (GetArenaNoVirtual() == NULL && target_ != NULL) {
    delete target_;
  }
  target_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrepareMergeRequest::kMinIndexFieldNumber;
const int PrepareMergeRequest::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareMergeRequest::PrepareMergeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.PrepareMergeRequest)
}
PrepareMergeRequest::PrepareMergeRequest(const PrepareMergeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target()) {
    target_ = new ::metapb::Region(*from.target_);
  } else {
    target_ = NULL;
  }
  min_index_ = from.min_index_;
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.PrepareMergeRequest)
}

void PrepareMergeRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PrepareMergeRequest_raft_5fcmdpb_2eproto.base);
  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_index_) -
      reinterpret_cast<char*>(&target_)) + sizeof(min_index_));
}

PrepareMergeRequest::~PrepareMergeRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.PrepareMergeRequest)
  SharedDtor();
}

void PrepareMergeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
}

void PrepareMergeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareMergeRequest& PrepareMergeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrepareMergeRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void PrepareMergeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.PrepareMergeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && target_ != NULL) {
    delete target_;
  }
  target_ = NULL;
  min_index_ = GOOGLE_PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrepareMergeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrepareMergeRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // uint64 min_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_min_index(value);
        break;
      }
      // .metapb.Region target = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Region::_InternalParse;
        object = msg->mutable_target();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrepareMergeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.PrepareMergeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 min_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Region target = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.PrepareMergeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.PrepareMergeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrepareMergeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.PrepareMergeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 min_index = 1;
  if (this->min_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->min_index(), output);
  }

  // .metapb.Region target = 2;
  if (this->has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::target(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.PrepareMergeRequest)
}

::google::protobuf::uint8* PrepareMergeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.PrepareMergeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 min_index = 1;
  if (this->min_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->min_index(), target);
  }

  // .metapb.Region target = 2;
  if (this->has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::target(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.PrepareMergeRequest)
  return target;
}

size_t PrepareMergeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.PrepareMergeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metapb.Region target = 2;
  if (this->has_target()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *target_);
  }

  // uint64 min_index = 1;
  if (this->min_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->min_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareMergeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.PrepareMergeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareMergeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PrepareMergeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.PrepareMergeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.PrepareMergeRequest)
    MergeFrom(*source);
  }
}

void PrepareMergeRequest::MergeFrom(const PrepareMergeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.PrepareMergeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target()) {
    mutable_target()->::metapb::Region::MergeFrom(from.target());
  }
  if (from.min_index() != 0) {
    set_min_index(from.min_index());
  }
}

void PrepareMergeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.PrepareMergeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareMergeRequest::CopyFrom(const PrepareMergeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.PrepareMergeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareMergeRequest::IsInitialized() const {
  return true;
}

void PrepareMergeRequest::Swap(PrepareMergeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareMergeRequest::InternalSwap(PrepareMergeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(target_, other->target_);
  swap(min_index_, other->min_index_);
}

::google::protobuf::Metadata PrepareMergeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrepareMergeResponse::InitAsDefaultInstance() {
}
class PrepareMergeResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareMergeResponse::PrepareMergeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.PrepareMergeResponse)
}
PrepareMergeResponse::PrepareMergeResponse(const PrepareMergeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.PrepareMergeResponse)
}

void PrepareMergeResponse::SharedCtor() {
}

PrepareMergeResponse::~PrepareMergeResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.PrepareMergeResponse)
  SharedDtor();
}

void PrepareMergeResponse::SharedDtor() {
}

void PrepareMergeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareMergeResponse& PrepareMergeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrepareMergeResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void PrepareMergeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.PrepareMergeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrepareMergeResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrepareMergeResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrepareMergeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.PrepareMergeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.PrepareMergeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.PrepareMergeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrepareMergeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.PrepareMergeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.PrepareMergeResponse)
}

::google::protobuf::uint8* PrepareMergeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.PrepareMergeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.PrepareMergeResponse)
  return target;
}

size_t PrepareMergeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.PrepareMergeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareMergeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.PrepareMergeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareMergeResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PrepareMergeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.PrepareMergeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.PrepareMergeResponse)
    MergeFrom(*source);
  }
}

void PrepareMergeResponse::MergeFrom(const PrepareMergeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.PrepareMergeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PrepareMergeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.PrepareMergeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareMergeResponse::CopyFrom(const PrepareMergeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.PrepareMergeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareMergeResponse::IsInitialized() const {
  return true;
}

void PrepareMergeResponse::Swap(PrepareMergeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareMergeResponse::InternalSwap(PrepareMergeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PrepareMergeResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CommitMergeRequest::InitAsDefaultInstance() {
  ::raft_cmdpb::_CommitMergeRequest_default_instance_._instance.get_mutable()->source_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}
class CommitMergeRequest::HasBitSetters {
 public:
  static const ::metapb::Region& source(const CommitMergeRequest* msg);
};

const ::metapb::Region&
CommitMergeRequest::HasBitSetters::source(const CommitMergeRequest* msg) {
  return *msg->source_;
}
void CommitMergeRequest::clear_source() {
  if (GetArenaNoVirtual() == NULL && source_ != NULL) {
    delete source_;
  }
  source_ = NULL;
}
void CommitMergeRequest::clear_entries() {
  entries_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitMergeRequest::kSourceFieldNumber;
const int CommitMergeRequest::kCommitFieldNumber;
const int CommitMergeRequest::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitMergeRequest::CommitMergeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.CommitMergeRequest)
}
CommitMergeRequest::CommitMergeRequest(const CommitMergeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_source()) {
    source_ = new ::metapb::Region(*from.source_);
  } else {
    source_ = NULL;
  }
  commit_ = from.commit_;
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.CommitMergeRequest)
}

void CommitMergeRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CommitMergeRequest_raft_5fcmdpb_2eproto.base);
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commit_) -
      reinterpret_cast<char*>(&source_)) + sizeof(commit_));
}

CommitMergeRequest::~CommitMergeRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.CommitMergeRequest)
  SharedDtor();
}

void CommitMergeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete source_;
}

void CommitMergeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommitMergeRequest& CommitMergeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CommitMergeRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void CommitMergeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.CommitMergeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  if (GetArenaNoVirtual() == NULL && source_ != NULL) {
    delete source_;
  }
  source_ = NULL;
  commit_ = GOOGLE_PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CommitMergeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CommitMergeRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .metapb.Region source = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Region::_InternalParse;
        object = msg->mutable_source();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // uint64 commit = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_commit(value);
        break;
      }
      // repeated .eraftpb.Entry entries = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::eraftpb::Entry::_InternalParse;
          object = msg->add_entries();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CommitMergeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.CommitMergeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Region source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 commit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .eraftpb.Entry entries = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.CommitMergeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.CommitMergeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CommitMergeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.CommitMergeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Region source = 1;
  if (this->has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::source(this), output);
  }

  // uint64 commit = 2;
  if (this->commit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->commit(), output);
  }

  // repeated .eraftpb.Entry entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->entries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.CommitMergeRequest)
}

::google::protobuf::uint8* CommitMergeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.CommitMergeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Region source = 1;
  if (this->has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::source(this), deterministic, target);
  }

  // uint64 commit = 2;
  if (this->commit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->commit(), target);
  }

  // repeated .eraftpb.Entry entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->entries(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.CommitMergeRequest)
  return target;
}

size_t CommitMergeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.CommitMergeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .eraftpb.Entry entries = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  // .metapb.Region source = 1;
  if (this->has_source()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // uint64 commit = 2;
  if (this->commit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitMergeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.CommitMergeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CommitMergeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CommitMergeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.CommitMergeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.CommitMergeRequest)
    MergeFrom(*source);
  }
}

void CommitMergeRequest::MergeFrom(const CommitMergeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.CommitMergeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.has_source()) {
    mutable_source()->::metapb::Region::MergeFrom(from.source());
  }
  if (from.commit() != 0) {
    set_commit(from.commit());
  }
}

void CommitMergeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.CommitMergeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitMergeRequest::CopyFrom(const CommitMergeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.CommitMergeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitMergeRequest::IsInitialized() const {
  return true;
}

void CommitMergeRequest::Swap(CommitMergeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitMergeRequest::InternalSwap(CommitMergeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  swap(source_, other->source_);
  swap(commit_, other->commit_);
}

::google::protobuf::Metadata CommitMergeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CommitMergeResponse::InitAsDefaultInstance() {
}
class CommitMergeResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitMergeResponse::CommitMergeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.CommitMergeResponse)
}
CommitMergeResponse::CommitMergeResponse(const CommitMergeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.CommitMergeResponse)
}

void CommitMergeResponse::SharedCtor() {
}

CommitMergeResponse::~CommitMergeResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.CommitMergeResponse)
  SharedDtor();
}

void CommitMergeResponse::SharedDtor() {
}

void CommitMergeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommitMergeResponse& CommitMergeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CommitMergeResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void CommitMergeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.CommitMergeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CommitMergeResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CommitMergeResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CommitMergeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.CommitMergeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.CommitMergeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.CommitMergeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CommitMergeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.CommitMergeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.CommitMergeResponse)
}

::google::protobuf::uint8* CommitMergeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.CommitMergeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.CommitMergeResponse)
  return target;
}

size_t CommitMergeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.CommitMergeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitMergeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.CommitMergeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CommitMergeResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CommitMergeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.CommitMergeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.CommitMergeResponse)
    MergeFrom(*source);
  }
}

void CommitMergeResponse::MergeFrom(const CommitMergeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.CommitMergeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CommitMergeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.CommitMergeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitMergeResponse::CopyFrom(const CommitMergeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.CommitMergeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitMergeResponse::IsInitialized() const {
  return true;
}

void CommitMergeResponse::Swap(CommitMergeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitMergeResponse::InternalSwap(CommitMergeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommitMergeResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RollbackMergeRequest::InitAsDefaultInstance() {
}
class RollbackMergeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RollbackMergeRequest::kCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RollbackMergeRequest::RollbackMergeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RollbackMergeRequest)
}
RollbackMergeRequest::RollbackMergeRequest(const RollbackMergeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  commit_ = from.commit_;
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RollbackMergeRequest)
}

void RollbackMergeRequest::SharedCtor() {
  commit_ = GOOGLE_PROTOBUF_ULONGLONG(0);
}

RollbackMergeRequest::~RollbackMergeRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RollbackMergeRequest)
  SharedDtor();
}

void RollbackMergeRequest::SharedDtor() {
}

void RollbackMergeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RollbackMergeRequest& RollbackMergeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RollbackMergeRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void RollbackMergeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RollbackMergeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commit_ = GOOGLE_PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RollbackMergeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RollbackMergeRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // uint64 commit = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_commit(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RollbackMergeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RollbackMergeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 commit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RollbackMergeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RollbackMergeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RollbackMergeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RollbackMergeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 commit = 1;
  if (this->commit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->commit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RollbackMergeRequest)
}

::google::protobuf::uint8* RollbackMergeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RollbackMergeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 commit = 1;
  if (this->commit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->commit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RollbackMergeRequest)
  return target;
}

size_t RollbackMergeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RollbackMergeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 commit = 1;
  if (this->commit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RollbackMergeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RollbackMergeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RollbackMergeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<RollbackMergeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RollbackMergeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RollbackMergeRequest)
    MergeFrom(*source);
  }
}

void RollbackMergeRequest::MergeFrom(const RollbackMergeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RollbackMergeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.commit() != 0) {
    set_commit(from.commit());
  }
}

void RollbackMergeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RollbackMergeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RollbackMergeRequest::CopyFrom(const RollbackMergeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RollbackMergeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollbackMergeRequest::IsInitialized() const {
  return true;
}

void RollbackMergeRequest::Swap(RollbackMergeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RollbackMergeRequest::InternalSwap(RollbackMergeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(commit_, other->commit_);
}

::google::protobuf::Metadata RollbackMergeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RollbackMergeResponse::InitAsDefaultInstance() {
}
class RollbackMergeResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RollbackMergeResponse::RollbackMergeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RollbackMergeResponse)
}
RollbackMergeResponse::RollbackMergeResponse(const RollbackMergeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RollbackMergeResponse)
}

void RollbackMergeResponse::SharedCtor() {
}

RollbackMergeResponse::~RollbackMergeResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RollbackMergeResponse)
  SharedDtor();
}

void RollbackMergeResponse::SharedDtor() {
}

void RollbackMergeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RollbackMergeResponse& RollbackMergeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RollbackMergeResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void RollbackMergeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RollbackMergeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RollbackMergeResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RollbackMergeResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RollbackMergeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RollbackMergeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RollbackMergeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RollbackMergeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RollbackMergeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RollbackMergeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RollbackMergeResponse)
}

::google::protobuf::uint8* RollbackMergeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RollbackMergeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RollbackMergeResponse)
  return target;
}

size_t RollbackMergeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RollbackMergeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RollbackMergeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RollbackMergeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RollbackMergeResponse* source =
      ::google::protobuf::DynamicCastToGenerated<RollbackMergeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RollbackMergeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RollbackMergeResponse)
    MergeFrom(*source);
  }
}

void RollbackMergeResponse::MergeFrom(const RollbackMergeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RollbackMergeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RollbackMergeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RollbackMergeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RollbackMergeResponse::CopyFrom(const RollbackMergeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RollbackMergeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollbackMergeResponse::IsInitialized() const {
  return true;
}

void RollbackMergeResponse::Swap(RollbackMergeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RollbackMergeResponse::InternalSwap(RollbackMergeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RollbackMergeResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AdminRequest::InitAsDefaultInstance() {
  ::raft_cmdpb::_AdminRequest_default_instance_._instance.get_mutable()->change_peer_ = const_cast< ::raft_cmdpb::ChangePeerRequest*>(
      ::raft_cmdpb::ChangePeerRequest::internal_default_instance());
  ::raft_cmdpb::_AdminRequest_default_instance_._instance.get_mutable()->split_ = const_cast< ::raft_cmdpb::SplitRequest*>(
      ::raft_cmdpb::SplitRequest::internal_default_instance());
  ::raft_cmdpb::_AdminRequest_default_instance_._instance.get_mutable()->compact_log_ = const_cast< ::raft_cmdpb::CompactLogRequest*>(
      ::raft_cmdpb::CompactLogRequest::internal_default_instance());
  ::raft_cmdpb::_AdminRequest_default_instance_._instance.get_mutable()->transfer_leader_ = const_cast< ::raft_cmdpb::TransferLeaderRequest*>(
      ::raft_cmdpb::TransferLeaderRequest::internal_default_instance());
  ::raft_cmdpb::_AdminRequest_default_instance_._instance.get_mutable()->verify_hash_ = const_cast< ::raft_cmdpb::VerifyHashRequest*>(
      ::raft_cmdpb::VerifyHashRequest::internal_default_instance());
  ::raft_cmdpb::_AdminRequest_default_instance_._instance.get_mutable()->prepare_merge_ = const_cast< ::raft_cmdpb::PrepareMergeRequest*>(
      ::raft_cmdpb::PrepareMergeRequest::internal_default_instance());
  ::raft_cmdpb::_AdminRequest_default_instance_._instance.get_mutable()->commit_merge_ = const_cast< ::raft_cmdpb::CommitMergeRequest*>(
      ::raft_cmdpb::CommitMergeRequest::internal_default_instance());
  ::raft_cmdpb::_AdminRequest_default_instance_._instance.get_mutable()->rollback_merge_ = const_cast< ::raft_cmdpb::RollbackMergeRequest*>(
      ::raft_cmdpb::RollbackMergeRequest::internal_default_instance());
  ::raft_cmdpb::_AdminRequest_default_instance_._instance.get_mutable()->splits_ = const_cast< ::raft_cmdpb::BatchSplitRequest*>(
      ::raft_cmdpb::BatchSplitRequest::internal_default_instance());
}
class AdminRequest::HasBitSetters {
 public:
  static const ::raft_cmdpb::ChangePeerRequest& change_peer(const AdminRequest* msg);
  static const ::raft_cmdpb::SplitRequest& split(const AdminRequest* msg);
  static const ::raft_cmdpb::CompactLogRequest& compact_log(const AdminRequest* msg);
  static const ::raft_cmdpb::TransferLeaderRequest& transfer_leader(const AdminRequest* msg);
  static const ::raft_cmdpb::VerifyHashRequest& verify_hash(const AdminRequest* msg);
  static const ::raft_cmdpb::PrepareMergeRequest& prepare_merge(const AdminRequest* msg);
  static const ::raft_cmdpb::CommitMergeRequest& commit_merge(const AdminRequest* msg);
  static const ::raft_cmdpb::RollbackMergeRequest& rollback_merge(const AdminRequest* msg);
  static const ::raft_cmdpb::BatchSplitRequest& splits(const AdminRequest* msg);
};

const ::raft_cmdpb::ChangePeerRequest&
AdminRequest::HasBitSetters::change_peer(const AdminRequest* msg) {
  return *msg->change_peer_;
}
const ::raft_cmdpb::SplitRequest&
AdminRequest::HasBitSetters::split(const AdminRequest* msg) {
  return *msg->split_;
}
const ::raft_cmdpb::CompactLogRequest&
AdminRequest::HasBitSetters::compact_log(const AdminRequest* msg) {
  return *msg->compact_log_;
}
const ::raft_cmdpb::TransferLeaderRequest&
AdminRequest::HasBitSetters::transfer_leader(const AdminRequest* msg) {
  return *msg->transfer_leader_;
}
const ::raft_cmdpb::VerifyHashRequest&
AdminRequest::HasBitSetters::verify_hash(const AdminRequest* msg) {
  return *msg->verify_hash_;
}
const ::raft_cmdpb::PrepareMergeRequest&
AdminRequest::HasBitSetters::prepare_merge(const AdminRequest* msg) {
  return *msg->prepare_merge_;
}
const ::raft_cmdpb::CommitMergeRequest&
AdminRequest::HasBitSetters::commit_merge(const AdminRequest* msg) {
  return *msg->commit_merge_;
}
const ::raft_cmdpb::RollbackMergeRequest&
AdminRequest::HasBitSetters::rollback_merge(const AdminRequest* msg) {
  return *msg->rollback_merge_;
}
const ::raft_cmdpb::BatchSplitRequest&
AdminRequest::HasBitSetters::splits(const AdminRequest* msg) {
  return *msg->splits_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminRequest::kCmdTypeFieldNumber;
const int AdminRequest::kChangePeerFieldNumber;
const int AdminRequest::kSplitFieldNumber;
const int AdminRequest::kCompactLogFieldNumber;
const int AdminRequest::kTransferLeaderFieldNumber;
const int AdminRequest::kVerifyHashFieldNumber;
const int AdminRequest::kPrepareMergeFieldNumber;
const int AdminRequest::kCommitMergeFieldNumber;
const int AdminRequest::kRollbackMergeFieldNumber;
const int AdminRequest::kSplitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminRequest::AdminRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.AdminRequest)
}
AdminRequest::AdminRequest(const AdminRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_change_peer()) {
    change_peer_ = new ::raft_cmdpb::ChangePeerRequest(*from.change_peer_);
  } else {
    change_peer_ = NULL;
  }
  if (from.has_split()) {
    split_ = new ::raft_cmdpb::SplitRequest(*from.split_);
  } else {
    split_ = NULL;
  }
  if (from.has_compact_log()) {
    compact_log_ = new ::raft_cmdpb::CompactLogRequest(*from.compact_log_);
  } else {
    compact_log_ = NULL;
  }
  if (from.has_transfer_leader()) {
    transfer_leader_ = new ::raft_cmdpb::TransferLeaderRequest(*from.transfer_leader_);
  } else {
    transfer_leader_ = NULL;
  }
  if (from.has_verify_hash()) {
    verify_hash_ = new ::raft_cmdpb::VerifyHashRequest(*from.verify_hash_);
  } else {
    verify_hash_ = NULL;
  }
  if (from.has_prepare_merge()) {
    prepare_merge_ = new ::raft_cmdpb::PrepareMergeRequest(*from.prepare_merge_);
  } else {
    prepare_merge_ = NULL;
  }
  if (from.has_commit_merge()) {
    commit_merge_ = new ::raft_cmdpb::CommitMergeRequest(*from.commit_merge_);
  } else {
    commit_merge_ = NULL;
  }
  if (from.has_rollback_merge()) {
    rollback_merge_ = new ::raft_cmdpb::RollbackMergeRequest(*from.rollback_merge_);
  } else {
    rollback_merge_ = NULL;
  }
  if (from.has_splits()) {
    splits_ = new ::raft_cmdpb::BatchSplitRequest(*from.splits_);
  } else {
    splits_ = NULL;
  }
  cmd_type_ = from.cmd_type_;
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.AdminRequest)
}

void AdminRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AdminRequest_raft_5fcmdpb_2eproto.base);
  ::memset(&change_peer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_type_) -
      reinterpret_cast<char*>(&change_peer_)) + sizeof(cmd_type_));
}

AdminRequest::~AdminRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.AdminRequest)
  SharedDtor();
}

void AdminRequest::SharedDtor() {
  if (this != internal_default_instance()) delete change_peer_;
  if (this != internal_default_instance()) delete split_;
  if (this != internal_default_instance()) delete compact_log_;
  if (this != internal_default_instance()) delete transfer_leader_;
  if (this != internal_default_instance()) delete verify_hash_;
  if (this != internal_default_instance()) delete prepare_merge_;
  if (this != internal_default_instance()) delete commit_merge_;
  if (this != internal_default_instance()) delete rollback_merge_;
  if (this != internal_default_instance()) delete splits_;
}

void AdminRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminRequest& AdminRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AdminRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void AdminRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.AdminRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && change_peer_ != NULL) {
    delete change_peer_;
  }
  change_peer_ = NULL;
  if (GetArenaNoVirtual() == NULL && split_ != NULL) {
    delete split_;
  }
  split_ = NULL;
  if (GetArenaNoVirtual() == NULL && compact_log_ != NULL) {
    delete compact_log_;
  }
  compact_log_ = NULL;
  if (GetArenaNoVirtual() == NULL && transfer_leader_ != NULL) {
    delete transfer_leader_;
  }
  transfer_leader_ = NULL;
  if (GetArenaNoVirtual() == NULL && verify_hash_ != NULL) {
    delete verify_hash_;
  }
  verify_hash_ = NULL;
  if (GetArenaNoVirtual() == NULL && prepare_merge_ != NULL) {
    delete prepare_merge_;
  }
  prepare_merge_ = NULL;
  if (GetArenaNoVirtual() == NULL && commit_merge_ != NULL) {
    delete commit_merge_;
  }
  commit_merge_ = NULL;
  if (GetArenaNoVirtual() == NULL && rollback_merge_ != NULL) {
    delete rollback_merge_;
  }
  rollback_merge_ = NULL;
  if (GetArenaNoVirtual() == NULL && splits_ != NULL) {
    delete splits_;
  }
  splits_ = NULL;
  cmd_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdminRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AdminRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .raft_cmdpb.AdminCmdType cmd_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::raft_cmdpb::AdminCmdType value = static_cast<::raft_cmdpb::AdminCmdType>(val);
        msg->set_cmd_type(value);
        break;
      }
      // .raft_cmdpb.ChangePeerRequest change_peer = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::ChangePeerRequest::_InternalParse;
        object = msg->mutable_change_peer();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.SplitRequest split = 3 [deprecated = true];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::SplitRequest::_InternalParse;
        object = msg->mutable_split();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.CompactLogRequest compact_log = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::CompactLogRequest::_InternalParse;
        object = msg->mutable_compact_log();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::TransferLeaderRequest::_InternalParse;
        object = msg->mutable_transfer_leader();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.VerifyHashRequest verify_hash = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::VerifyHashRequest::_InternalParse;
        object = msg->mutable_verify_hash();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.PrepareMergeRequest prepare_merge = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::PrepareMergeRequest::_InternalParse;
        object = msg->mutable_prepare_merge();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.CommitMergeRequest commit_merge = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::CommitMergeRequest::_InternalParse;
        object = msg->mutable_commit_merge();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.RollbackMergeRequest rollback_merge = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::RollbackMergeRequest::_InternalParse;
        object = msg->mutable_rollback_merge();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.BatchSplitRequest splits = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::BatchSplitRequest::_InternalParse;
        object = msg->mutable_splits();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdminRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.AdminRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .raft_cmdpb.AdminCmdType cmd_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_type(static_cast< ::raft_cmdpb::AdminCmdType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.ChangePeerRequest change_peer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_change_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.SplitRequest split = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_split()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.CompactLogRequest compact_log = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_compact_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transfer_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.VerifyHashRequest verify_hash = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_verify_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.PrepareMergeRequest prepare_merge = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prepare_merge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.CommitMergeRequest commit_merge = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_commit_merge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.RollbackMergeRequest rollback_merge = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rollback_merge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.BatchSplitRequest splits = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_splits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.AdminRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.AdminRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdminRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.AdminRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // .raft_cmdpb.ChangePeerRequest change_peer = 2;
  if (this->has_change_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::change_peer(this), output);
  }

  // .raft_cmdpb.SplitRequest split = 3 [deprecated = true];
  if (this->has_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::split(this), output);
  }

  // .raft_cmdpb.CompactLogRequest compact_log = 4;
  if (this->has_compact_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::compact_log(this), output);
  }

  // .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
  if (this->has_transfer_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::transfer_leader(this), output);
  }

  // .raft_cmdpb.VerifyHashRequest verify_hash = 6;
  if (this->has_verify_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::verify_hash(this), output);
  }

  // .raft_cmdpb.PrepareMergeRequest prepare_merge = 7;
  if (this->has_prepare_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::prepare_merge(this), output);
  }

  // .raft_cmdpb.CommitMergeRequest commit_merge = 8;
  if (this->has_commit_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::commit_merge(this), output);
  }

  // .raft_cmdpb.RollbackMergeRequest rollback_merge = 9;
  if (this->has_rollback_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::rollback_merge(this), output);
  }

  // .raft_cmdpb.BatchSplitRequest splits = 10;
  if (this->has_splits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::splits(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.AdminRequest)
}

::google::protobuf::uint8* AdminRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.AdminRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // .raft_cmdpb.ChangePeerRequest change_peer = 2;
  if (this->has_change_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::change_peer(this), deterministic, target);
  }

  // .raft_cmdpb.SplitRequest split = 3 [deprecated = true];
  if (this->has_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::split(this), deterministic, target);
  }

  // .raft_cmdpb.CompactLogRequest compact_log = 4;
  if (this->has_compact_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::compact_log(this), deterministic, target);
  }

  // .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
  if (this->has_transfer_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::transfer_leader(this), deterministic, target);
  }

  // .raft_cmdpb.VerifyHashRequest verify_hash = 6;
  if (this->has_verify_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::verify_hash(this), deterministic, target);
  }

  // .raft_cmdpb.PrepareMergeRequest prepare_merge = 7;
  if (this->has_prepare_merge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::prepare_merge(this), deterministic, target);
  }

  // .raft_cmdpb.CommitMergeRequest commit_merge = 8;
  if (this->has_commit_merge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::commit_merge(this), deterministic, target);
  }

  // .raft_cmdpb.RollbackMergeRequest rollback_merge = 9;
  if (this->has_rollback_merge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::rollback_merge(this), deterministic, target);
  }

  // .raft_cmdpb.BatchSplitRequest splits = 10;
  if (this->has_splits()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::splits(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.AdminRequest)
  return target;
}

size_t AdminRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.AdminRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .raft_cmdpb.ChangePeerRequest change_peer = 2;
  if (this->has_change_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *change_peer_);
  }

  // .raft_cmdpb.SplitRequest split = 3 [deprecated = true];
  if (this->has_split()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *split_);
  }

  // .raft_cmdpb.CompactLogRequest compact_log = 4;
  if (this->has_compact_log()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *compact_log_);
  }

  // .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
  if (this->has_transfer_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *transfer_leader_);
  }

  // .raft_cmdpb.VerifyHashRequest verify_hash = 6;
  if (this->has_verify_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *verify_hash_);
  }

  // .raft_cmdpb.PrepareMergeRequest prepare_merge = 7;
  if (this->has_prepare_merge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *prepare_merge_);
  }

  // .raft_cmdpb.CommitMergeRequest commit_merge = 8;
  if (this->has_commit_merge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *commit_merge_);
  }

  // .raft_cmdpb.RollbackMergeRequest rollback_merge = 9;
  if (this->has_rollback_merge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rollback_merge_);
  }

  // .raft_cmdpb.BatchSplitRequest splits = 10;
  if (this->has_splits()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *splits_);
  }

  // .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.AdminRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AdminRequest* source =
      ::google::protobuf::DynamicCastToGenerated<AdminRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.AdminRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.AdminRequest)
    MergeFrom(*source);
  }
}

void AdminRequest::MergeFrom(const AdminRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.AdminRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_change_peer()) {
    mutable_change_peer()->::raft_cmdpb::ChangePeerRequest::MergeFrom(from.change_peer());
  }
  if (from.has_split()) {
    mutable_split()->::raft_cmdpb::SplitRequest::MergeFrom(from.split());
  }
  if (from.has_compact_log()) {
    mutable_compact_log()->::raft_cmdpb::CompactLogRequest::MergeFrom(from.compact_log());
  }
  if (from.has_transfer_leader()) {
    mutable_transfer_leader()->::raft_cmdpb::TransferLeaderRequest::MergeFrom(from.transfer_leader());
  }
  if (from.has_verify_hash()) {
    mutable_verify_hash()->::raft_cmdpb::VerifyHashRequest::MergeFrom(from.verify_hash());
  }
  if (from.has_prepare_merge()) {
    mutable_prepare_merge()->::raft_cmdpb::PrepareMergeRequest::MergeFrom(from.prepare_merge());
  }
  if (from.has_commit_merge()) {
    mutable_commit_merge()->::raft_cmdpb::CommitMergeRequest::MergeFrom(from.commit_merge());
  }
  if (from.has_rollback_merge()) {
    mutable_rollback_merge()->::raft_cmdpb::RollbackMergeRequest::MergeFrom(from.rollback_merge());
  }
  if (from.has_splits()) {
    mutable_splits()->::raft_cmdpb::BatchSplitRequest::MergeFrom(from.splits());
  }
  if (from.cmd_type() != 0) {
    set_cmd_type(from.cmd_type());
  }
}

void AdminRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.AdminRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminRequest::CopyFrom(const AdminRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.AdminRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminRequest::IsInitialized() const {
  return true;
}

void AdminRequest::Swap(AdminRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminRequest::InternalSwap(AdminRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(change_peer_, other->change_peer_);
  swap(split_, other->split_);
  swap(compact_log_, other->compact_log_);
  swap(transfer_leader_, other->transfer_leader_);
  swap(verify_hash_, other->verify_hash_);
  swap(prepare_merge_, other->prepare_merge_);
  swap(commit_merge_, other->commit_merge_);
  swap(rollback_merge_, other->rollback_merge_);
  swap(splits_, other->splits_);
  swap(cmd_type_, other->cmd_type_);
}

::google::protobuf::Metadata AdminRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AdminResponse::InitAsDefaultInstance() {
  ::raft_cmdpb::_AdminResponse_default_instance_._instance.get_mutable()->change_peer_ = const_cast< ::raft_cmdpb::ChangePeerResponse*>(
      ::raft_cmdpb::ChangePeerResponse::internal_default_instance());
  ::raft_cmdpb::_AdminResponse_default_instance_._instance.get_mutable()->split_ = const_cast< ::raft_cmdpb::SplitResponse*>(
      ::raft_cmdpb::SplitResponse::internal_default_instance());
  ::raft_cmdpb::_AdminResponse_default_instance_._instance.get_mutable()->compact_log_ = const_cast< ::raft_cmdpb::CompactLogResponse*>(
      ::raft_cmdpb::CompactLogResponse::internal_default_instance());
  ::raft_cmdpb::_AdminResponse_default_instance_._instance.get_mutable()->transfer_leader_ = const_cast< ::raft_cmdpb::TransferLeaderResponse*>(
      ::raft_cmdpb::TransferLeaderResponse::internal_default_instance());
  ::raft_cmdpb::_AdminResponse_default_instance_._instance.get_mutable()->verify_hash_ = const_cast< ::raft_cmdpb::VerifyHashResponse*>(
      ::raft_cmdpb::VerifyHashResponse::internal_default_instance());
  ::raft_cmdpb::_AdminResponse_default_instance_._instance.get_mutable()->prepare_merge_ = const_cast< ::raft_cmdpb::PrepareMergeResponse*>(
      ::raft_cmdpb::PrepareMergeResponse::internal_default_instance());
  ::raft_cmdpb::_AdminResponse_default_instance_._instance.get_mutable()->commit_merge_ = const_cast< ::raft_cmdpb::CommitMergeResponse*>(
      ::raft_cmdpb::CommitMergeResponse::internal_default_instance());
  ::raft_cmdpb::_AdminResponse_default_instance_._instance.get_mutable()->rollback_merge_ = const_cast< ::raft_cmdpb::RollbackMergeResponse*>(
      ::raft_cmdpb::RollbackMergeResponse::internal_default_instance());
  ::raft_cmdpb::_AdminResponse_default_instance_._instance.get_mutable()->splits_ = const_cast< ::raft_cmdpb::BatchSplitResponse*>(
      ::raft_cmdpb::BatchSplitResponse::internal_default_instance());
}
class AdminResponse::HasBitSetters {
 public:
  static const ::raft_cmdpb::ChangePeerResponse& change_peer(const AdminResponse* msg);
  static const ::raft_cmdpb::SplitResponse& split(const AdminResponse* msg);
  static const ::raft_cmdpb::CompactLogResponse& compact_log(const AdminResponse* msg);
  static const ::raft_cmdpb::TransferLeaderResponse& transfer_leader(const AdminResponse* msg);
  static const ::raft_cmdpb::VerifyHashResponse& verify_hash(const AdminResponse* msg);
  static const ::raft_cmdpb::PrepareMergeResponse& prepare_merge(const AdminResponse* msg);
  static const ::raft_cmdpb::CommitMergeResponse& commit_merge(const AdminResponse* msg);
  static const ::raft_cmdpb::RollbackMergeResponse& rollback_merge(const AdminResponse* msg);
  static const ::raft_cmdpb::BatchSplitResponse& splits(const AdminResponse* msg);
};

const ::raft_cmdpb::ChangePeerResponse&
AdminResponse::HasBitSetters::change_peer(const AdminResponse* msg) {
  return *msg->change_peer_;
}
const ::raft_cmdpb::SplitResponse&
AdminResponse::HasBitSetters::split(const AdminResponse* msg) {
  return *msg->split_;
}
const ::raft_cmdpb::CompactLogResponse&
AdminResponse::HasBitSetters::compact_log(const AdminResponse* msg) {
  return *msg->compact_log_;
}
const ::raft_cmdpb::TransferLeaderResponse&
AdminResponse::HasBitSetters::transfer_leader(const AdminResponse* msg) {
  return *msg->transfer_leader_;
}
const ::raft_cmdpb::VerifyHashResponse&
AdminResponse::HasBitSetters::verify_hash(const AdminResponse* msg) {
  return *msg->verify_hash_;
}
const ::raft_cmdpb::PrepareMergeResponse&
AdminResponse::HasBitSetters::prepare_merge(const AdminResponse* msg) {
  return *msg->prepare_merge_;
}
const ::raft_cmdpb::CommitMergeResponse&
AdminResponse::HasBitSetters::commit_merge(const AdminResponse* msg) {
  return *msg->commit_merge_;
}
const ::raft_cmdpb::RollbackMergeResponse&
AdminResponse::HasBitSetters::rollback_merge(const AdminResponse* msg) {
  return *msg->rollback_merge_;
}
const ::raft_cmdpb::BatchSplitResponse&
AdminResponse::HasBitSetters::splits(const AdminResponse* msg) {
  return *msg->splits_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminResponse::kCmdTypeFieldNumber;
const int AdminResponse::kChangePeerFieldNumber;
const int AdminResponse::kSplitFieldNumber;
const int AdminResponse::kCompactLogFieldNumber;
const int AdminResponse::kTransferLeaderFieldNumber;
const int AdminResponse::kVerifyHashFieldNumber;
const int AdminResponse::kPrepareMergeFieldNumber;
const int AdminResponse::kCommitMergeFieldNumber;
const int AdminResponse::kRollbackMergeFieldNumber;
const int AdminResponse::kSplitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminResponse::AdminResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.AdminResponse)
}
AdminResponse::AdminResponse(const AdminResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_change_peer()) {
    change_peer_ = new ::raft_cmdpb::ChangePeerResponse(*from.change_peer_);
  } else {
    change_peer_ = NULL;
  }
  if (from.has_split()) {
    split_ = new ::raft_cmdpb::SplitResponse(*from.split_);
  } else {
    split_ = NULL;
  }
  if (from.has_compact_log()) {
    compact_log_ = new ::raft_cmdpb::CompactLogResponse(*from.compact_log_);
  } else {
    compact_log_ = NULL;
  }
  if (from.has_transfer_leader()) {
    transfer_leader_ = new ::raft_cmdpb::TransferLeaderResponse(*from.transfer_leader_);
  } else {
    transfer_leader_ = NULL;
  }
  if (from.has_verify_hash()) {
    verify_hash_ = new ::raft_cmdpb::VerifyHashResponse(*from.verify_hash_);
  } else {
    verify_hash_ = NULL;
  }
  if (from.has_prepare_merge()) {
    prepare_merge_ = new ::raft_cmdpb::PrepareMergeResponse(*from.prepare_merge_);
  } else {
    prepare_merge_ = NULL;
  }
  if (from.has_commit_merge()) {
    commit_merge_ = new ::raft_cmdpb::CommitMergeResponse(*from.commit_merge_);
  } else {
    commit_merge_ = NULL;
  }
  if (from.has_rollback_merge()) {
    rollback_merge_ = new ::raft_cmdpb::RollbackMergeResponse(*from.rollback_merge_);
  } else {
    rollback_merge_ = NULL;
  }
  if (from.has_splits()) {
    splits_ = new ::raft_cmdpb::BatchSplitResponse(*from.splits_);
  } else {
    splits_ = NULL;
  }
  cmd_type_ = from.cmd_type_;
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.AdminResponse)
}

void AdminResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AdminResponse_raft_5fcmdpb_2eproto.base);
  ::memset(&change_peer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_type_) -
      reinterpret_cast<char*>(&change_peer_)) + sizeof(cmd_type_));
}

AdminResponse::~AdminResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.AdminResponse)
  SharedDtor();
}

void AdminResponse::SharedDtor() {
  if (this != internal_default_instance()) delete change_peer_;
  if (this != internal_default_instance()) delete split_;
  if (this != internal_default_instance()) delete compact_log_;
  if (this != internal_default_instance()) delete transfer_leader_;
  if (this != internal_default_instance()) delete verify_hash_;
  if (this != internal_default_instance()) delete prepare_merge_;
  if (this != internal_default_instance()) delete commit_merge_;
  if (this != internal_default_instance()) delete rollback_merge_;
  if (this != internal_default_instance()) delete splits_;
}

void AdminResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminResponse& AdminResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AdminResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void AdminResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.AdminResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && change_peer_ != NULL) {
    delete change_peer_;
  }
  change_peer_ = NULL;
  if (GetArenaNoVirtual() == NULL && split_ != NULL) {
    delete split_;
  }
  split_ = NULL;
  if (GetArenaNoVirtual() == NULL && compact_log_ != NULL) {
    delete compact_log_;
  }
  compact_log_ = NULL;
  if (GetArenaNoVirtual() == NULL && transfer_leader_ != NULL) {
    delete transfer_leader_;
  }
  transfer_leader_ = NULL;
  if (GetArenaNoVirtual() == NULL && verify_hash_ != NULL) {
    delete verify_hash_;
  }
  verify_hash_ = NULL;
  if (GetArenaNoVirtual() == NULL && prepare_merge_ != NULL) {
    delete prepare_merge_;
  }
  prepare_merge_ = NULL;
  if (GetArenaNoVirtual() == NULL && commit_merge_ != NULL) {
    delete commit_merge_;
  }
  commit_merge_ = NULL;
  if (GetArenaNoVirtual() == NULL && rollback_merge_ != NULL) {
    delete rollback_merge_;
  }
  rollback_merge_ = NULL;
  if (GetArenaNoVirtual() == NULL && splits_ != NULL) {
    delete splits_;
  }
  splits_ = NULL;
  cmd_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdminResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AdminResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .raft_cmdpb.AdminCmdType cmd_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::raft_cmdpb::AdminCmdType value = static_cast<::raft_cmdpb::AdminCmdType>(val);
        msg->set_cmd_type(value);
        break;
      }
      // .raft_cmdpb.ChangePeerResponse change_peer = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::ChangePeerResponse::_InternalParse;
        object = msg->mutable_change_peer();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.SplitResponse split = 3 [deprecated = true];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::SplitResponse::_InternalParse;
        object = msg->mutable_split();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.CompactLogResponse compact_log = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::CompactLogResponse::_InternalParse;
        object = msg->mutable_compact_log();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::TransferLeaderResponse::_InternalParse;
        object = msg->mutable_transfer_leader();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.VerifyHashResponse verify_hash = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::VerifyHashResponse::_InternalParse;
        object = msg->mutable_verify_hash();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.PrepareMergeResponse prepare_merge = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::PrepareMergeResponse::_InternalParse;
        object = msg->mutable_prepare_merge();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.CommitMergeResponse commit_merge = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::CommitMergeResponse::_InternalParse;
        object = msg->mutable_commit_merge();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.RollbackMergeResponse rollback_merge = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::RollbackMergeResponse::_InternalParse;
        object = msg->mutable_rollback_merge();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.BatchSplitResponse splits = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::BatchSplitResponse::_InternalParse;
        object = msg->mutable_splits();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdminResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.AdminResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .raft_cmdpb.AdminCmdType cmd_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_type(static_cast< ::raft_cmdpb::AdminCmdType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.ChangePeerResponse change_peer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_change_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.SplitResponse split = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_split()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.CompactLogResponse compact_log = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_compact_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transfer_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.VerifyHashResponse verify_hash = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_verify_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.PrepareMergeResponse prepare_merge = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prepare_merge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.CommitMergeResponse commit_merge = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_commit_merge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.RollbackMergeResponse rollback_merge = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rollback_merge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.BatchSplitResponse splits = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_splits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.AdminResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.AdminResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdminResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.AdminResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // .raft_cmdpb.ChangePeerResponse change_peer = 2;
  if (this->has_change_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::change_peer(this), output);
  }

  // .raft_cmdpb.SplitResponse split = 3 [deprecated = true];
  if (this->has_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::split(this), output);
  }

  // .raft_cmdpb.CompactLogResponse compact_log = 4;
  if (this->has_compact_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::compact_log(this), output);
  }

  // .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
  if (this->has_transfer_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::transfer_leader(this), output);
  }

  // .raft_cmdpb.VerifyHashResponse verify_hash = 6;
  if (this->has_verify_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::verify_hash(this), output);
  }

  // .raft_cmdpb.PrepareMergeResponse prepare_merge = 7;
  if (this->has_prepare_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::prepare_merge(this), output);
  }

  // .raft_cmdpb.CommitMergeResponse commit_merge = 8;
  if (this->has_commit_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::commit_merge(this), output);
  }

  // .raft_cmdpb.RollbackMergeResponse rollback_merge = 9;
  if (this->has_rollback_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::rollback_merge(this), output);
  }

  // .raft_cmdpb.BatchSplitResponse splits = 10;
  if (this->has_splits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::splits(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.AdminResponse)
}

::google::protobuf::uint8* AdminResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.AdminResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // .raft_cmdpb.ChangePeerResponse change_peer = 2;
  if (this->has_change_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::change_peer(this), deterministic, target);
  }

  // .raft_cmdpb.SplitResponse split = 3 [deprecated = true];
  if (this->has_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::split(this), deterministic, target);
  }

  // .raft_cmdpb.CompactLogResponse compact_log = 4;
  if (this->has_compact_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::compact_log(this), deterministic, target);
  }

  // .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
  if (this->has_transfer_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::transfer_leader(this), deterministic, target);
  }

  // .raft_cmdpb.VerifyHashResponse verify_hash = 6;
  if (this->has_verify_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::verify_hash(this), deterministic, target);
  }

  // .raft_cmdpb.PrepareMergeResponse prepare_merge = 7;
  if (this->has_prepare_merge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::prepare_merge(this), deterministic, target);
  }

  // .raft_cmdpb.CommitMergeResponse commit_merge = 8;
  if (this->has_commit_merge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::commit_merge(this), deterministic, target);
  }

  // .raft_cmdpb.RollbackMergeResponse rollback_merge = 9;
  if (this->has_rollback_merge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::rollback_merge(this), deterministic, target);
  }

  // .raft_cmdpb.BatchSplitResponse splits = 10;
  if (this->has_splits()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::splits(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.AdminResponse)
  return target;
}

size_t AdminResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.AdminResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .raft_cmdpb.ChangePeerResponse change_peer = 2;
  if (this->has_change_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *change_peer_);
  }

  // .raft_cmdpb.SplitResponse split = 3 [deprecated = true];
  if (this->has_split()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *split_);
  }

  // .raft_cmdpb.CompactLogResponse compact_log = 4;
  if (this->has_compact_log()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *compact_log_);
  }

  // .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
  if (this->has_transfer_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *transfer_leader_);
  }

  // .raft_cmdpb.VerifyHashResponse verify_hash = 6;
  if (this->has_verify_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *verify_hash_);
  }

  // .raft_cmdpb.PrepareMergeResponse prepare_merge = 7;
  if (this->has_prepare_merge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *prepare_merge_);
  }

  // .raft_cmdpb.CommitMergeResponse commit_merge = 8;
  if (this->has_commit_merge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *commit_merge_);
  }

  // .raft_cmdpb.RollbackMergeResponse rollback_merge = 9;
  if (this->has_rollback_merge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rollback_merge_);
  }

  // .raft_cmdpb.BatchSplitResponse splits = 10;
  if (this->has_splits()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *splits_);
  }

  // .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.AdminResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AdminResponse* source =
      ::google::protobuf::DynamicCastToGenerated<AdminResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.AdminResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.AdminResponse)
    MergeFrom(*source);
  }
}

void AdminResponse::MergeFrom(const AdminResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.AdminResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_change_peer()) {
    mutable_change_peer()->::raft_cmdpb::ChangePeerResponse::MergeFrom(from.change_peer());
  }
  if (from.has_split()) {
    mutable_split()->::raft_cmdpb::SplitResponse::MergeFrom(from.split());
  }
  if (from.has_compact_log()) {
    mutable_compact_log()->::raft_cmdpb::CompactLogResponse::MergeFrom(from.compact_log());
  }
  if (from.has_transfer_leader()) {
    mutable_transfer_leader()->::raft_cmdpb::TransferLeaderResponse::MergeFrom(from.transfer_leader());
  }
  if (from.has_verify_hash()) {
    mutable_verify_hash()->::raft_cmdpb::VerifyHashResponse::MergeFrom(from.verify_hash());
  }
  if (from.has_prepare_merge()) {
    mutable_prepare_merge()->::raft_cmdpb::PrepareMergeResponse::MergeFrom(from.prepare_merge());
  }
  if (from.has_commit_merge()) {
    mutable_commit_merge()->::raft_cmdpb::CommitMergeResponse::MergeFrom(from.commit_merge());
  }
  if (from.has_rollback_merge()) {
    mutable_rollback_merge()->::raft_cmdpb::RollbackMergeResponse::MergeFrom(from.rollback_merge());
  }
  if (from.has_splits()) {
    mutable_splits()->::raft_cmdpb::BatchSplitResponse::MergeFrom(from.splits());
  }
  if (from.cmd_type() != 0) {
    set_cmd_type(from.cmd_type());
  }
}

void AdminResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.AdminResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminResponse::CopyFrom(const AdminResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.AdminResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminResponse::IsInitialized() const {
  return true;
}

void AdminResponse::Swap(AdminResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminResponse::InternalSwap(AdminResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(change_peer_, other->change_peer_);
  swap(split_, other->split_);
  swap(compact_log_, other->compact_log_);
  swap(transfer_leader_, other->transfer_leader_);
  swap(verify_hash_, other->verify_hash_);
  swap(prepare_merge_, other->prepare_merge_);
  swap(commit_merge_, other->commit_merge_);
  swap(rollback_merge_, other->rollback_merge_);
  swap(splits_, other->splits_);
  swap(cmd_type_, other->cmd_type_);
}

::google::protobuf::Metadata AdminResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RegionLeaderRequest::InitAsDefaultInstance() {
}
class RegionLeaderRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionLeaderRequest::RegionLeaderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RegionLeaderRequest)
}
RegionLeaderRequest::RegionLeaderRequest(const RegionLeaderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RegionLeaderRequest)
}

void RegionLeaderRequest::SharedCtor() {
}

RegionLeaderRequest::~RegionLeaderRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RegionLeaderRequest)
  SharedDtor();
}

void RegionLeaderRequest::SharedDtor() {
}

void RegionLeaderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionLeaderRequest& RegionLeaderRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RegionLeaderRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void RegionLeaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RegionLeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegionLeaderRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RegionLeaderRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegionLeaderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RegionLeaderRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RegionLeaderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RegionLeaderRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegionLeaderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RegionLeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RegionLeaderRequest)
}

::google::protobuf::uint8* RegionLeaderRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RegionLeaderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RegionLeaderRequest)
  return target;
}

size_t RegionLeaderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RegionLeaderRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionLeaderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RegionLeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionLeaderRequest* source =
      ::google::protobuf::DynamicCastToGenerated<RegionLeaderRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RegionLeaderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RegionLeaderRequest)
    MergeFrom(*source);
  }
}

void RegionLeaderRequest::MergeFrom(const RegionLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RegionLeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RegionLeaderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RegionLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionLeaderRequest::CopyFrom(const RegionLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RegionLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionLeaderRequest::IsInitialized() const {
  return true;
}

void RegionLeaderRequest::Swap(RegionLeaderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionLeaderRequest::InternalSwap(RegionLeaderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegionLeaderRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RegionLeaderResponse::InitAsDefaultInstance() {
  ::raft_cmdpb::_RegionLeaderResponse_default_instance_._instance.get_mutable()->leader_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}
class RegionLeaderResponse::HasBitSetters {
 public:
  static const ::metapb::Peer& leader(const RegionLeaderResponse* msg);
};

const ::metapb::Peer&
RegionLeaderResponse::HasBitSetters::leader(const RegionLeaderResponse* msg) {
  return *msg->leader_;
}
void RegionLeaderResponse::clear_leader() {
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) {
    delete leader_;
  }
  leader_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionLeaderResponse::kLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionLeaderResponse::RegionLeaderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RegionLeaderResponse)
}
RegionLeaderResponse::RegionLeaderResponse(const RegionLeaderResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_leader()) {
    leader_ = new ::metapb::Peer(*from.leader_);
  } else {
    leader_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RegionLeaderResponse)
}

void RegionLeaderResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RegionLeaderResponse_raft_5fcmdpb_2eproto.base);
  leader_ = NULL;
}

RegionLeaderResponse::~RegionLeaderResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RegionLeaderResponse)
  SharedDtor();
}

void RegionLeaderResponse::SharedDtor() {
  if (this != internal_default_instance()) delete leader_;
}

void RegionLeaderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionLeaderResponse& RegionLeaderResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RegionLeaderResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void RegionLeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RegionLeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && leader_ != NULL) {
    delete leader_;
  }
  leader_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegionLeaderResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RegionLeaderResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .metapb.Peer leader = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Peer::_InternalParse;
        object = msg->mutable_leader();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegionLeaderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RegionLeaderResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Peer leader = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RegionLeaderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RegionLeaderResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegionLeaderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RegionLeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Peer leader = 1;
  if (this->has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::leader(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RegionLeaderResponse)
}

::google::protobuf::uint8* RegionLeaderResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RegionLeaderResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Peer leader = 1;
  if (this->has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::leader(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RegionLeaderResponse)
  return target;
}

size_t RegionLeaderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RegionLeaderResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metapb.Peer leader = 1;
  if (this->has_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *leader_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionLeaderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RegionLeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionLeaderResponse* source =
      ::google::protobuf::DynamicCastToGenerated<RegionLeaderResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RegionLeaderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RegionLeaderResponse)
    MergeFrom(*source);
  }
}

void RegionLeaderResponse::MergeFrom(const RegionLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RegionLeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_leader()) {
    mutable_leader()->::metapb::Peer::MergeFrom(from.leader());
  }
}

void RegionLeaderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RegionLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionLeaderResponse::CopyFrom(const RegionLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RegionLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionLeaderResponse::IsInitialized() const {
  return true;
}

void RegionLeaderResponse::Swap(RegionLeaderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionLeaderResponse::InternalSwap(RegionLeaderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(leader_, other->leader_);
}

::google::protobuf::Metadata RegionLeaderResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RegionDetailRequest::InitAsDefaultInstance() {
}
class RegionDetailRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionDetailRequest::RegionDetailRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RegionDetailRequest)
}
RegionDetailRequest::RegionDetailRequest(const RegionDetailRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RegionDetailRequest)
}

void RegionDetailRequest::SharedCtor() {
}

RegionDetailRequest::~RegionDetailRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RegionDetailRequest)
  SharedDtor();
}

void RegionDetailRequest::SharedDtor() {
}

void RegionDetailRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionDetailRequest& RegionDetailRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RegionDetailRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void RegionDetailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RegionDetailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegionDetailRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RegionDetailRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegionDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RegionDetailRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RegionDetailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RegionDetailRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegionDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RegionDetailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RegionDetailRequest)
}

::google::protobuf::uint8* RegionDetailRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RegionDetailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RegionDetailRequest)
  return target;
}

size_t RegionDetailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RegionDetailRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionDetailRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RegionDetailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionDetailRequest* source =
      ::google::protobuf::DynamicCastToGenerated<RegionDetailRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RegionDetailRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RegionDetailRequest)
    MergeFrom(*source);
  }
}

void RegionDetailRequest::MergeFrom(const RegionDetailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RegionDetailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RegionDetailRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RegionDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionDetailRequest::CopyFrom(const RegionDetailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RegionDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionDetailRequest::IsInitialized() const {
  return true;
}

void RegionDetailRequest::Swap(RegionDetailRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionDetailRequest::InternalSwap(RegionDetailRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegionDetailRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RegionDetailResponse::InitAsDefaultInstance() {
  ::raft_cmdpb::_RegionDetailResponse_default_instance_._instance.get_mutable()->region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
  ::raft_cmdpb::_RegionDetailResponse_default_instance_._instance.get_mutable()->leader_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}
class RegionDetailResponse::HasBitSetters {
 public:
  static const ::metapb::Region& region(const RegionDetailResponse* msg);
  static const ::metapb::Peer& leader(const RegionDetailResponse* msg);
};

const ::metapb::Region&
RegionDetailResponse::HasBitSetters::region(const RegionDetailResponse* msg) {
  return *msg->region_;
}
const ::metapb::Peer&
RegionDetailResponse::HasBitSetters::leader(const RegionDetailResponse* msg) {
  return *msg->leader_;
}
void RegionDetailResponse::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) {
    delete region_;
  }
  region_ = NULL;
}
void RegionDetailResponse::clear_leader() {
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) {
    delete leader_;
  }
  leader_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionDetailResponse::kRegionFieldNumber;
const int RegionDetailResponse::kLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionDetailResponse::RegionDetailResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RegionDetailResponse)
}
RegionDetailResponse::RegionDetailResponse(const RegionDetailResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region()) {
    region_ = new ::metapb::Region(*from.region_);
  } else {
    region_ = NULL;
  }
  if (from.has_leader()) {
    leader_ = new ::metapb::Peer(*from.leader_);
  } else {
    leader_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RegionDetailResponse)
}

void RegionDetailResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RegionDetailResponse_raft_5fcmdpb_2eproto.base);
  ::memset(&region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leader_) -
      reinterpret_cast<char*>(&region_)) + sizeof(leader_));
}

RegionDetailResponse::~RegionDetailResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RegionDetailResponse)
  SharedDtor();
}

void RegionDetailResponse::SharedDtor() {
  if (this != internal_default_instance()) delete region_;
  if (this != internal_default_instance()) delete leader_;
}

void RegionDetailResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegionDetailResponse& RegionDetailResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RegionDetailResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void RegionDetailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RegionDetailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && region_ != NULL) {
    delete region_;
  }
  region_ = NULL;
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) {
    delete leader_;
  }
  leader_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegionDetailResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RegionDetailResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .metapb.Region region = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Region::_InternalParse;
        object = msg->mutable_region();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .metapb.Peer leader = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Peer::_InternalParse;
        object = msg->mutable_leader();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegionDetailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RegionDetailResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .metapb.Region region = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Peer leader = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RegionDetailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RegionDetailResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegionDetailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RegionDetailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Region region = 1;
  if (this->has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::region(this), output);
  }

  // .metapb.Peer leader = 2;
  if (this->has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::leader(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RegionDetailResponse)
}

::google::protobuf::uint8* RegionDetailResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RegionDetailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metapb.Region region = 1;
  if (this->has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::region(this), deterministic, target);
  }

  // .metapb.Peer leader = 2;
  if (this->has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::leader(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RegionDetailResponse)
  return target;
}

size_t RegionDetailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RegionDetailResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metapb.Region region = 1;
  if (this->has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *region_);
  }

  // .metapb.Peer leader = 2;
  if (this->has_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *leader_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionDetailResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RegionDetailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionDetailResponse* source =
      ::google::protobuf::DynamicCastToGenerated<RegionDetailResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RegionDetailResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RegionDetailResponse)
    MergeFrom(*source);
  }
}

void RegionDetailResponse::MergeFrom(const RegionDetailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RegionDetailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
  if (from.has_leader()) {
    mutable_leader()->::metapb::Peer::MergeFrom(from.leader());
  }
}

void RegionDetailResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RegionDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionDetailResponse::CopyFrom(const RegionDetailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RegionDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionDetailResponse::IsInitialized() const {
  return true;
}

void RegionDetailResponse::Swap(RegionDetailResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionDetailResponse::InternalSwap(RegionDetailResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(region_, other->region_);
  swap(leader_, other->leader_);
}

::google::protobuf::Metadata RegionDetailResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StatusRequest::InitAsDefaultInstance() {
  ::raft_cmdpb::_StatusRequest_default_instance_._instance.get_mutable()->region_leader_ = const_cast< ::raft_cmdpb::RegionLeaderRequest*>(
      ::raft_cmdpb::RegionLeaderRequest::internal_default_instance());
  ::raft_cmdpb::_StatusRequest_default_instance_._instance.get_mutable()->region_detail_ = const_cast< ::raft_cmdpb::RegionDetailRequest*>(
      ::raft_cmdpb::RegionDetailRequest::internal_default_instance());
}
class StatusRequest::HasBitSetters {
 public:
  static const ::raft_cmdpb::RegionLeaderRequest& region_leader(const StatusRequest* msg);
  static const ::raft_cmdpb::RegionDetailRequest& region_detail(const StatusRequest* msg);
};

const ::raft_cmdpb::RegionLeaderRequest&
StatusRequest::HasBitSetters::region_leader(const StatusRequest* msg) {
  return *msg->region_leader_;
}
const ::raft_cmdpb::RegionDetailRequest&
StatusRequest::HasBitSetters::region_detail(const StatusRequest* msg) {
  return *msg->region_detail_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusRequest::kCmdTypeFieldNumber;
const int StatusRequest::kRegionLeaderFieldNumber;
const int StatusRequest::kRegionDetailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusRequest::StatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.StatusRequest)
}
StatusRequest::StatusRequest(const StatusRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region_leader()) {
    region_leader_ = new ::raft_cmdpb::RegionLeaderRequest(*from.region_leader_);
  } else {
    region_leader_ = NULL;
  }
  if (from.has_region_detail()) {
    region_detail_ = new ::raft_cmdpb::RegionDetailRequest(*from.region_detail_);
  } else {
    region_detail_ = NULL;
  }
  cmd_type_ = from.cmd_type_;
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.StatusRequest)
}

void StatusRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StatusRequest_raft_5fcmdpb_2eproto.base);
  ::memset(&region_leader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_type_) -
      reinterpret_cast<char*>(&region_leader_)) + sizeof(cmd_type_));
}

StatusRequest::~StatusRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.StatusRequest)
  SharedDtor();
}

void StatusRequest::SharedDtor() {
  if (this != internal_default_instance()) delete region_leader_;
  if (this != internal_default_instance()) delete region_detail_;
}

void StatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusRequest& StatusRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StatusRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void StatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.StatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && region_leader_ != NULL) {
    delete region_leader_;
  }
  region_leader_ = NULL;
  if (GetArenaNoVirtual() == NULL && region_detail_ != NULL) {
    delete region_detail_;
  }
  region_detail_ = NULL;
  cmd_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StatusRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StatusRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .raft_cmdpb.StatusCmdType cmd_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::raft_cmdpb::StatusCmdType value = static_cast<::raft_cmdpb::StatusCmdType>(val);
        msg->set_cmd_type(value);
        break;
      }
      // .raft_cmdpb.RegionLeaderRequest region_leader = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::RegionLeaderRequest::_InternalParse;
        object = msg->mutable_region_leader();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.RegionDetailRequest region_detail = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::RegionDetailRequest::_InternalParse;
        object = msg->mutable_region_detail();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.StatusRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .raft_cmdpb.StatusCmdType cmd_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_type(static_cast< ::raft_cmdpb::StatusCmdType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.RegionLeaderRequest region_leader = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_region_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.RegionDetailRequest region_detail = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_region_detail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.StatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.StatusRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.StatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.StatusCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // .raft_cmdpb.RegionLeaderRequest region_leader = 2;
  if (this->has_region_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::region_leader(this), output);
  }

  // .raft_cmdpb.RegionDetailRequest region_detail = 3;
  if (this->has_region_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::region_detail(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.StatusRequest)
}

::google::protobuf::uint8* StatusRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.StatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.StatusCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // .raft_cmdpb.RegionLeaderRequest region_leader = 2;
  if (this->has_region_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::region_leader(this), deterministic, target);
  }

  // .raft_cmdpb.RegionDetailRequest region_detail = 3;
  if (this->has_region_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::region_detail(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.StatusRequest)
  return target;
}

size_t StatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.StatusRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .raft_cmdpb.RegionLeaderRequest region_leader = 2;
  if (this->has_region_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *region_leader_);
  }

  // .raft_cmdpb.RegionDetailRequest region_detail = 3;
  if (this->has_region_detail()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *region_detail_);
  }

  // .raft_cmdpb.StatusCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.StatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusRequest* source =
      ::google::protobuf::DynamicCastToGenerated<StatusRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.StatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.StatusRequest)
    MergeFrom(*source);
  }
}

void StatusRequest::MergeFrom(const StatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.StatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_region_leader()) {
    mutable_region_leader()->::raft_cmdpb::RegionLeaderRequest::MergeFrom(from.region_leader());
  }
  if (from.has_region_detail()) {
    mutable_region_detail()->::raft_cmdpb::RegionDetailRequest::MergeFrom(from.region_detail());
  }
  if (from.cmd_type() != 0) {
    set_cmd_type(from.cmd_type());
  }
}

void StatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.StatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusRequest::CopyFrom(const StatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.StatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusRequest::IsInitialized() const {
  return true;
}

void StatusRequest::Swap(StatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusRequest::InternalSwap(StatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(region_leader_, other->region_leader_);
  swap(region_detail_, other->region_detail_);
  swap(cmd_type_, other->cmd_type_);
}

::google::protobuf::Metadata StatusRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StatusResponse::InitAsDefaultInstance() {
  ::raft_cmdpb::_StatusResponse_default_instance_._instance.get_mutable()->region_leader_ = const_cast< ::raft_cmdpb::RegionLeaderResponse*>(
      ::raft_cmdpb::RegionLeaderResponse::internal_default_instance());
  ::raft_cmdpb::_StatusResponse_default_instance_._instance.get_mutable()->region_detail_ = const_cast< ::raft_cmdpb::RegionDetailResponse*>(
      ::raft_cmdpb::RegionDetailResponse::internal_default_instance());
}
class StatusResponse::HasBitSetters {
 public:
  static const ::raft_cmdpb::RegionLeaderResponse& region_leader(const StatusResponse* msg);
  static const ::raft_cmdpb::RegionDetailResponse& region_detail(const StatusResponse* msg);
};

const ::raft_cmdpb::RegionLeaderResponse&
StatusResponse::HasBitSetters::region_leader(const StatusResponse* msg) {
  return *msg->region_leader_;
}
const ::raft_cmdpb::RegionDetailResponse&
StatusResponse::HasBitSetters::region_detail(const StatusResponse* msg) {
  return *msg->region_detail_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusResponse::kCmdTypeFieldNumber;
const int StatusResponse::kRegionLeaderFieldNumber;
const int StatusResponse::kRegionDetailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusResponse::StatusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.StatusResponse)
}
StatusResponse::StatusResponse(const StatusResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region_leader()) {
    region_leader_ = new ::raft_cmdpb::RegionLeaderResponse(*from.region_leader_);
  } else {
    region_leader_ = NULL;
  }
  if (from.has_region_detail()) {
    region_detail_ = new ::raft_cmdpb::RegionDetailResponse(*from.region_detail_);
  } else {
    region_detail_ = NULL;
  }
  cmd_type_ = from.cmd_type_;
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.StatusResponse)
}

void StatusResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StatusResponse_raft_5fcmdpb_2eproto.base);
  ::memset(&region_leader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_type_) -
      reinterpret_cast<char*>(&region_leader_)) + sizeof(cmd_type_));
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.StatusResponse)
  SharedDtor();
}

void StatusResponse::SharedDtor() {
  if (this != internal_default_instance()) delete region_leader_;
  if (this != internal_default_instance()) delete region_detail_;
}

void StatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusResponse& StatusResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StatusResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.StatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && region_leader_ != NULL) {
    delete region_leader_;
  }
  region_leader_ = NULL;
  if (GetArenaNoVirtual() == NULL && region_detail_ != NULL) {
    delete region_detail_;
  }
  region_detail_ = NULL;
  cmd_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StatusResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StatusResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .raft_cmdpb.StatusCmdType cmd_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::raft_cmdpb::StatusCmdType value = static_cast<::raft_cmdpb::StatusCmdType>(val);
        msg->set_cmd_type(value);
        break;
      }
      // .raft_cmdpb.RegionLeaderResponse region_leader = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::RegionLeaderResponse::_InternalParse;
        object = msg->mutable_region_leader();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.RegionDetailResponse region_detail = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::RegionDetailResponse::_InternalParse;
        object = msg->mutable_region_detail();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.StatusResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .raft_cmdpb.StatusCmdType cmd_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_type(static_cast< ::raft_cmdpb::StatusCmdType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.RegionLeaderResponse region_leader = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_region_leader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.RegionDetailResponse region_detail = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_region_detail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.StatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.StatusResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.StatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.StatusCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // .raft_cmdpb.RegionLeaderResponse region_leader = 2;
  if (this->has_region_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::region_leader(this), output);
  }

  // .raft_cmdpb.RegionDetailResponse region_detail = 3;
  if (this->has_region_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::region_detail(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.StatusResponse)
}

::google::protobuf::uint8* StatusResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.StatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.StatusCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // .raft_cmdpb.RegionLeaderResponse region_leader = 2;
  if (this->has_region_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::region_leader(this), deterministic, target);
  }

  // .raft_cmdpb.RegionDetailResponse region_detail = 3;
  if (this->has_region_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::region_detail(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.StatusResponse)
  return target;
}

size_t StatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.StatusResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .raft_cmdpb.RegionLeaderResponse region_leader = 2;
  if (this->has_region_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *region_leader_);
  }

  // .raft_cmdpb.RegionDetailResponse region_detail = 3;
  if (this->has_region_detail()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *region_detail_);
  }

  // .raft_cmdpb.StatusCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.StatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusResponse* source =
      ::google::protobuf::DynamicCastToGenerated<StatusResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.StatusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.StatusResponse)
    MergeFrom(*source);
  }
}

void StatusResponse::MergeFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.StatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_region_leader()) {
    mutable_region_leader()->::raft_cmdpb::RegionLeaderResponse::MergeFrom(from.region_leader());
  }
  if (from.has_region_detail()) {
    mutable_region_detail()->::raft_cmdpb::RegionDetailResponse::MergeFrom(from.region_detail());
  }
  if (from.cmd_type() != 0) {
    set_cmd_type(from.cmd_type());
  }
}

void StatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {
  return true;
}

void StatusResponse::Swap(StatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusResponse::InternalSwap(StatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(region_leader_, other->region_leader_);
  swap(region_detail_, other->region_detail_);
  swap(cmd_type_, other->cmd_type_);
}

::google::protobuf::Metadata StatusResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RaftRequestHeader::InitAsDefaultInstance() {
  ::raft_cmdpb::_RaftRequestHeader_default_instance_._instance.get_mutable()->peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
  ::raft_cmdpb::_RaftRequestHeader_default_instance_._instance.get_mutable()->region_epoch_ = const_cast< ::metapb::RegionEpoch*>(
      ::metapb::RegionEpoch::internal_default_instance());
}
class RaftRequestHeader::HasBitSetters {
 public:
  static const ::metapb::Peer& peer(const RaftRequestHeader* msg);
  static const ::metapb::RegionEpoch& region_epoch(const RaftRequestHeader* msg);
};

const ::metapb::Peer&
RaftRequestHeader::HasBitSetters::peer(const RaftRequestHeader* msg) {
  return *msg->peer_;
}
const ::metapb::RegionEpoch&
RaftRequestHeader::HasBitSetters::region_epoch(const RaftRequestHeader* msg) {
  return *msg->region_epoch_;
}
void RaftRequestHeader::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
}
void RaftRequestHeader::clear_region_epoch() {
  if (GetArenaNoVirtual() == NULL && region_epoch_ != NULL) {
    delete region_epoch_;
  }
  region_epoch_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftRequestHeader::kRegionIdFieldNumber;
const int RaftRequestHeader::kPeerFieldNumber;
const int RaftRequestHeader::kReadQuorumFieldNumber;
const int RaftRequestHeader::kUuidFieldNumber;
const int RaftRequestHeader::kRegionEpochFieldNumber;
const int RaftRequestHeader::kTermFieldNumber;
const int RaftRequestHeader::kSyncLogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftRequestHeader::RaftRequestHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RaftRequestHeader)
}
RaftRequestHeader::RaftRequestHeader(const RaftRequestHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uuid().size() > 0) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_peer()) {
    peer_ = new ::metapb::Peer(*from.peer_);
  } else {
    peer_ = NULL;
  }
  if (from.has_region_epoch()) {
    region_epoch_ = new ::metapb::RegionEpoch(*from.region_epoch_);
  } else {
    region_epoch_ = NULL;
  }
  ::memcpy(&region_id_, &from.region_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sync_log_) -
    reinterpret_cast<char*>(&region_id_)) + sizeof(sync_log_));
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RaftRequestHeader)
}

void RaftRequestHeader::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RaftRequestHeader_raft_5fcmdpb_2eproto.base);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&peer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sync_log_) -
      reinterpret_cast<char*>(&peer_)) + sizeof(sync_log_));
}

RaftRequestHeader::~RaftRequestHeader() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RaftRequestHeader)
  SharedDtor();
}

void RaftRequestHeader::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete peer_;
  if (this != internal_default_instance()) delete region_epoch_;
}

void RaftRequestHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RaftRequestHeader& RaftRequestHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RaftRequestHeader_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void RaftRequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RaftRequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
  if (GetArenaNoVirtual() == NULL && region_epoch_ != NULL) {
    delete region_epoch_;
  }
  region_epoch_ = NULL;
  ::memset(&region_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sync_log_) -
      reinterpret_cast<char*>(&region_id_)) + sizeof(sync_log_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RaftRequestHeader::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RaftRequestHeader*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // uint64 region_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_region_id(value);
        break;
      }
      // .metapb.Peer peer = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::Peer::_InternalParse;
        object = msg->mutable_peer();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // bool read_quorum = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_read_quorum(value);
        break;
      }
      // bytes uuid = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_uuid();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .metapb.RegionEpoch region_epoch = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::metapb::RegionEpoch::_InternalParse;
        object = msg->mutable_region_epoch();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // uint64 term = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_term(value);
        break;
      }
      // bool sync_log = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        bool value = val;
        msg->set_sync_log(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RaftRequestHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RaftRequestHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 region_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Peer peer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool read_quorum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_quorum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes uuid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.RegionEpoch region_epoch = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_region_epoch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool sync_log = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_log_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RaftRequestHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RaftRequestHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RaftRequestHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RaftRequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 region_id = 1;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->region_id(), output);
  }

  // .metapb.Peer peer = 2;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::peer(this), output);
  }

  // bool read_quorum = 3;
  if (this->read_quorum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->read_quorum(), output);
  }

  // bytes uuid = 4;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->uuid(), output);
  }

  // .metapb.RegionEpoch region_epoch = 5;
  if (this->has_region_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::region_epoch(this), output);
  }

  // uint64 term = 6;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->term(), output);
  }

  // bool sync_log = 7;
  if (this->sync_log() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->sync_log(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RaftRequestHeader)
}

::google::protobuf::uint8* RaftRequestHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RaftRequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 region_id = 1;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->region_id(), target);
  }

  // .metapb.Peer peer = 2;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::peer(this), deterministic, target);
  }

  // bool read_quorum = 3;
  if (this->read_quorum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->read_quorum(), target);
  }

  // bytes uuid = 4;
  if (this->uuid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->uuid(), target);
  }

  // .metapb.RegionEpoch region_epoch = 5;
  if (this->has_region_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::region_epoch(this), deterministic, target);
  }

  // uint64 term = 6;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->term(), target);
  }

  // bool sync_log = 7;
  if (this->sync_log() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->sync_log(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RaftRequestHeader)
  return target;
}

size_t RaftRequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RaftRequestHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes uuid = 4;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uuid());
  }

  // .metapb.Peer peer = 2;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  // .metapb.RegionEpoch region_epoch = 5;
  if (this->has_region_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *region_epoch_);
  }

  // uint64 region_id = 1;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->region_id());
  }

  // uint64 term = 6;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // bool read_quorum = 3;
  if (this->read_quorum() != 0) {
    total_size += 1 + 1;
  }

  // bool sync_log = 7;
  if (this->sync_log() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RaftRequestHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RaftRequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const RaftRequestHeader* source =
      ::google::protobuf::DynamicCastToGenerated<RaftRequestHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RaftRequestHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RaftRequestHeader)
    MergeFrom(*source);
  }
}

void RaftRequestHeader::MergeFrom(const RaftRequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RaftRequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
  if (from.has_region_epoch()) {
    mutable_region_epoch()->::metapb::RegionEpoch::MergeFrom(from.region_epoch());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.read_quorum() != 0) {
    set_read_quorum(from.read_quorum());
  }
  if (from.sync_log() != 0) {
    set_sync_log(from.sync_log());
  }
}

void RaftRequestHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RaftRequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftRequestHeader::CopyFrom(const RaftRequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RaftRequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftRequestHeader::IsInitialized() const {
  return true;
}

void RaftRequestHeader::Swap(RaftRequestHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftRequestHeader::InternalSwap(RaftRequestHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uuid_.Swap(&other->uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(peer_, other->peer_);
  swap(region_epoch_, other->region_epoch_);
  swap(region_id_, other->region_id_);
  swap(term_, other->term_);
  swap(read_quorum_, other->read_quorum_);
  swap(sync_log_, other->sync_log_);
}

::google::protobuf::Metadata RaftRequestHeader::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RaftResponseHeader::InitAsDefaultInstance() {
  ::raft_cmdpb::_RaftResponseHeader_default_instance_._instance.get_mutable()->error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}
class RaftResponseHeader::HasBitSetters {
 public:
  static const ::errorpb::Error& error(const RaftResponseHeader* msg);
};

const ::errorpb::Error&
RaftResponseHeader::HasBitSetters::error(const RaftResponseHeader* msg) {
  return *msg->error_;
}
void RaftResponseHeader::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftResponseHeader::kErrorFieldNumber;
const int RaftResponseHeader::kUuidFieldNumber;
const int RaftResponseHeader::kCurrentTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftResponseHeader::RaftResponseHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RaftResponseHeader)
}
RaftResponseHeader::RaftResponseHeader(const RaftResponseHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uuid().size() > 0) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_error()) {
    error_ = new ::errorpb::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  current_term_ = from.current_term_;
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RaftResponseHeader)
}

void RaftResponseHeader::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RaftResponseHeader_raft_5fcmdpb_2eproto.base);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_term_) -
      reinterpret_cast<char*>(&error_)) + sizeof(current_term_));
}

RaftResponseHeader::~RaftResponseHeader() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RaftResponseHeader)
  SharedDtor();
}

void RaftResponseHeader::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete error_;
}

void RaftResponseHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RaftResponseHeader& RaftResponseHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RaftResponseHeader_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void RaftResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RaftResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  current_term_ = GOOGLE_PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RaftResponseHeader::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RaftResponseHeader*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .errorpb.Error error = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::errorpb::Error::_InternalParse;
        object = msg->mutable_error();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // bytes uuid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_uuid();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // uint64 current_term = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        if (!ptr) goto error;
        ::google::protobuf::uint64 value = val;
        msg->set_current_term(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RaftResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RaftResponseHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .errorpb.Error error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes uuid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 current_term = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &current_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RaftResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RaftResponseHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RaftResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RaftResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error error = 1;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::error(this), output);
  }

  // bytes uuid = 2;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->uuid(), output);
  }

  // uint64 current_term = 3;
  if (this->current_term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->current_term(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RaftResponseHeader)
}

::google::protobuf::uint8* RaftResponseHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RaftResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error error = 1;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::error(this), deterministic, target);
  }

  // bytes uuid = 2;
  if (this->uuid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uuid(), target);
  }

  // uint64 current_term = 3;
  if (this->current_term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->current_term(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RaftResponseHeader)
  return target;
}

size_t RaftResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RaftResponseHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes uuid = 2;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uuid());
  }

  // .errorpb.Error error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // uint64 current_term = 3;
  if (this->current_term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->current_term());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RaftResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RaftResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const RaftResponseHeader* source =
      ::google::protobuf::DynamicCastToGenerated<RaftResponseHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RaftResponseHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RaftResponseHeader)
    MergeFrom(*source);
  }
}

void RaftResponseHeader::MergeFrom(const RaftResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RaftResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_error()) {
    mutable_error()->::errorpb::Error::MergeFrom(from.error());
  }
  if (from.current_term() != 0) {
    set_current_term(from.current_term());
  }
}

void RaftResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RaftResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftResponseHeader::CopyFrom(const RaftResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RaftResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftResponseHeader::IsInitialized() const {
  return true;
}

void RaftResponseHeader::Swap(RaftResponseHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftResponseHeader::InternalSwap(RaftResponseHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uuid_.Swap(&other->uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
  swap(current_term_, other->current_term_);
}

::google::protobuf::Metadata RaftResponseHeader::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RaftCmdRequest::InitAsDefaultInstance() {
  ::raft_cmdpb::_RaftCmdRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::raft_cmdpb::RaftRequestHeader*>(
      ::raft_cmdpb::RaftRequestHeader::internal_default_instance());
  ::raft_cmdpb::_RaftCmdRequest_default_instance_._instance.get_mutable()->admin_request_ = const_cast< ::raft_cmdpb::AdminRequest*>(
      ::raft_cmdpb::AdminRequest::internal_default_instance());
  ::raft_cmdpb::_RaftCmdRequest_default_instance_._instance.get_mutable()->status_request_ = const_cast< ::raft_cmdpb::StatusRequest*>(
      ::raft_cmdpb::StatusRequest::internal_default_instance());
}
class RaftCmdRequest::HasBitSetters {
 public:
  static const ::raft_cmdpb::RaftRequestHeader& header(const RaftCmdRequest* msg);
  static const ::raft_cmdpb::AdminRequest& admin_request(const RaftCmdRequest* msg);
  static const ::raft_cmdpb::StatusRequest& status_request(const RaftCmdRequest* msg);
};

const ::raft_cmdpb::RaftRequestHeader&
RaftCmdRequest::HasBitSetters::header(const RaftCmdRequest* msg) {
  return *msg->header_;
}
const ::raft_cmdpb::AdminRequest&
RaftCmdRequest::HasBitSetters::admin_request(const RaftCmdRequest* msg) {
  return *msg->admin_request_;
}
const ::raft_cmdpb::StatusRequest&
RaftCmdRequest::HasBitSetters::status_request(const RaftCmdRequest* msg) {
  return *msg->status_request_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftCmdRequest::kHeaderFieldNumber;
const int RaftCmdRequest::kRequestsFieldNumber;
const int RaftCmdRequest::kAdminRequestFieldNumber;
const int RaftCmdRequest::kStatusRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftCmdRequest::RaftCmdRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RaftCmdRequest)
}
RaftCmdRequest::RaftCmdRequest(const RaftCmdRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::raft_cmdpb::RaftRequestHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_admin_request()) {
    admin_request_ = new ::raft_cmdpb::AdminRequest(*from.admin_request_);
  } else {
    admin_request_ = NULL;
  }
  if (from.has_status_request()) {
    status_request_ = new ::raft_cmdpb::StatusRequest(*from.status_request_);
  } else {
    status_request_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RaftCmdRequest)
}

void RaftCmdRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RaftCmdRequest_raft_5fcmdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_request_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_request_));
}

RaftCmdRequest::~RaftCmdRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RaftCmdRequest)
  SharedDtor();
}

void RaftCmdRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete admin_request_;
  if (this != internal_default_instance()) delete status_request_;
}

void RaftCmdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RaftCmdRequest& RaftCmdRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RaftCmdRequest_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void RaftCmdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RaftCmdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && admin_request_ != NULL) {
    delete admin_request_;
  }
  admin_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && status_request_ != NULL) {
    delete status_request_;
  }
  status_request_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RaftCmdRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RaftCmdRequest*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .raft_cmdpb.RaftRequestHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::RaftRequestHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // repeated .raft_cmdpb.Request requests = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::raft_cmdpb::Request::_InternalParse;
          object = msg->add_requests();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // .raft_cmdpb.AdminRequest admin_request = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::AdminRequest::_InternalParse;
        object = msg->mutable_admin_request();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.StatusRequest status_request = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::StatusRequest::_InternalParse;
        object = msg->mutable_status_request();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RaftCmdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RaftCmdRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .raft_cmdpb.RaftRequestHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .raft_cmdpb.Request requests = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_requests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.AdminRequest admin_request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_admin_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.StatusRequest status_request = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RaftCmdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RaftCmdRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RaftCmdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RaftCmdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.RaftRequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // repeated .raft_cmdpb.Request requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->requests_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->requests(static_cast<int>(i)),
      output);
  }

  // .raft_cmdpb.AdminRequest admin_request = 3;
  if (this->has_admin_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::admin_request(this), output);
  }

  // .raft_cmdpb.StatusRequest status_request = 4;
  if (this->has_status_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::status_request(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RaftCmdRequest)
}

::google::protobuf::uint8* RaftCmdRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RaftCmdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.RaftRequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // repeated .raft_cmdpb.Request requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->requests_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->requests(static_cast<int>(i)), deterministic, target);
  }

  // .raft_cmdpb.AdminRequest admin_request = 3;
  if (this->has_admin_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::admin_request(this), deterministic, target);
  }

  // .raft_cmdpb.StatusRequest status_request = 4;
  if (this->has_status_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::status_request(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RaftCmdRequest)
  return target;
}

size_t RaftCmdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RaftCmdRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .raft_cmdpb.Request requests = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->requests_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->requests(static_cast<int>(i)));
    }
  }

  // .raft_cmdpb.RaftRequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .raft_cmdpb.AdminRequest admin_request = 3;
  if (this->has_admin_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *admin_request_);
  }

  // .raft_cmdpb.StatusRequest status_request = 4;
  if (this->has_status_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_request_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RaftCmdRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RaftCmdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RaftCmdRequest* source =
      ::google::protobuf::DynamicCastToGenerated<RaftCmdRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RaftCmdRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RaftCmdRequest)
    MergeFrom(*source);
  }
}

void RaftCmdRequest::MergeFrom(const RaftCmdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RaftCmdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.has_header()) {
    mutable_header()->::raft_cmdpb::RaftRequestHeader::MergeFrom(from.header());
  }
  if (from.has_admin_request()) {
    mutable_admin_request()->::raft_cmdpb::AdminRequest::MergeFrom(from.admin_request());
  }
  if (from.has_status_request()) {
    mutable_status_request()->::raft_cmdpb::StatusRequest::MergeFrom(from.status_request());
  }
}

void RaftCmdRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RaftCmdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftCmdRequest::CopyFrom(const RaftCmdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RaftCmdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftCmdRequest::IsInitialized() const {
  return true;
}

void RaftCmdRequest::Swap(RaftCmdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftCmdRequest::InternalSwap(RaftCmdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&requests_)->InternalSwap(CastToBase(&other->requests_));
  swap(header_, other->header_);
  swap(admin_request_, other->admin_request_);
  swap(status_request_, other->status_request_);
}

::google::protobuf::Metadata RaftCmdRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RaftCmdResponse::InitAsDefaultInstance() {
  ::raft_cmdpb::_RaftCmdResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::raft_cmdpb::RaftResponseHeader*>(
      ::raft_cmdpb::RaftResponseHeader::internal_default_instance());
  ::raft_cmdpb::_RaftCmdResponse_default_instance_._instance.get_mutable()->admin_response_ = const_cast< ::raft_cmdpb::AdminResponse*>(
      ::raft_cmdpb::AdminResponse::internal_default_instance());
  ::raft_cmdpb::_RaftCmdResponse_default_instance_._instance.get_mutable()->status_response_ = const_cast< ::raft_cmdpb::StatusResponse*>(
      ::raft_cmdpb::StatusResponse::internal_default_instance());
}
class RaftCmdResponse::HasBitSetters {
 public:
  static const ::raft_cmdpb::RaftResponseHeader& header(const RaftCmdResponse* msg);
  static const ::raft_cmdpb::AdminResponse& admin_response(const RaftCmdResponse* msg);
  static const ::raft_cmdpb::StatusResponse& status_response(const RaftCmdResponse* msg);
};

const ::raft_cmdpb::RaftResponseHeader&
RaftCmdResponse::HasBitSetters::header(const RaftCmdResponse* msg) {
  return *msg->header_;
}
const ::raft_cmdpb::AdminResponse&
RaftCmdResponse::HasBitSetters::admin_response(const RaftCmdResponse* msg) {
  return *msg->admin_response_;
}
const ::raft_cmdpb::StatusResponse&
RaftCmdResponse::HasBitSetters::status_response(const RaftCmdResponse* msg) {
  return *msg->status_response_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftCmdResponse::kHeaderFieldNumber;
const int RaftCmdResponse::kResponsesFieldNumber;
const int RaftCmdResponse::kAdminResponseFieldNumber;
const int RaftCmdResponse::kStatusResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftCmdResponse::RaftCmdResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RaftCmdResponse)
}
RaftCmdResponse::RaftCmdResponse(const RaftCmdResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::raft_cmdpb::RaftResponseHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_admin_response()) {
    admin_response_ = new ::raft_cmdpb::AdminResponse(*from.admin_response_);
  } else {
    admin_response_ = NULL;
  }
  if (from.has_status_response()) {
    status_response_ = new ::raft_cmdpb::StatusResponse(*from.status_response_);
  } else {
    status_response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RaftCmdResponse)
}

void RaftCmdResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RaftCmdResponse_raft_5fcmdpb_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_response_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_response_));
}

RaftCmdResponse::~RaftCmdResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RaftCmdResponse)
  SharedDtor();
}

void RaftCmdResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete admin_response_;
  if (this != internal_default_instance()) delete status_response_;
}

void RaftCmdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RaftCmdResponse& RaftCmdResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RaftCmdResponse_raft_5fcmdpb_2eproto.base);
  return *internal_default_instance();
}


void RaftCmdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RaftCmdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && admin_response_ != NULL) {
    delete admin_response_;
  }
  admin_response_ = NULL;
  if (GetArenaNoVirtual() == NULL && status_response_ != NULL) {
    delete status_response_;
  }
  status_response_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RaftCmdResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RaftCmdResponse*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    if (!ptr) goto error;
    switch (tag >> 3) {
      case 0: goto error;
      // .raft_cmdpb.RaftResponseHeader header = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::RaftResponseHeader::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // repeated .raft_cmdpb.Response responses = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          if (!ptr) goto error;
          parser_till_end = ::raft_cmdpb::Response::_InternalParse;
          object = msg->add_responses();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
          ptr = newend;
          if (ptr >= end) break;
        } while((*reinterpret_cast<const ::google::protobuf::uint64*>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // .raft_cmdpb.AdminResponse admin_response = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::AdminResponse::_InternalParse;
        object = msg->mutable_admin_response();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      // .raft_cmdpb.StatusResponse status_response = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        if (!ptr) goto error;
        parser_till_end = ::raft_cmdpb::StatusResponse::_InternalParse;
        object = msg->mutable_status_response();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (!ctx->ParseExactRange({parser_till_end, object}, ptr, newend)) goto error;
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4) {
          if (!ctx->ValidEndGroup(tag)) goto error;
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
error:
  return nullptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RaftCmdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RaftCmdResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .raft_cmdpb.RaftResponseHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .raft_cmdpb.Response responses = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_responses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.AdminResponse admin_response = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_admin_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft_cmdpb.StatusResponse status_response = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RaftCmdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RaftCmdResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RaftCmdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RaftCmdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.RaftResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // repeated .raft_cmdpb.Response responses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->responses_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->responses(static_cast<int>(i)),
      output);
  }

  // .raft_cmdpb.AdminResponse admin_response = 3;
  if (this->has_admin_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::admin_response(this), output);
  }

  // .raft_cmdpb.StatusResponse status_response = 4;
  if (this->has_status_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::status_response(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RaftCmdResponse)
}

::google::protobuf::uint8* RaftCmdResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RaftCmdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft_cmdpb.RaftResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), deterministic, target);
  }

  // repeated .raft_cmdpb.Response responses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->responses_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->responses(static_cast<int>(i)), deterministic, target);
  }

  // .raft_cmdpb.AdminResponse admin_response = 3;
  if (this->has_admin_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::admin_response(this), deterministic, target);
  }

  // .raft_cmdpb.StatusResponse status_response = 4;
  if (this->has_status_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::status_response(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RaftCmdResponse)
  return target;
}

size_t RaftCmdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RaftCmdResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .raft_cmdpb.Response responses = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->responses_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->responses(static_cast<int>(i)));
    }
  }

  // .raft_cmdpb.RaftResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .raft_cmdpb.AdminResponse admin_response = 3;
  if (this->has_admin_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *admin_response_);
  }

  // .raft_cmdpb.StatusResponse status_response = 4;
  if (this->has_status_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RaftCmdResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RaftCmdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RaftCmdResponse* source =
      ::google::protobuf::DynamicCastToGenerated<RaftCmdResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RaftCmdResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RaftCmdResponse)
    MergeFrom(*source);
  }
}

void RaftCmdResponse::MergeFrom(const RaftCmdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RaftCmdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_header()) {
    mutable_header()->::raft_cmdpb::RaftResponseHeader::MergeFrom(from.header());
  }
  if (from.has_admin_response()) {
    mutable_admin_response()->::raft_cmdpb::AdminResponse::MergeFrom(from.admin_response());
  }
  if (from.has_status_response()) {
    mutable_status_response()->::raft_cmdpb::StatusResponse::MergeFrom(from.status_response());
  }
}

void RaftCmdResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RaftCmdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftCmdResponse::CopyFrom(const RaftCmdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RaftCmdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftCmdResponse::IsInitialized() const {
  return true;
}

void RaftCmdResponse::Swap(RaftCmdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftCmdResponse::InternalSwap(RaftCmdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&responses_)->InternalSwap(CastToBase(&other->responses_));
  swap(header_, other->header_);
  swap(admin_response_, other->admin_response_);
  swap(status_response_, other->status_response_);
}

::google::protobuf::Metadata RaftCmdResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5fcmdpb_2eproto);
  return ::file_level_metadata_raft_5fcmdpb_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace raft_cmdpb
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::GetRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::GetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::GetRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::GetResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::GetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::GetResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::PutRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::PutRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::PutRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::PutResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::PutResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::PutResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::DeleteRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::DeleteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::DeleteRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::DeleteResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::DeleteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::DeleteResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::DeleteRangeRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::DeleteRangeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::DeleteRangeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::DeleteRangeResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::DeleteRangeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::DeleteRangeResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::SnapRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::SnapRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::SnapRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::SnapResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::SnapResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::SnapResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::PrewriteRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::PrewriteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::PrewriteRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::PrewriteResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::PrewriteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::PrewriteResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::IngestSSTRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::IngestSSTRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::IngestSSTRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::IngestSSTResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::IngestSSTResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::IngestSSTResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::Request* Arena::CreateMaybeMessage< ::raft_cmdpb::Request >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::Response* Arena::CreateMaybeMessage< ::raft_cmdpb::Response >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::ChangePeerRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::ChangePeerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::ChangePeerRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::ChangePeerResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::ChangePeerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::ChangePeerResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::SplitRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::SplitRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::SplitRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::SplitResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::SplitResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::SplitResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::BatchSplitRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::BatchSplitRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::BatchSplitRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::BatchSplitResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::BatchSplitResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::BatchSplitResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::CompactLogRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::CompactLogRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::CompactLogRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::CompactLogResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::CompactLogResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::CompactLogResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::TransferLeaderRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::TransferLeaderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::TransferLeaderRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::TransferLeaderResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::TransferLeaderResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::TransferLeaderResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::VerifyHashRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::VerifyHashRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::VerifyHashRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::VerifyHashResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::VerifyHashResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::VerifyHashResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::PrepareMergeRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::PrepareMergeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::PrepareMergeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::PrepareMergeResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::PrepareMergeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::PrepareMergeResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::CommitMergeRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::CommitMergeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::CommitMergeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::CommitMergeResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::CommitMergeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::CommitMergeResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::RollbackMergeRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::RollbackMergeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::RollbackMergeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::RollbackMergeResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::RollbackMergeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::RollbackMergeResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::AdminRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::AdminRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::AdminRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::AdminResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::AdminResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::AdminResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::RegionLeaderRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::RegionLeaderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::RegionLeaderRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::RegionLeaderResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::RegionLeaderResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::RegionLeaderResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::RegionDetailRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::RegionDetailRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::RegionDetailRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::RegionDetailResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::RegionDetailResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::RegionDetailResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::StatusRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::StatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::StatusRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::StatusResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::StatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::StatusResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::RaftRequestHeader* Arena::CreateMaybeMessage< ::raft_cmdpb::RaftRequestHeader >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::RaftRequestHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::RaftResponseHeader* Arena::CreateMaybeMessage< ::raft_cmdpb::RaftResponseHeader >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::RaftResponseHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::RaftCmdRequest* Arena::CreateMaybeMessage< ::raft_cmdpb::RaftCmdRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::RaftCmdRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::raft_cmdpb::RaftCmdResponse* Arena::CreateMaybeMessage< ::raft_cmdpb::RaftCmdResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_cmdpb::RaftCmdResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
