// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gcpb.proto

package gcpb

import (
	"context"
	"fmt"
	"io"
	"math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ErrorType int32

const (
	ErrorType_OK               ErrorType = 0
	ErrorType_UNKNOWN          ErrorType = 1
	ErrorType_NOT_BOOTSTRAPPED ErrorType = 2
	// revision supplied does not match the current etcd revision
	ErrorType_REVISION_MISMATCH ErrorType = 3
	// if the proposed safe point is earlier than old safe point or gc safe point
	ErrorType_SAFEPOINT_ROLLBACK ErrorType = 4
)

var ErrorType_name = map[int32]string{
	0: "OK",
	1: "UNKNOWN",
	2: "NOT_BOOTSTRAPPED",
	3: "REVISION_MISMATCH",
	4: "SAFEPOINT_ROLLBACK",
}

var ErrorType_value = map[string]int32{
	"OK":                 0,
	"UNKNOWN":            1,
	"NOT_BOOTSTRAPPED":   2,
	"REVISION_MISMATCH":  3,
	"SAFEPOINT_ROLLBACK": 4,
}

func (x ErrorType) String() string {
	return proto.EnumName(ErrorType_name, int32(x))
}

func (ErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b5e0ef170d88dab2, []int{0}
}

type RequestHeader struct {
	// cluster_id is the ID of the cluster which be sent to.
	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// sender_id is the ID of the sender server, also member ID or etcd ID.
	SenderId             uint64   `protobuf:"varint,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestHeader) Reset()         { *m = RequestHeader{} }
func (m *RequestHeader) String() string { return proto.CompactTextString(m) }
func (*RequestHeader) ProtoMessage()    {}
func (*RequestHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5e0ef170d88dab2, []int{0}
}
func (m *RequestHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestHeader.Merge(m, src)
}
func (m *RequestHeader) XXX_Size() int {
	return m.Size()
}
func (m *RequestHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestHeader.DiscardUnknown(m)
}

var xxx_messageInfo_RequestHeader proto.InternalMessageInfo

func (m *RequestHeader) GetClusterId() uint64 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

func (m *RequestHeader) GetSenderId() uint64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

type ResponseHeader struct {
	// cluster_id is the ID of the cluster which sent the response.
	ClusterId            uint64   `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Error                *Error   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseHeader) Reset()         { *m = ResponseHeader{} }
func (m *ResponseHeader) String() string { return proto.CompactTextString(m) }
func (*ResponseHeader) ProtoMessage()    {}
func (*ResponseHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5e0ef170d88dab2, []int{1}
}
func (m *ResponseHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseHeader.Merge(m, src)
}
func (m *ResponseHeader) XXX_Size() int {
	return m.Size()
}
func (m *ResponseHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseHeader proto.InternalMessageInfo

func (m *ResponseHeader) GetClusterId() uint64 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

func (m *ResponseHeader) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type Error struct {
	Type                 ErrorType `protobuf:"varint,1,opt,name=type,proto3,enum=gcpb.ErrorType" json:"type,omitempty"`
	Message              string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5e0ef170d88dab2, []int{2}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetType() ErrorType {
	if m != nil {
		return m.Type
	}
	return ErrorType_OK
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetAllServiceGroupsRequest struct {
	Header               *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetAllServiceGroupsRequest) Reset()         { *m = GetAllServiceGroupsRequest{} }
func (m *GetAllServiceGroupsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllServiceGroupsRequest) ProtoMessage()    {}
func (*GetAllServiceGroupsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5e0ef170d88dab2, []int{3}
}
func (m *GetAllServiceGroupsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllServiceGroupsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllServiceGroupsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllServiceGroupsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllServiceGroupsRequest.Merge(m, src)
}
func (m *GetAllServiceGroupsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllServiceGroupsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllServiceGroupsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllServiceGroupsRequest proto.InternalMessageInfo

func (m *GetAllServiceGroupsRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GetAllServiceGroupsResponse struct {
	Header               *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ServiceGroupId       [][]byte        `protobuf:"bytes,2,rep,name=service_group_id,json=serviceGroupId,proto3" json:"service_group_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetAllServiceGroupsResponse) Reset()         { *m = GetAllServiceGroupsResponse{} }
func (m *GetAllServiceGroupsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllServiceGroupsResponse) ProtoMessage()    {}
func (*GetAllServiceGroupsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5e0ef170d88dab2, []int{4}
}
func (m *GetAllServiceGroupsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllServiceGroupsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllServiceGroupsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllServiceGroupsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllServiceGroupsResponse.Merge(m, src)
}
func (m *GetAllServiceGroupsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllServiceGroupsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllServiceGroupsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllServiceGroupsResponse proto.InternalMessageInfo

func (m *GetAllServiceGroupsResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetAllServiceGroupsResponse) GetServiceGroupId() [][]byte {
	if m != nil {
		return m.ServiceGroupId
	}
	return nil
}

type GetMinServiceSafePointByServiceGroupRequest struct {
	Header               *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ServiceGroupId       []byte         `protobuf:"bytes,2,opt,name=service_group_id,json=serviceGroupId,proto3" json:"service_group_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetMinServiceSafePointByServiceGroupRequest) Reset() {
	*m = GetMinServiceSafePointByServiceGroupRequest{}
}
func (m *GetMinServiceSafePointByServiceGroupRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GetMinServiceSafePointByServiceGroupRequest) ProtoMessage() {}
func (*GetMinServiceSafePointByServiceGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5e0ef170d88dab2, []int{5}
}
func (m *GetMinServiceSafePointByServiceGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMinServiceSafePointByServiceGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMinServiceSafePointByServiceGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMinServiceSafePointByServiceGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMinServiceSafePointByServiceGroupRequest.Merge(m, src)
}
func (m *GetMinServiceSafePointByServiceGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMinServiceSafePointByServiceGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMinServiceSafePointByServiceGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMinServiceSafePointByServiceGroupRequest proto.InternalMessageInfo

func (m *GetMinServiceSafePointByServiceGroupRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetMinServiceSafePointByServiceGroupRequest) GetServiceGroupId() []byte {
	if m != nil {
		return m.ServiceGroupId
	}
	return nil
}

type GetMinServiceSafePointByServiceGroupResponse struct {
	Header    *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	SafePoint uint64          `protobuf:"varint,2,opt,name=safe_point,json=safePoint,proto3" json:"safe_point,omitempty"`
	// revision here is to safeguard the validity of the obtained min,
	// preventing cases where new services register their safe points after min is obtained by gc worker
	Revision             int64    `protobuf:"varint,3,opt,name=revision,proto3" json:"revision,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMinServiceSafePointByServiceGroupResponse) Reset() {
	*m = GetMinServiceSafePointByServiceGroupResponse{}
}
func (m *GetMinServiceSafePointByServiceGroupResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GetMinServiceSafePointByServiceGroupResponse) ProtoMessage() {}
func (*GetMinServiceSafePointByServiceGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5e0ef170d88dab2, []int{6}
}
func (m *GetMinServiceSafePointByServiceGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMinServiceSafePointByServiceGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMinServiceSafePointByServiceGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMinServiceSafePointByServiceGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMinServiceSafePointByServiceGroupResponse.Merge(m, src)
}
func (m *GetMinServiceSafePointByServiceGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetMinServiceSafePointByServiceGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMinServiceSafePointByServiceGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMinServiceSafePointByServiceGroupResponse proto.InternalMessageInfo

func (m *GetMinServiceSafePointByServiceGroupResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetMinServiceSafePointByServiceGroupResponse) GetSafePoint() uint64 {
	if m != nil {
		return m.SafePoint
	}
	return 0
}

func (m *GetMinServiceSafePointByServiceGroupResponse) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

type UpdateGCSafePointByServiceGroupRequest struct {
	Header         *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ServiceGroupId []byte         `protobuf:"bytes,2,opt,name=service_group_id,json=serviceGroupId,proto3" json:"service_group_id,omitempty"`
	SafePoint      uint64         `protobuf:"varint,3,opt,name=safe_point,json=safePoint,proto3" json:"safe_point,omitempty"`
	// here client need to provide the revision obtained from GetMinServiceSafePointByServiceGroup,
	// so server can check if it's still valid
	Revision             int64    `protobuf:"varint,4,opt,name=revision,proto3" json:"revision,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateGCSafePointByServiceGroupRequest) Reset() {
	*m = UpdateGCSafePointByServiceGroupRequest{}
}
func (m *UpdateGCSafePointByServiceGroupRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateGCSafePointByServiceGroupRequest) ProtoMessage()    {}
func (*UpdateGCSafePointByServiceGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5e0ef170d88dab2, []int{7}
}
func (m *UpdateGCSafePointByServiceGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGCSafePointByServiceGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGCSafePointByServiceGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGCSafePointByServiceGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGCSafePointByServiceGroupRequest.Merge(m, src)
}
func (m *UpdateGCSafePointByServiceGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGCSafePointByServiceGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGCSafePointByServiceGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGCSafePointByServiceGroupRequest proto.InternalMessageInfo

func (m *UpdateGCSafePointByServiceGroupRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *UpdateGCSafePointByServiceGroupRequest) GetServiceGroupId() []byte {
	if m != nil {
		return m.ServiceGroupId
	}
	return nil
}

func (m *UpdateGCSafePointByServiceGroupRequest) GetSafePoint() uint64 {
	if m != nil {
		return m.SafePoint
	}
	return 0
}

func (m *UpdateGCSafePointByServiceGroupRequest) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

type UpdateGCSafePointByServiceGroupResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// update will be successful if revision is valid and new safepoint > old safe point
	// if failed, previously obtained min might be incorrect, should retry from GetMinServiceSafePointByService
	Succeeded            bool     `protobuf:"varint,2,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	NewSafePoint         uint64   `protobuf:"varint,3,opt,name=new_safe_point,json=newSafePoint,proto3" json:"new_safe_point,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateGCSafePointByServiceGroupResponse) Reset() {
	*m = UpdateGCSafePointByServiceGroupResponse{}
}
func (m *UpdateGCSafePointByServiceGroupResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateGCSafePointByServiceGroupResponse) ProtoMessage()    {}
func (*UpdateGCSafePointByServiceGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5e0ef170d88dab2, []int{8}
}
func (m *UpdateGCSafePointByServiceGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGCSafePointByServiceGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGCSafePointByServiceGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGCSafePointByServiceGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGCSafePointByServiceGroupResponse.Merge(m, src)
}
func (m *UpdateGCSafePointByServiceGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGCSafePointByServiceGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGCSafePointByServiceGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGCSafePointByServiceGroupResponse proto.InternalMessageInfo

func (m *UpdateGCSafePointByServiceGroupResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *UpdateGCSafePointByServiceGroupResponse) GetSucceeded() bool {
	if m != nil {
		return m.Succeeded
	}
	return false
}

func (m *UpdateGCSafePointByServiceGroupResponse) GetNewSafePoint() uint64 {
	if m != nil {
		return m.NewSafePoint
	}
	return 0
}

type UpdateServiceSafePointByServiceGroupRequest struct {
	Header         *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ServiceGroupId []byte         `protobuf:"bytes,2,opt,name=service_group_id,json=serviceGroupId,proto3" json:"service_group_id,omitempty"`
	ServiceId      []byte         `protobuf:"bytes,3,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// safe point will be set to expire on (PD Server time + TTL)
	// pass in a ttl < 0 to remove target safe point
	// pass in MAX_INT64 to set a safe point that never expire
	TTL                  int64    `protobuf:"varint,4,opt,name=TTL,proto3" json:"TTL,omitempty"`
	SafePoint            uint64   `protobuf:"varint,5,opt,name=safe_point,json=safePoint,proto3" json:"safe_point,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateServiceSafePointByServiceGroupRequest) Reset() {
	*m = UpdateServiceSafePointByServiceGroupRequest{}
}
func (m *UpdateServiceSafePointByServiceGroupRequest) String() string {
	return proto.CompactTextString(m)
}
func (*UpdateServiceSafePointByServiceGroupRequest) ProtoMessage() {}
func (*UpdateServiceSafePointByServiceGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5e0ef170d88dab2, []int{9}
}
func (m *UpdateServiceSafePointByServiceGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateServiceSafePointByServiceGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateServiceSafePointByServiceGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateServiceSafePointByServiceGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateServiceSafePointByServiceGroupRequest.Merge(m, src)
}
func (m *UpdateServiceSafePointByServiceGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateServiceSafePointByServiceGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateServiceSafePointByServiceGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateServiceSafePointByServiceGroupRequest proto.InternalMessageInfo

func (m *UpdateServiceSafePointByServiceGroupRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *UpdateServiceSafePointByServiceGroupRequest) GetServiceGroupId() []byte {
	if m != nil {
		return m.ServiceGroupId
	}
	return nil
}

func (m *UpdateServiceSafePointByServiceGroupRequest) GetServiceId() []byte {
	if m != nil {
		return m.ServiceId
	}
	return nil
}

func (m *UpdateServiceSafePointByServiceGroupRequest) GetTTL() int64 {
	if m != nil {
		return m.TTL
	}
	return 0
}

func (m *UpdateServiceSafePointByServiceGroupRequest) GetSafePoint() uint64 {
	if m != nil {
		return m.SafePoint
	}
	return 0
}

type UpdateServiceSafePointByServiceGroupResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// update will be successful if ttl < 0 (a removal request)
	// or if new safe point >= old safe point and new safe point >= gc safe point
	Succeeded            bool     `protobuf:"varint,2,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	GcSafePoint          uint64   `protobuf:"varint,3,opt,name=gc_safe_point,json=gcSafePoint,proto3" json:"gc_safe_point,omitempty"`
	OldSafePoint         uint64   `protobuf:"varint,4,opt,name=old_safe_point,json=oldSafePoint,proto3" json:"old_safe_point,omitempty"`
	NewSafePoint         uint64   `protobuf:"varint,5,opt,name=new_safe_point,json=newSafePoint,proto3" json:"new_safe_point,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateServiceSafePointByServiceGroupResponse) Reset() {
	*m = UpdateServiceSafePointByServiceGroupResponse{}
}
func (m *UpdateServiceSafePointByServiceGroupResponse) String() string {
	return proto.CompactTextString(m)
}
func (*UpdateServiceSafePointByServiceGroupResponse) ProtoMessage() {}
func (*UpdateServiceSafePointByServiceGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5e0ef170d88dab2, []int{10}
}
func (m *UpdateServiceSafePointByServiceGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateServiceSafePointByServiceGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateServiceSafePointByServiceGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateServiceSafePointByServiceGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateServiceSafePointByServiceGroupResponse.Merge(m, src)
}
func (m *UpdateServiceSafePointByServiceGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateServiceSafePointByServiceGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateServiceSafePointByServiceGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateServiceSafePointByServiceGroupResponse proto.InternalMessageInfo

func (m *UpdateServiceSafePointByServiceGroupResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *UpdateServiceSafePointByServiceGroupResponse) GetSucceeded() bool {
	if m != nil {
		return m.Succeeded
	}
	return false
}

func (m *UpdateServiceSafePointByServiceGroupResponse) GetGcSafePoint() uint64 {
	if m != nil {
		return m.GcSafePoint
	}
	return 0
}

func (m *UpdateServiceSafePointByServiceGroupResponse) GetOldSafePoint() uint64 {
	if m != nil {
		return m.OldSafePoint
	}
	return 0
}

func (m *UpdateServiceSafePointByServiceGroupResponse) GetNewSafePoint() uint64 {
	if m != nil {
		return m.NewSafePoint
	}
	return 0
}

type ServiceGroupSafePoint struct {
	ServiceGroupId       []byte   `protobuf:"bytes,1,opt,name=service_group_id,json=serviceGroupId,proto3" json:"service_group_id,omitempty"`
	SafePoint            uint64   `protobuf:"varint,2,opt,name=safe_point,json=safePoint,proto3" json:"safe_point,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceGroupSafePoint) Reset()         { *m = ServiceGroupSafePoint{} }
func (m *ServiceGroupSafePoint) String() string { return proto.CompactTextString(m) }
func (*ServiceGroupSafePoint) ProtoMessage()    {}
func (*ServiceGroupSafePoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5e0ef170d88dab2, []int{11}
}
func (m *ServiceGroupSafePoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceGroupSafePoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceGroupSafePoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceGroupSafePoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceGroupSafePoint.Merge(m, src)
}
func (m *ServiceGroupSafePoint) XXX_Size() int {
	return m.Size()
}
func (m *ServiceGroupSafePoint) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceGroupSafePoint.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceGroupSafePoint proto.InternalMessageInfo

func (m *ServiceGroupSafePoint) GetServiceGroupId() []byte {
	if m != nil {
		return m.ServiceGroupId
	}
	return nil
}

func (m *ServiceGroupSafePoint) GetSafePoint() uint64 {
	if m != nil {
		return m.SafePoint
	}
	return 0
}

type GetAllServiceGroupGCSafePointsRequest struct {
	Header               *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetAllServiceGroupGCSafePointsRequest) Reset()         { *m = GetAllServiceGroupGCSafePointsRequest{} }
func (m *GetAllServiceGroupGCSafePointsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllServiceGroupGCSafePointsRequest) ProtoMessage()    {}
func (*GetAllServiceGroupGCSafePointsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5e0ef170d88dab2, []int{12}
}
func (m *GetAllServiceGroupGCSafePointsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllServiceGroupGCSafePointsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllServiceGroupGCSafePointsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllServiceGroupGCSafePointsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllServiceGroupGCSafePointsRequest.Merge(m, src)
}
func (m *GetAllServiceGroupGCSafePointsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllServiceGroupGCSafePointsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllServiceGroupGCSafePointsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllServiceGroupGCSafePointsRequest proto.InternalMessageInfo

func (m *GetAllServiceGroupGCSafePointsRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GetAllServiceGroupGCSafePointsResponse struct {
	Header               *ResponseHeader          `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	SafePoints           []*ServiceGroupSafePoint `protobuf:"bytes,2,rep,name=safe_points,json=safePoints,proto3" json:"safe_points,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GetAllServiceGroupGCSafePointsResponse) Reset() {
	*m = GetAllServiceGroupGCSafePointsResponse{}
}
func (m *GetAllServiceGroupGCSafePointsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllServiceGroupGCSafePointsResponse) ProtoMessage()    {}
func (*GetAllServiceGroupGCSafePointsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5e0ef170d88dab2, []int{13}
}
func (m *GetAllServiceGroupGCSafePointsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllServiceGroupGCSafePointsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllServiceGroupGCSafePointsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllServiceGroupGCSafePointsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllServiceGroupGCSafePointsResponse.Merge(m, src)
}
func (m *GetAllServiceGroupGCSafePointsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllServiceGroupGCSafePointsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllServiceGroupGCSafePointsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllServiceGroupGCSafePointsResponse proto.InternalMessageInfo

func (m *GetAllServiceGroupGCSafePointsResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetAllServiceGroupGCSafePointsResponse) GetSafePoints() []*ServiceGroupSafePoint {
	if m != nil {
		return m.SafePoints
	}
	return nil
}

func init() {
	proto.RegisterEnum("gcpb.ErrorType", ErrorType_name, ErrorType_value)
	proto.RegisterType((*RequestHeader)(nil), "gcpb.RequestHeader")
	proto.RegisterType((*ResponseHeader)(nil), "gcpb.ResponseHeader")
	proto.RegisterType((*Error)(nil), "gcpb.Error")
	proto.RegisterType((*GetAllServiceGroupsRequest)(nil), "gcpb.GetAllServiceGroupsRequest")
	proto.RegisterType((*GetAllServiceGroupsResponse)(nil), "gcpb.GetAllServiceGroupsResponse")
	proto.RegisterType((*GetMinServiceSafePointByServiceGroupRequest)(nil), "gcpb.GetMinServiceSafePointByServiceGroupRequest")
	proto.RegisterType((*GetMinServiceSafePointByServiceGroupResponse)(nil), "gcpb.GetMinServiceSafePointByServiceGroupResponse")
	proto.RegisterType((*UpdateGCSafePointByServiceGroupRequest)(nil), "gcpb.UpdateGCSafePointByServiceGroupRequest")
	proto.RegisterType((*UpdateGCSafePointByServiceGroupResponse)(nil), "gcpb.UpdateGCSafePointByServiceGroupResponse")
	proto.RegisterType((*UpdateServiceSafePointByServiceGroupRequest)(nil), "gcpb.UpdateServiceSafePointByServiceGroupRequest")
	proto.RegisterType((*UpdateServiceSafePointByServiceGroupResponse)(nil), "gcpb.UpdateServiceSafePointByServiceGroupResponse")
	proto.RegisterType((*ServiceGroupSafePoint)(nil), "gcpb.ServiceGroupSafePoint")
	proto.RegisterType((*GetAllServiceGroupGCSafePointsRequest)(nil), "gcpb.GetAllServiceGroupGCSafePointsRequest")
	proto.RegisterType((*GetAllServiceGroupGCSafePointsResponse)(nil), "gcpb.GetAllServiceGroupGCSafePointsResponse")
}

func init() { proto.RegisterFile("gcpb.proto", fileDescriptor_b5e0ef170d88dab2) }

var fileDescriptor_b5e0ef170d88dab2 = []byte{
	// 805 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4f, 0x6f, 0xe2, 0x46,
	0x14, 0x67, 0xf8, 0x93, 0xc0, 0x23, 0x21, 0xee, 0x24, 0xa9, 0x22, 0xa7, 0xa1, 0x89, 0x9b, 0xa6,
	0xa8, 0x50, 0xaa, 0xd2, 0x6b, 0x2f, 0x40, 0x09, 0xb1, 0x48, 0x30, 0x1a, 0x9c, 0xf6, 0x52, 0x89,
	0x12, 0x3c, 0x71, 0xad, 0x50, 0xec, 0x7a, 0x0c, 0x51, 0x0e, 0x95, 0x7a, 0xe8, 0xa1, 0xb7, 0x5e,
	0x56, 0xda, 0x95, 0xf6, 0x0b, 0xec, 0x67, 0xd8, 0x4f, 0xb0, 0xc7, 0x3d, 0xec, 0x61, 0x8f, 0xab,
	0xec, 0x6d, 0x3f, 0xc5, 0x8a, 0x19, 0x43, 0x08, 0x21, 0x89, 0x83, 0xb4, 0xca, 0xc9, 0x33, 0xef,
	0xbd, 0xf9, 0xcd, 0xef, 0xfd, 0xde, 0xcc, 0x1b, 0x03, 0x98, 0x1d, 0xe7, 0x24, 0xef, 0xb8, 0xb6,
	0x67, 0xe3, 0xe8, 0x70, 0x2c, 0xaf, 0x99, 0xb6, 0x69, 0x73, 0xc3, 0xf7, 0xc3, 0x91, 0xf0, 0xc9,
	0x2b, 0x6e, 0x9f, 0x79, 0x7c, 0x28, 0x0c, 0x4a, 0x0d, 0x96, 0x09, 0xfd, 0xab, 0x4f, 0x99, 0x77,
	0x40, 0xdb, 0x06, 0x75, 0xf1, 0x16, 0x40, 0xa7, 0xdb, 0x67, 0x1e, 0x75, 0x5b, 0x96, 0xb1, 0x81,
	0xb6, 0x51, 0x26, 0x4a, 0x12, 0xbe, 0x45, 0x35, 0xf0, 0x26, 0x24, 0x18, 0xed, 0x19, 0xc2, 0x1b,
	0xe6, 0xde, 0xb8, 0x30, 0xa8, 0x86, 0x42, 0x20, 0x45, 0x28, 0x73, 0xec, 0x1e, 0xa3, 0xc1, 0xd0,
	0x76, 0x20, 0x46, 0x5d, 0xd7, 0x76, 0x39, 0x52, 0xb2, 0x90, 0xcc, 0xf3, 0x34, 0x2a, 0x43, 0x13,
	0x11, 0x1e, 0x65, 0x1f, 0x62, 0x7c, 0x8e, 0xbf, 0x82, 0xa8, 0x77, 0xe1, 0x50, 0x0e, 0x92, 0x2a,
	0xac, 0x4c, 0x84, 0xea, 0x17, 0x0e, 0x25, 0xdc, 0x89, 0x37, 0x60, 0xf1, 0x4f, 0xca, 0x58, 0xdb,
	0xa4, 0x1c, 0x32, 0x41, 0x46, 0x53, 0x45, 0x05, 0xb9, 0x4a, 0xbd, 0x62, 0xb7, 0xdb, 0xa4, 0xee,
	0xc0, 0xea, 0xd0, 0xaa, 0x6b, 0xf7, 0x1d, 0xe6, 0xe7, 0x8e, 0xb3, 0xb0, 0xf0, 0x07, 0x67, 0xcc,
	0xe1, 0x93, 0x85, 0x55, 0x01, 0x7f, 0x4d, 0x1a, 0xe2, 0x87, 0x28, 0x7d, 0xd8, 0x9c, 0x09, 0x25,
	0x32, 0xc7, 0xb9, 0x29, 0xac, 0xb5, 0x11, 0xd6, 0xa4, 0x32, 0x23, 0x30, 0x9c, 0x01, 0x89, 0x09,
	0x98, 0x96, 0x39, 0xc4, 0x11, 0xba, 0x46, 0x32, 0x4b, 0x24, 0xc5, 0x26, 0xe0, 0x55, 0x43, 0xf9,
	0x17, 0x41, 0xb6, 0x4a, 0xbd, 0x23, 0xab, 0xe7, 0xef, 0xdb, 0x6c, 0x9f, 0xd2, 0x86, 0x6d, 0xf5,
	0xbc, 0xd2, 0xc5, 0x24, 0x93, 0x79, 0x72, 0xba, 0x85, 0x06, 0x9a, 0x41, 0xe3, 0x29, 0x82, 0x5c,
	0x30, 0x1a, 0x73, 0xe9, 0xb1, 0x05, 0xc0, 0xda, 0xa7, 0xb4, 0xe5, 0x0c, 0x11, 0xfd, 0x13, 0x96,
	0x60, 0xa3, 0x2d, 0xb0, 0x0c, 0x71, 0x97, 0x0e, 0x2c, 0x66, 0xd9, 0xbd, 0x8d, 0xc8, 0x36, 0xca,
	0x44, 0xc8, 0x78, 0xae, 0xbc, 0x44, 0xb0, 0x77, 0xec, 0x18, 0x6d, 0x8f, 0x56, 0xcb, 0x8f, 0xa2,
	0xcd, 0x14, 0xf9, 0xc8, 0x5d, 0xe4, 0xa3, 0x53, 0xe4, 0x9f, 0x23, 0xf8, 0xe6, 0x5e, 0xf2, 0x73,
	0x29, 0xfa, 0x05, 0x24, 0x58, 0xbf, 0xd3, 0xa1, 0xd4, 0xa0, 0x82, 0x77, 0x9c, 0x5c, 0x19, 0xf0,
	0x2e, 0xa4, 0x7a, 0xf4, 0xbc, 0x75, 0x83, 0xf6, 0x52, 0x8f, 0x9e, 0x8f, 0x79, 0x28, 0x6f, 0x10,
	0x64, 0x05, 0xbb, 0xc7, 0x3c, 0x7b, 0x5c, 0x5f, 0x3f, 0xd2, 0x32, 0x38, 0xd1, 0x25, 0x92, 0xf0,
	0x2d, 0xaa, 0x81, 0x25, 0x88, 0xe8, 0xfa, 0xa1, 0x2f, 0xed, 0x70, 0x38, 0x55, 0x90, 0xd8, 0x54,
	0x41, 0x94, 0x0f, 0x08, 0x72, 0xc1, 0xd2, 0xfa, 0x04, 0xca, 0x2b, 0xb0, 0x6c, 0x76, 0x6e, 0x0a,
	0x9f, 0x34, 0x3b, 0x63, 0x16, 0xc3, 0xea, 0xd8, 0x5d, 0x63, 0x32, 0x28, 0x2a, 0xaa, 0x63, 0x77,
	0x8d, 0x6b, 0x51, 0x53, 0x35, 0x8c, 0xcd, 0xa8, 0xe1, 0xef, 0xb0, 0x3e, 0x99, 0xd3, 0xd5, 0xf2,
	0x59, 0xfa, 0xa3, 0x00, 0xe7, 0x7b, 0xfa, 0x72, 0x2a, 0x3a, 0x7c, 0x7d, 0xb3, 0x31, 0x4e, 0x1c,
	0xe7, 0xf9, 0xda, 0xed, 0x13, 0x04, 0x7b, 0xf7, 0xc1, 0xce, 0x55, 0x9e, 0x9f, 0x20, 0x79, 0x95,
	0x0d, 0xe3, 0x5d, 0x37, 0x59, 0xd8, 0x14, 0x4b, 0x66, 0x2a, 0x45, 0x60, 0x9c, 0x2b, 0xfb, 0x96,
	0x42, 0x62, 0xfc, 0xfa, 0xe0, 0x05, 0x08, 0x6b, 0x35, 0x29, 0x84, 0x93, 0xb0, 0x78, 0x5c, 0xaf,
	0xd5, 0xb5, 0x5f, 0xeb, 0x12, 0xc2, 0x6b, 0x20, 0xd5, 0x35, 0xbd, 0x55, 0xd2, 0x34, 0xbd, 0xa9,
	0x93, 0x62, 0xa3, 0x51, 0xf9, 0x59, 0x0a, 0xe3, 0x75, 0xf8, 0x8c, 0x54, 0x7e, 0x51, 0x9b, 0xaa,
	0x56, 0x6f, 0x1d, 0xa9, 0xcd, 0xa3, 0xa2, 0x5e, 0x3e, 0x90, 0x22, 0xf8, 0x73, 0xc0, 0xcd, 0xe2,
	0x7e, 0xa5, 0xa1, 0xa9, 0x75, 0xbd, 0x45, 0xb4, 0xc3, 0xc3, 0x52, 0xb1, 0x5c, 0x93, 0xa2, 0x85,
	0xff, 0x62, 0x10, 0xae, 0x96, 0xf1, 0x6f, 0xb0, 0x3a, 0xe3, 0xcd, 0xc1, 0xdb, 0x82, 0xed, 0xed,
	0x2f, 0x9b, 0xbc, 0x73, 0x47, 0x84, 0x50, 0x45, 0x09, 0xe1, 0xff, 0x11, 0xec, 0x06, 0xe9, 0xe9,
	0xf8, 0x87, 0x31, 0x5a, 0xd0, 0x67, 0x48, 0x2e, 0x3c, 0x64, 0xc9, 0x98, 0xd1, 0x3f, 0x08, 0xbe,
	0xbc, 0xa7, 0x1d, 0xe2, 0x9c, 0x40, 0x0e, 0xd6, 0xf2, 0xe5, 0xef, 0x02, 0x46, 0x5f, 0x13, 0x25,
	0x48, 0x73, 0x18, 0x89, 0xf2, 0x80, 0xfe, 0x38, 0x12, 0xe5, 0x21, 0xbd, 0x47, 0x09, 0xe1, 0xbf,
	0x21, 0x7d, 0xf7, 0x45, 0xc0, 0xd9, 0xdb, 0xaa, 0x3d, 0xe3, 0x16, 0xca, 0xb9, 0x60, 0xc1, 0xa3,
	0xed, 0x4b, 0x7b, 0x6f, 0x5f, 0xc4, 0xd1, 0xab, 0xcb, 0x34, 0x7a, 0x7d, 0x99, 0x46, 0xef, 0x2e,
	0xd3, 0xe8, 0xd9, 0xfb, 0x74, 0x08, 0x24, 0xdb, 0x35, 0xf3, 0x9e, 0x75, 0x36, 0xc8, 0x9f, 0x0d,
	0xf8, 0x3f, 0xe5, 0xc9, 0x02, 0xff, 0xfc, 0xf8, 0x31, 0x00, 0x00, 0xff, 0xff, 0x99, 0xfe, 0x0a,
	0xf9, 0x95, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GCClient is the client API for GC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GCClient interface {
	GetAllServiceGroups(ctx context.Context, in *GetAllServiceGroupsRequest, opts ...grpc.CallOption) (*GetAllServiceGroupsResponse, error)
	GetMinServiceSafePointByServiceGroup(ctx context.Context, in *GetMinServiceSafePointByServiceGroupRequest, opts ...grpc.CallOption) (*GetMinServiceSafePointByServiceGroupResponse, error)
	UpdateGCSafePointByServiceGroup(ctx context.Context, in *UpdateGCSafePointByServiceGroupRequest, opts ...grpc.CallOption) (*UpdateGCSafePointByServiceGroupResponse, error)
	UpdateServiceSafePointByServiceGroup(ctx context.Context, in *UpdateServiceSafePointByServiceGroupRequest, opts ...grpc.CallOption) (*UpdateServiceSafePointByServiceGroupResponse, error)
	GetAllServiceGroupGCSafePoints(ctx context.Context, in *GetAllServiceGroupGCSafePointsRequest, opts ...grpc.CallOption) (*GetAllServiceGroupGCSafePointsResponse, error)
}

type gCClient struct {
	cc *grpc.ClientConn
}

func NewGCClient(cc *grpc.ClientConn) GCClient {
	return &gCClient{cc}
}

func (c *gCClient) GetAllServiceGroups(ctx context.Context, in *GetAllServiceGroupsRequest, opts ...grpc.CallOption) (*GetAllServiceGroupsResponse, error) {
	out := new(GetAllServiceGroupsResponse)
	err := c.cc.Invoke(ctx, "/gcpb.GC/GetAllServiceGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gCClient) GetMinServiceSafePointByServiceGroup(ctx context.Context, in *GetMinServiceSafePointByServiceGroupRequest, opts ...grpc.CallOption) (*GetMinServiceSafePointByServiceGroupResponse, error) {
	out := new(GetMinServiceSafePointByServiceGroupResponse)
	err := c.cc.Invoke(ctx, "/gcpb.GC/GetMinServiceSafePointByServiceGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gCClient) UpdateGCSafePointByServiceGroup(ctx context.Context, in *UpdateGCSafePointByServiceGroupRequest, opts ...grpc.CallOption) (*UpdateGCSafePointByServiceGroupResponse, error) {
	out := new(UpdateGCSafePointByServiceGroupResponse)
	err := c.cc.Invoke(ctx, "/gcpb.GC/UpdateGCSafePointByServiceGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gCClient) UpdateServiceSafePointByServiceGroup(ctx context.Context, in *UpdateServiceSafePointByServiceGroupRequest, opts ...grpc.CallOption) (*UpdateServiceSafePointByServiceGroupResponse, error) {
	out := new(UpdateServiceSafePointByServiceGroupResponse)
	err := c.cc.Invoke(ctx, "/gcpb.GC/UpdateServiceSafePointByServiceGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gCClient) GetAllServiceGroupGCSafePoints(ctx context.Context, in *GetAllServiceGroupGCSafePointsRequest, opts ...grpc.CallOption) (*GetAllServiceGroupGCSafePointsResponse, error) {
	out := new(GetAllServiceGroupGCSafePointsResponse)
	err := c.cc.Invoke(ctx, "/gcpb.GC/GetAllServiceGroupGCSafePoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GCServer is the server API for GC service.
type GCServer interface {
	GetAllServiceGroups(context.Context, *GetAllServiceGroupsRequest) (*GetAllServiceGroupsResponse, error)
	GetMinServiceSafePointByServiceGroup(context.Context, *GetMinServiceSafePointByServiceGroupRequest) (*GetMinServiceSafePointByServiceGroupResponse, error)
	UpdateGCSafePointByServiceGroup(context.Context, *UpdateGCSafePointByServiceGroupRequest) (*UpdateGCSafePointByServiceGroupResponse, error)
	UpdateServiceSafePointByServiceGroup(context.Context, *UpdateServiceSafePointByServiceGroupRequest) (*UpdateServiceSafePointByServiceGroupResponse, error)
	GetAllServiceGroupGCSafePoints(context.Context, *GetAllServiceGroupGCSafePointsRequest) (*GetAllServiceGroupGCSafePointsResponse, error)
}

// UnimplementedGCServer can be embedded to have forward compatible implementations.
type UnimplementedGCServer struct {
}

func (*UnimplementedGCServer) GetAllServiceGroups(ctx context.Context, req *GetAllServiceGroupsRequest) (*GetAllServiceGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllServiceGroups not implemented")
}
func (*UnimplementedGCServer) GetMinServiceSafePointByServiceGroup(ctx context.Context, req *GetMinServiceSafePointByServiceGroupRequest) (*GetMinServiceSafePointByServiceGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinServiceSafePointByServiceGroup not implemented")
}
func (*UnimplementedGCServer) UpdateGCSafePointByServiceGroup(ctx context.Context, req *UpdateGCSafePointByServiceGroupRequest) (*UpdateGCSafePointByServiceGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGCSafePointByServiceGroup not implemented")
}
func (*UnimplementedGCServer) UpdateServiceSafePointByServiceGroup(ctx context.Context, req *UpdateServiceSafePointByServiceGroupRequest) (*UpdateServiceSafePointByServiceGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceSafePointByServiceGroup not implemented")
}
func (*UnimplementedGCServer) GetAllServiceGroupGCSafePoints(ctx context.Context, req *GetAllServiceGroupGCSafePointsRequest) (*GetAllServiceGroupGCSafePointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllServiceGroupGCSafePoints not implemented")
}

func RegisterGCServer(s *grpc.Server, srv GCServer) {
	s.RegisterService(&_GC_serviceDesc, srv)
}

func _GC_GetAllServiceGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllServiceGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCServer).GetAllServiceGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gcpb.GC/GetAllServiceGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCServer).GetAllServiceGroups(ctx, req.(*GetAllServiceGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GC_GetMinServiceSafePointByServiceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMinServiceSafePointByServiceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCServer).GetMinServiceSafePointByServiceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gcpb.GC/GetMinServiceSafePointByServiceGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCServer).GetMinServiceSafePointByServiceGroup(ctx, req.(*GetMinServiceSafePointByServiceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GC_UpdateGCSafePointByServiceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGCSafePointByServiceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCServer).UpdateGCSafePointByServiceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gcpb.GC/UpdateGCSafePointByServiceGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCServer).UpdateGCSafePointByServiceGroup(ctx, req.(*UpdateGCSafePointByServiceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GC_UpdateServiceSafePointByServiceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceSafePointByServiceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCServer).UpdateServiceSafePointByServiceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gcpb.GC/UpdateServiceSafePointByServiceGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCServer).UpdateServiceSafePointByServiceGroup(ctx, req.(*UpdateServiceSafePointByServiceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GC_GetAllServiceGroupGCSafePoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllServiceGroupGCSafePointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCServer).GetAllServiceGroupGCSafePoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gcpb.GC/GetAllServiceGroupGCSafePoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCServer).GetAllServiceGroupGCSafePoints(ctx, req.(*GetAllServiceGroupGCSafePointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gcpb.GC",
	HandlerType: (*GCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllServiceGroups",
			Handler:    _GC_GetAllServiceGroups_Handler,
		},
		{
			MethodName: "GetMinServiceSafePointByServiceGroup",
			Handler:    _GC_GetMinServiceSafePointByServiceGroup_Handler,
		},
		{
			MethodName: "UpdateGCSafePointByServiceGroup",
			Handler:    _GC_UpdateGCSafePointByServiceGroup_Handler,
		},
		{
			MethodName: "UpdateServiceSafePointByServiceGroup",
			Handler:    _GC_UpdateServiceSafePointByServiceGroup_Handler,
		},
		{
			MethodName: "GetAllServiceGroupGCSafePoints",
			Handler:    _GC_GetAllServiceGroupGCSafePoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gcpb.proto",
}

func (m *RequestHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SenderId != 0 {
		i = encodeVarintGcpb(dAtA, i, uint64(m.SenderId))
		i--
		dAtA[i] = 0x10
	}
	if m.ClusterId != 0 {
		i = encodeVarintGcpb(dAtA, i, uint64(m.ClusterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGcpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ClusterId != 0 {
		i = encodeVarintGcpb(dAtA, i, uint64(m.ClusterId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintGcpb(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintGcpb(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAllServiceGroupsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllServiceGroupsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllServiceGroupsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGcpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAllServiceGroupsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllServiceGroupsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllServiceGroupsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ServiceGroupId) > 0 {
		for iNdEx := len(m.ServiceGroupId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ServiceGroupId[iNdEx])
			copy(dAtA[i:], m.ServiceGroupId[iNdEx])
			i = encodeVarintGcpb(dAtA, i, uint64(len(m.ServiceGroupId[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGcpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMinServiceSafePointByServiceGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMinServiceSafePointByServiceGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMinServiceSafePointByServiceGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ServiceGroupId) > 0 {
		i -= len(m.ServiceGroupId)
		copy(dAtA[i:], m.ServiceGroupId)
		i = encodeVarintGcpb(dAtA, i, uint64(len(m.ServiceGroupId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGcpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMinServiceSafePointByServiceGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMinServiceSafePointByServiceGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMinServiceSafePointByServiceGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Revision != 0 {
		i = encodeVarintGcpb(dAtA, i, uint64(m.Revision))
		i--
		dAtA[i] = 0x18
	}
	if m.SafePoint != 0 {
		i = encodeVarintGcpb(dAtA, i, uint64(m.SafePoint))
		i--
		dAtA[i] = 0x10
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGcpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateGCSafePointByServiceGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGCSafePointByServiceGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateGCSafePointByServiceGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Revision != 0 {
		i = encodeVarintGcpb(dAtA, i, uint64(m.Revision))
		i--
		dAtA[i] = 0x20
	}
	if m.SafePoint != 0 {
		i = encodeVarintGcpb(dAtA, i, uint64(m.SafePoint))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ServiceGroupId) > 0 {
		i -= len(m.ServiceGroupId)
		copy(dAtA[i:], m.ServiceGroupId)
		i = encodeVarintGcpb(dAtA, i, uint64(len(m.ServiceGroupId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGcpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateGCSafePointByServiceGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGCSafePointByServiceGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateGCSafePointByServiceGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NewSafePoint != 0 {
		i = encodeVarintGcpb(dAtA, i, uint64(m.NewSafePoint))
		i--
		dAtA[i] = 0x18
	}
	if m.Succeeded {
		i--
		if m.Succeeded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGcpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateServiceSafePointByServiceGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateServiceSafePointByServiceGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateServiceSafePointByServiceGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SafePoint != 0 {
		i = encodeVarintGcpb(dAtA, i, uint64(m.SafePoint))
		i--
		dAtA[i] = 0x28
	}
	if m.TTL != 0 {
		i = encodeVarintGcpb(dAtA, i, uint64(m.TTL))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ServiceId) > 0 {
		i -= len(m.ServiceId)
		copy(dAtA[i:], m.ServiceId)
		i = encodeVarintGcpb(dAtA, i, uint64(len(m.ServiceId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ServiceGroupId) > 0 {
		i -= len(m.ServiceGroupId)
		copy(dAtA[i:], m.ServiceGroupId)
		i = encodeVarintGcpb(dAtA, i, uint64(len(m.ServiceGroupId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGcpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateServiceSafePointByServiceGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateServiceSafePointByServiceGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateServiceSafePointByServiceGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NewSafePoint != 0 {
		i = encodeVarintGcpb(dAtA, i, uint64(m.NewSafePoint))
		i--
		dAtA[i] = 0x28
	}
	if m.OldSafePoint != 0 {
		i = encodeVarintGcpb(dAtA, i, uint64(m.OldSafePoint))
		i--
		dAtA[i] = 0x20
	}
	if m.GcSafePoint != 0 {
		i = encodeVarintGcpb(dAtA, i, uint64(m.GcSafePoint))
		i--
		dAtA[i] = 0x18
	}
	if m.Succeeded {
		i--
		if m.Succeeded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGcpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceGroupSafePoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceGroupSafePoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceGroupSafePoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SafePoint != 0 {
		i = encodeVarintGcpb(dAtA, i, uint64(m.SafePoint))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ServiceGroupId) > 0 {
		i -= len(m.ServiceGroupId)
		copy(dAtA[i:], m.ServiceGroupId)
		i = encodeVarintGcpb(dAtA, i, uint64(len(m.ServiceGroupId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAllServiceGroupGCSafePointsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllServiceGroupGCSafePointsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllServiceGroupGCSafePointsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGcpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAllServiceGroupGCSafePointsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllServiceGroupGCSafePointsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllServiceGroupGCSafePointsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SafePoints) > 0 {
		for iNdEx := len(m.SafePoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SafePoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGcpb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGcpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGcpb(dAtA []byte, offset int, v uint64) int {
	offset -= sovGcpb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RequestHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterId != 0 {
		n += 1 + sovGcpb(uint64(m.ClusterId))
	}
	if m.SenderId != 0 {
		n += 1 + sovGcpb(uint64(m.SenderId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResponseHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterId != 0 {
		n += 1 + sovGcpb(uint64(m.ClusterId))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovGcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGcpb(uint64(m.Type))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovGcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllServiceGroupsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllServiceGroupsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGcpb(uint64(l))
	}
	if len(m.ServiceGroupId) > 0 {
		for _, b := range m.ServiceGroupId {
			l = len(b)
			n += 1 + l + sovGcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMinServiceSafePointByServiceGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGcpb(uint64(l))
	}
	l = len(m.ServiceGroupId)
	if l > 0 {
		n += 1 + l + sovGcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMinServiceSafePointByServiceGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGcpb(uint64(l))
	}
	if m.SafePoint != 0 {
		n += 1 + sovGcpb(uint64(m.SafePoint))
	}
	if m.Revision != 0 {
		n += 1 + sovGcpb(uint64(m.Revision))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateGCSafePointByServiceGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGcpb(uint64(l))
	}
	l = len(m.ServiceGroupId)
	if l > 0 {
		n += 1 + l + sovGcpb(uint64(l))
	}
	if m.SafePoint != 0 {
		n += 1 + sovGcpb(uint64(m.SafePoint))
	}
	if m.Revision != 0 {
		n += 1 + sovGcpb(uint64(m.Revision))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateGCSafePointByServiceGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGcpb(uint64(l))
	}
	if m.Succeeded {
		n += 2
	}
	if m.NewSafePoint != 0 {
		n += 1 + sovGcpb(uint64(m.NewSafePoint))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateServiceSafePointByServiceGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGcpb(uint64(l))
	}
	l = len(m.ServiceGroupId)
	if l > 0 {
		n += 1 + l + sovGcpb(uint64(l))
	}
	l = len(m.ServiceId)
	if l > 0 {
		n += 1 + l + sovGcpb(uint64(l))
	}
	if m.TTL != 0 {
		n += 1 + sovGcpb(uint64(m.TTL))
	}
	if m.SafePoint != 0 {
		n += 1 + sovGcpb(uint64(m.SafePoint))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateServiceSafePointByServiceGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGcpb(uint64(l))
	}
	if m.Succeeded {
		n += 2
	}
	if m.GcSafePoint != 0 {
		n += 1 + sovGcpb(uint64(m.GcSafePoint))
	}
	if m.OldSafePoint != 0 {
		n += 1 + sovGcpb(uint64(m.OldSafePoint))
	}
	if m.NewSafePoint != 0 {
		n += 1 + sovGcpb(uint64(m.NewSafePoint))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServiceGroupSafePoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceGroupId)
	if l > 0 {
		n += 1 + l + sovGcpb(uint64(l))
	}
	if m.SafePoint != 0 {
		n += 1 + sovGcpb(uint64(m.SafePoint))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllServiceGroupGCSafePointsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllServiceGroupGCSafePointsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGcpb(uint64(l))
	}
	if len(m.SafePoints) > 0 {
		for _, e := range m.SafePoints {
			l = e.Size()
			n += 1 + l + sovGcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGcpb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGcpb(x uint64) (n int) {
	return sovGcpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RequestHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			m.ClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			m.SenderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			m.ClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGcpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGcpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ErrorType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGcpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGcpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllServiceGroupsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllServiceGroupsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllServiceGroupsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGcpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGcpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllServiceGroupsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllServiceGroupsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllServiceGroupsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGcpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGcpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceGroupId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGcpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceGroupId = append(m.ServiceGroupId, make([]byte, postIndex-iNdEx))
			copy(m.ServiceGroupId[len(m.ServiceGroupId)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMinServiceSafePointByServiceGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMinServiceSafePointByServiceGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMinServiceSafePointByServiceGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGcpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGcpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceGroupId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGcpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceGroupId = append(m.ServiceGroupId[:0], dAtA[iNdEx:postIndex]...)
			if m.ServiceGroupId == nil {
				m.ServiceGroupId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMinServiceSafePointByServiceGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMinServiceSafePointByServiceGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMinServiceSafePointByServiceGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGcpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGcpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SafePoint", wireType)
			}
			m.SafePoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SafePoint |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			m.Revision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revision |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGCSafePointByServiceGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGCSafePointByServiceGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGCSafePointByServiceGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGcpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGcpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceGroupId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGcpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceGroupId = append(m.ServiceGroupId[:0], dAtA[iNdEx:postIndex]...)
			if m.ServiceGroupId == nil {
				m.ServiceGroupId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SafePoint", wireType)
			}
			m.SafePoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SafePoint |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			m.Revision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revision |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGCSafePointByServiceGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGCSafePointByServiceGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGCSafePointByServiceGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGcpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGcpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succeeded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succeeded = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSafePoint", wireType)
			}
			m.NewSafePoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewSafePoint |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateServiceSafePointByServiceGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateServiceSafePointByServiceGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateServiceSafePointByServiceGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGcpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGcpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceGroupId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGcpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceGroupId = append(m.ServiceGroupId[:0], dAtA[iNdEx:postIndex]...)
			if m.ServiceGroupId == nil {
				m.ServiceGroupId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGcpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceId = append(m.ServiceId[:0], dAtA[iNdEx:postIndex]...)
			if m.ServiceId == nil {
				m.ServiceId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTL", wireType)
			}
			m.TTL = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TTL |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SafePoint", wireType)
			}
			m.SafePoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SafePoint |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateServiceSafePointByServiceGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateServiceSafePointByServiceGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateServiceSafePointByServiceGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGcpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGcpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succeeded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succeeded = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcSafePoint", wireType)
			}
			m.GcSafePoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GcSafePoint |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldSafePoint", wireType)
			}
			m.OldSafePoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldSafePoint |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSafePoint", wireType)
			}
			m.NewSafePoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewSafePoint |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceGroupSafePoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceGroupSafePoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceGroupSafePoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceGroupId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGcpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceGroupId = append(m.ServiceGroupId[:0], dAtA[iNdEx:postIndex]...)
			if m.ServiceGroupId == nil {
				m.ServiceGroupId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SafePoint", wireType)
			}
			m.SafePoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SafePoint |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllServiceGroupGCSafePointsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllServiceGroupGCSafePointsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllServiceGroupGCSafePointsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGcpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGcpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllServiceGroupGCSafePointsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllServiceGroupGCSafePointsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllServiceGroupGCSafePointsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGcpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGcpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SafePoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGcpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGcpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SafePoints = append(m.SafePoints, &ServiceGroupSafePoint{})
			if err := m.SafePoints[len(m.SafePoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGcpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGcpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGcpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGcpb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGcpb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGcpb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGcpb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGcpb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGcpb = fmt.Errorf("proto: unexpected end of group")
)
