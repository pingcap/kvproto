// Code generated by protoc-gen-gogo.
// source: debugpb.proto
// DO NOT EDIT!

/*
	Package debugpb is a generated protocol buffer package.

	It is generated from these files:
		debugpb.proto

	It has these top-level messages:
		GetRequest
		GetResponse
		MvccRequest
		MvccResponse
		RaftLogRequest
		RaftLogResponse
		RegionInfoRequest
		RegionInfoResponse
		SizeRequest
		SizeResponse
		ScanRequest
		ScanResponse
*/
package debugpb

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"

	eraftpb "github.com/pingcap/kvproto/pkg/eraftpb"

	kvrpcpb "github.com/pingcap/kvproto/pkg/kvrpcpb"

	raft_serverpb "github.com/pingcap/kvproto/pkg/raft_serverpb"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CF int32

const (
	CF_INVALID CF = 0
	CF_DEFAULT CF = 1
	CF_WRITE   CF = 2
	CF_LOCK    CF = 3
	CF_RAFT    CF = 4
)

var CF_name = map[int32]string{
	0: "INVALID",
	1: "DEFAULT",
	2: "WRITE",
	3: "LOCK",
	4: "RAFT",
}
var CF_value = map[string]int32{
	"INVALID": 0,
	"DEFAULT": 1,
	"WRITE":   2,
	"LOCK":    3,
	"RAFT":    4,
}

func (x CF) String() string {
	return proto.EnumName(CF_name, int32(x))
}
func (CF) EnumDescriptor() ([]byte, []int) { return fileDescriptorDebugpb, []int{0} }

type MvccRequest_By int32

const (
	MvccRequest_INVALID  MvccRequest_By = 0
	MvccRequest_KEY      MvccRequest_By = 1
	MvccRequest_START_TS MvccRequest_By = 2
)

var MvccRequest_By_name = map[int32]string{
	0: "INVALID",
	1: "KEY",
	2: "START_TS",
}
var MvccRequest_By_value = map[string]int32{
	"INVALID":  0,
	"KEY":      1,
	"START_TS": 2,
}

func (x MvccRequest_By) String() string {
	return proto.EnumName(MvccRequest_By_name, int32(x))
}
func (MvccRequest_By) EnumDescriptor() ([]byte, []int) { return fileDescriptorDebugpb, []int{2, 0} }

type GetRequest struct {
	Cf         CF     `protobuf:"varint,1,opt,name=cf,proto3,enum=debugpb.CF" json:"cf,omitempty"`
	KeyEncoded []byte `protobuf:"bytes,2,opt,name=key_encoded,json=keyEncoded,proto3" json:"key_encoded,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebugpb, []int{0} }

func (m *GetRequest) GetCf() CF {
	if m != nil {
		return m.Cf
	}
	return CF_INVALID
}

func (m *GetRequest) GetKeyEncoded() []byte {
	if m != nil {
		return m.KeyEncoded
	}
	return nil
}

type GetResponse struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebugpb, []int{1} }

func (m *GetResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type MvccRequest struct {
	By      MvccRequest_By `protobuf:"varint,1,opt,name=by,proto3,enum=debugpb.MvccRequest_By" json:"by,omitempty"`
	Key     string         `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	StartTs uint64         `protobuf:"varint,3,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
}

func (m *MvccRequest) Reset()                    { *m = MvccRequest{} }
func (m *MvccRequest) String() string            { return proto.CompactTextString(m) }
func (*MvccRequest) ProtoMessage()               {}
func (*MvccRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebugpb, []int{2} }

func (m *MvccRequest) GetBy() MvccRequest_By {
	if m != nil {
		return m.By
	}
	return MvccRequest_INVALID
}

func (m *MvccRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MvccRequest) GetStartTs() uint64 {
	if m != nil {
		return m.StartTs
	}
	return 0
}

// Missing part:
//   1. Lock type in lock.
//   2. Short value in lock.
//   3. Short value in write.
type MvccResponse struct {
	Entries []*MvccResponse_Entry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *MvccResponse) Reset()                    { *m = MvccResponse{} }
func (m *MvccResponse) String() string            { return proto.CompactTextString(m) }
func (*MvccResponse) ProtoMessage()               {}
func (*MvccResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebugpb, []int{3} }

func (m *MvccResponse) GetEntries() []*MvccResponse_Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type MvccResponse_Entry struct {
	Key  string            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Info *kvrpcpb.MvccInfo `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (m *MvccResponse_Entry) Reset()                    { *m = MvccResponse_Entry{} }
func (m *MvccResponse_Entry) String() string            { return proto.CompactTextString(m) }
func (*MvccResponse_Entry) ProtoMessage()               {}
func (*MvccResponse_Entry) Descriptor() ([]byte, []int) { return fileDescriptorDebugpb, []int{3, 0} }

func (m *MvccResponse_Entry) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MvccResponse_Entry) GetInfo() *kvrpcpb.MvccInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type RaftLogRequest struct {
	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	LogIndex uint64 `protobuf:"varint,2,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
}

func (m *RaftLogRequest) Reset()                    { *m = RaftLogRequest{} }
func (m *RaftLogRequest) String() string            { return proto.CompactTextString(m) }
func (*RaftLogRequest) ProtoMessage()               {}
func (*RaftLogRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebugpb, []int{4} }

func (m *RaftLogRequest) GetRegionId() uint64 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *RaftLogRequest) GetLogIndex() uint64 {
	if m != nil {
		return m.LogIndex
	}
	return 0
}

type RaftLogResponse struct {
	Entry *eraftpb.Entry `protobuf:"bytes,1,opt,name=entry" json:"entry,omitempty"`
}

func (m *RaftLogResponse) Reset()                    { *m = RaftLogResponse{} }
func (m *RaftLogResponse) String() string            { return proto.CompactTextString(m) }
func (*RaftLogResponse) ProtoMessage()               {}
func (*RaftLogResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebugpb, []int{5} }

func (m *RaftLogResponse) GetEntry() *eraftpb.Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type RegionInfoRequest struct {
	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
}

func (m *RegionInfoRequest) Reset()                    { *m = RegionInfoRequest{} }
func (m *RegionInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*RegionInfoRequest) ProtoMessage()               {}
func (*RegionInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebugpb, []int{6} }

func (m *RegionInfoRequest) GetRegionId() uint64 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

type RegionInfoResponse struct {
	RaftLocalState *raft_serverpb.RaftLocalState `protobuf:"bytes,1,opt,name=raft_local_state,json=raftLocalState" json:"raft_local_state,omitempty"`
	RaftApplyState *raft_serverpb.RaftApplyState `protobuf:"bytes,2,opt,name=raft_apply_state,json=raftApplyState" json:"raft_apply_state,omitempty"`
}

func (m *RegionInfoResponse) Reset()                    { *m = RegionInfoResponse{} }
func (m *RegionInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*RegionInfoResponse) ProtoMessage()               {}
func (*RegionInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebugpb, []int{7} }

func (m *RegionInfoResponse) GetRaftLocalState() *raft_serverpb.RaftLocalState {
	if m != nil {
		return m.RaftLocalState
	}
	return nil
}

func (m *RegionInfoResponse) GetRaftApplyState() *raft_serverpb.RaftApplyState {
	if m != nil {
		return m.RaftApplyState
	}
	return nil
}

type SizeRequest struct {
	RegionId uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	Cfs      []CF   `protobuf:"varint,2,rep,packed,name=cfs,enum=debugpb.CF" json:"cfs,omitempty"`
}

func (m *SizeRequest) Reset()                    { *m = SizeRequest{} }
func (m *SizeRequest) String() string            { return proto.CompactTextString(m) }
func (*SizeRequest) ProtoMessage()               {}
func (*SizeRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebugpb, []int{8} }

func (m *SizeRequest) GetRegionId() uint64 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *SizeRequest) GetCfs() []CF {
	if m != nil {
		return m.Cfs
	}
	return nil
}

type SizeResponse struct {
	Size_ uint64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (m *SizeResponse) Reset()                    { *m = SizeResponse{} }
func (m *SizeResponse) String() string            { return proto.CompactTextString(m) }
func (*SizeResponse) ProtoMessage()               {}
func (*SizeResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebugpb, []int{9} }

func (m *SizeResponse) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

type ScanRequest struct {
	FromKeyEncoded []byte              `protobuf:"bytes,1,opt,name=from_key_encoded,json=fromKeyEncoded,proto3" json:"from_key_encoded,omitempty"`
	ToKeyEncoded   []byte              `protobuf:"bytes,2,opt,name=to_key_encoded,json=toKeyEncoded,proto3" json:"to_key_encoded,omitempty"`
	Filter         *ScanRequest_Filter `protobuf:"bytes,3,opt,name=filter" json:"filter,omitempty"`
}

func (m *ScanRequest) Reset()                    { *m = ScanRequest{} }
func (m *ScanRequest) String() string            { return proto.CompactTextString(m) }
func (*ScanRequest) ProtoMessage()               {}
func (*ScanRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebugpb, []int{10} }

func (m *ScanRequest) GetFromKeyEncoded() []byte {
	if m != nil {
		return m.FromKeyEncoded
	}
	return nil
}

func (m *ScanRequest) GetToKeyEncoded() []byte {
	if m != nil {
		return m.ToKeyEncoded
	}
	return nil
}

func (m *ScanRequest) GetFilter() *ScanRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

// Filte scan response.
type ScanRequest_Filter struct {
	Limit    uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	StartTs  uint64 `protobuf:"varint,2,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	CommitTs uint64 `protobuf:"varint,3,opt,name=commit_ts,json=commitTs,proto3" json:"commit_ts,omitempty"`
	KeyOnly  bool   `protobuf:"varint,4,opt,name=key_only,json=keyOnly,proto3" json:"key_only,omitempty"`
	Cfs      []CF   `protobuf:"varint,5,rep,packed,name=cfs,enum=debugpb.CF" json:"cfs,omitempty"`
}

func (m *ScanRequest_Filter) Reset()                    { *m = ScanRequest_Filter{} }
func (m *ScanRequest_Filter) String() string            { return proto.CompactTextString(m) }
func (*ScanRequest_Filter) ProtoMessage()               {}
func (*ScanRequest_Filter) Descriptor() ([]byte, []int) { return fileDescriptorDebugpb, []int{10, 0} }

func (m *ScanRequest_Filter) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ScanRequest_Filter) GetStartTs() uint64 {
	if m != nil {
		return m.StartTs
	}
	return 0
}

func (m *ScanRequest_Filter) GetCommitTs() uint64 {
	if m != nil {
		return m.CommitTs
	}
	return 0
}

func (m *ScanRequest_Filter) GetKeyOnly() bool {
	if m != nil {
		return m.KeyOnly
	}
	return false
}

func (m *ScanRequest_Filter) GetCfs() []CF {
	if m != nil {
		return m.Cfs
	}
	return nil
}

type ScanResponse struct {
	KeyEncoded []byte            `protobuf:"bytes,1,opt,name=key_encoded,json=keyEncoded,proto3" json:"key_encoded,omitempty"`
	Info       *kvrpcpb.MvccInfo `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (m *ScanResponse) Reset()                    { *m = ScanResponse{} }
func (m *ScanResponse) String() string            { return proto.CompactTextString(m) }
func (*ScanResponse) ProtoMessage()               {}
func (*ScanResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebugpb, []int{11} }

func (m *ScanResponse) GetKeyEncoded() []byte {
	if m != nil {
		return m.KeyEncoded
	}
	return nil
}

func (m *ScanResponse) GetInfo() *kvrpcpb.MvccInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func init() {
	proto.RegisterType((*GetRequest)(nil), "debugpb.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "debugpb.GetResponse")
	proto.RegisterType((*MvccRequest)(nil), "debugpb.MvccRequest")
	proto.RegisterType((*MvccResponse)(nil), "debugpb.MvccResponse")
	proto.RegisterType((*MvccResponse_Entry)(nil), "debugpb.MvccResponse.Entry")
	proto.RegisterType((*RaftLogRequest)(nil), "debugpb.RaftLogRequest")
	proto.RegisterType((*RaftLogResponse)(nil), "debugpb.RaftLogResponse")
	proto.RegisterType((*RegionInfoRequest)(nil), "debugpb.RegionInfoRequest")
	proto.RegisterType((*RegionInfoResponse)(nil), "debugpb.RegionInfoResponse")
	proto.RegisterType((*SizeRequest)(nil), "debugpb.SizeRequest")
	proto.RegisterType((*SizeResponse)(nil), "debugpb.SizeResponse")
	proto.RegisterType((*ScanRequest)(nil), "debugpb.ScanRequest")
	proto.RegisterType((*ScanRequest_Filter)(nil), "debugpb.ScanRequest.Filter")
	proto.RegisterType((*ScanResponse)(nil), "debugpb.ScanResponse")
	proto.RegisterEnum("debugpb.CF", CF_name, CF_value)
	proto.RegisterEnum("debugpb.MvccRequest_By", MvccRequest_By_name, MvccRequest_By_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Debug service

type DebugClient interface {
	// Read a value arbitrarily for a encoded key.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Read MVCC info arbitrarily for raw key.
	Mvcc(ctx context.Context, in *MvccRequest, opts ...grpc.CallOption) (*MvccResponse, error)
	// Read raft info.
	RaftLog(ctx context.Context, in *RaftLogRequest, opts ...grpc.CallOption) (*RaftLogResponse, error)
	RegionInfo(ctx context.Context, in *RegionInfoRequest, opts ...grpc.CallOption) (*RegionInfoResponse, error)
	// Calculate size of a region or a cf.
	// Note: DO NOT CALL IT IN PRODUCTION, it's really expensive.
	Size(ctx context.Context, in *SizeRequest, opts ...grpc.CallOption) (*SizeResponse, error)
	// Scan a specific range.
	// Note: DO NOT CALL IT IN PRODUCTION, it's really expensive.
	Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (Debug_ScanClient, error)
}

type debugClient struct {
	cc *grpc.ClientConn
}

func NewDebugClient(cc *grpc.ClientConn) DebugClient {
	return &debugClient{cc}
}

func (c *debugClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/debugpb.Debug/get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) Mvcc(ctx context.Context, in *MvccRequest, opts ...grpc.CallOption) (*MvccResponse, error) {
	out := new(MvccResponse)
	err := grpc.Invoke(ctx, "/debugpb.Debug/mvcc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) RaftLog(ctx context.Context, in *RaftLogRequest, opts ...grpc.CallOption) (*RaftLogResponse, error) {
	out := new(RaftLogResponse)
	err := grpc.Invoke(ctx, "/debugpb.Debug/raft_log", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) RegionInfo(ctx context.Context, in *RegionInfoRequest, opts ...grpc.CallOption) (*RegionInfoResponse, error) {
	out := new(RegionInfoResponse)
	err := grpc.Invoke(ctx, "/debugpb.Debug/region_info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) Size(ctx context.Context, in *SizeRequest, opts ...grpc.CallOption) (*SizeResponse, error) {
	out := new(SizeResponse)
	err := grpc.Invoke(ctx, "/debugpb.Debug/size", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (Debug_ScanClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Debug_serviceDesc.Streams[0], c.cc, "/debugpb.Debug/scan", opts...)
	if err != nil {
		return nil, err
	}
	x := &debugScanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Debug_ScanClient interface {
	Recv() (*ScanResponse, error)
	grpc.ClientStream
}

type debugScanClient struct {
	grpc.ClientStream
}

func (x *debugScanClient) Recv() (*ScanResponse, error) {
	m := new(ScanResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Debug service

type DebugServer interface {
	// Read a value arbitrarily for a encoded key.
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Read MVCC info arbitrarily for raw key.
	Mvcc(context.Context, *MvccRequest) (*MvccResponse, error)
	// Read raft info.
	RaftLog(context.Context, *RaftLogRequest) (*RaftLogResponse, error)
	RegionInfo(context.Context, *RegionInfoRequest) (*RegionInfoResponse, error)
	// Calculate size of a region or a cf.
	// Note: DO NOT CALL IT IN PRODUCTION, it's really expensive.
	Size(context.Context, *SizeRequest) (*SizeResponse, error)
	// Scan a specific range.
	// Note: DO NOT CALL IT IN PRODUCTION, it's really expensive.
	Scan(*ScanRequest, Debug_ScanServer) error
}

func RegisterDebugServer(s *grpc.Server, srv DebugServer) {
	s.RegisterService(&_Debug_serviceDesc, srv)
}

func _Debug_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debugpb.Debug/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_Mvcc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MvccRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).Mvcc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debugpb.Debug/Mvcc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).Mvcc(ctx, req.(*MvccRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_RaftLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).RaftLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debugpb.Debug/RaftLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).RaftLog(ctx, req.(*RaftLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_RegionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).RegionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debugpb.Debug/RegionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).RegionInfo(ctx, req.(*RegionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_Size_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).Size(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debugpb.Debug/Size",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).Size(ctx, req.(*SizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_Scan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DebugServer).Scan(m, &debugScanServer{stream})
}

type Debug_ScanServer interface {
	Send(*ScanResponse) error
	grpc.ServerStream
}

type debugScanServer struct {
	grpc.ServerStream
}

func (x *debugScanServer) Send(m *ScanResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Debug_serviceDesc = grpc.ServiceDesc{
	ServiceName: "debugpb.Debug",
	HandlerType: (*DebugServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _Debug_Get_Handler,
		},
		{
			MethodName: "mvcc",
			Handler:    _Debug_Mvcc_Handler,
		},
		{
			MethodName: "raft_log",
			Handler:    _Debug_RaftLog_Handler,
		},
		{
			MethodName: "region_info",
			Handler:    _Debug_RegionInfo_Handler,
		},
		{
			MethodName: "size",
			Handler:    _Debug_Size_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "scan",
			Handler:       _Debug_Scan_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "debugpb.proto",
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cf != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(m.Cf))
	}
	if len(m.KeyEncoded) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(len(m.KeyEncoded)))
		i += copy(dAtA[i:], m.KeyEncoded)
	}
	return i, nil
}

func (m *GetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *MvccRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MvccRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.By != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(m.By))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.StartTs != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(m.StartTs))
	}
	return i, nil
}

func (m *MvccResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MvccResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, msg := range m.Entries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebugpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MvccResponse_Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MvccResponse_Entry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Info != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(m.Info.Size()))
		n1, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *RaftLogRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftLogRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RegionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(m.RegionId))
	}
	if m.LogIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(m.LogIndex))
	}
	return i, nil
}

func (m *RaftLogResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftLogResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Entry != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(m.Entry.Size()))
		n2, err := m.Entry.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *RegionInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RegionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(m.RegionId))
	}
	return i, nil
}

func (m *RegionInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RaftLocalState != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(m.RaftLocalState.Size()))
		n3, err := m.RaftLocalState.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.RaftApplyState != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(m.RaftApplyState.Size()))
		n4, err := m.RaftApplyState.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *SizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SizeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RegionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(m.RegionId))
	}
	if len(m.Cfs) > 0 {
		dAtA6 := make([]byte, len(m.Cfs)*10)
		var j5 int
		for _, num := range m.Cfs {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	return i, nil
}

func (m *SizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SizeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(m.Size_))
	}
	return i, nil
}

func (m *ScanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScanRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FromKeyEncoded) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(len(m.FromKeyEncoded)))
		i += copy(dAtA[i:], m.FromKeyEncoded)
	}
	if len(m.ToKeyEncoded) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(len(m.ToKeyEncoded)))
		i += copy(dAtA[i:], m.ToKeyEncoded)
	}
	if m.Filter != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(m.Filter.Size()))
		n7, err := m.Filter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *ScanRequest_Filter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScanRequest_Filter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(m.Limit))
	}
	if m.StartTs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(m.StartTs))
	}
	if m.CommitTs != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(m.CommitTs))
	}
	if m.KeyOnly {
		dAtA[i] = 0x20
		i++
		if m.KeyOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Cfs) > 0 {
		dAtA9 := make([]byte, len(m.Cfs)*10)
		var j8 int
		for _, num := range m.Cfs {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	return i, nil
}

func (m *ScanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScanResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.KeyEncoded) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(len(m.KeyEncoded)))
		i += copy(dAtA[i:], m.KeyEncoded)
	}
	if m.Info != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebugpb(dAtA, i, uint64(m.Info.Size()))
		n10, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func encodeFixed64Debugpb(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Debugpb(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDebugpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Cf != 0 {
		n += 1 + sovDebugpb(uint64(m.Cf))
	}
	l = len(m.KeyEncoded)
	if l > 0 {
		n += 1 + l + sovDebugpb(uint64(l))
	}
	return n
}

func (m *GetResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDebugpb(uint64(l))
	}
	return n
}

func (m *MvccRequest) Size() (n int) {
	var l int
	_ = l
	if m.By != 0 {
		n += 1 + sovDebugpb(uint64(m.By))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDebugpb(uint64(l))
	}
	if m.StartTs != 0 {
		n += 1 + sovDebugpb(uint64(m.StartTs))
	}
	return n
}

func (m *MvccResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovDebugpb(uint64(l))
		}
	}
	return n
}

func (m *MvccResponse_Entry) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDebugpb(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovDebugpb(uint64(l))
	}
	return n
}

func (m *RaftLogRequest) Size() (n int) {
	var l int
	_ = l
	if m.RegionId != 0 {
		n += 1 + sovDebugpb(uint64(m.RegionId))
	}
	if m.LogIndex != 0 {
		n += 1 + sovDebugpb(uint64(m.LogIndex))
	}
	return n
}

func (m *RaftLogResponse) Size() (n int) {
	var l int
	_ = l
	if m.Entry != nil {
		l = m.Entry.Size()
		n += 1 + l + sovDebugpb(uint64(l))
	}
	return n
}

func (m *RegionInfoRequest) Size() (n int) {
	var l int
	_ = l
	if m.RegionId != 0 {
		n += 1 + sovDebugpb(uint64(m.RegionId))
	}
	return n
}

func (m *RegionInfoResponse) Size() (n int) {
	var l int
	_ = l
	if m.RaftLocalState != nil {
		l = m.RaftLocalState.Size()
		n += 1 + l + sovDebugpb(uint64(l))
	}
	if m.RaftApplyState != nil {
		l = m.RaftApplyState.Size()
		n += 1 + l + sovDebugpb(uint64(l))
	}
	return n
}

func (m *SizeRequest) Size() (n int) {
	var l int
	_ = l
	if m.RegionId != 0 {
		n += 1 + sovDebugpb(uint64(m.RegionId))
	}
	if len(m.Cfs) > 0 {
		l = 0
		for _, e := range m.Cfs {
			l += sovDebugpb(uint64(e))
		}
		n += 1 + sovDebugpb(uint64(l)) + l
	}
	return n
}

func (m *SizeResponse) Size() (n int) {
	var l int
	_ = l
	if m.Size_ != 0 {
		n += 1 + sovDebugpb(uint64(m.Size_))
	}
	return n
}

func (m *ScanRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.FromKeyEncoded)
	if l > 0 {
		n += 1 + l + sovDebugpb(uint64(l))
	}
	l = len(m.ToKeyEncoded)
	if l > 0 {
		n += 1 + l + sovDebugpb(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovDebugpb(uint64(l))
	}
	return n
}

func (m *ScanRequest_Filter) Size() (n int) {
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovDebugpb(uint64(m.Limit))
	}
	if m.StartTs != 0 {
		n += 1 + sovDebugpb(uint64(m.StartTs))
	}
	if m.CommitTs != 0 {
		n += 1 + sovDebugpb(uint64(m.CommitTs))
	}
	if m.KeyOnly {
		n += 2
	}
	if len(m.Cfs) > 0 {
		l = 0
		for _, e := range m.Cfs {
			l += sovDebugpb(uint64(e))
		}
		n += 1 + sovDebugpb(uint64(l)) + l
	}
	return n
}

func (m *ScanResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.KeyEncoded)
	if l > 0 {
		n += 1 + l + sovDebugpb(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovDebugpb(uint64(l))
	}
	return n
}

func sovDebugpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDebugpb(x uint64) (n int) {
	return sovDebugpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebugpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cf", wireType)
			}
			m.Cf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cf |= (CF(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyEncoded", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDebugpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyEncoded = append(m.KeyEncoded[:0], dAtA[iNdEx:postIndex]...)
			if m.KeyEncoded == nil {
				m.KeyEncoded = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebugpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebugpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebugpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDebugpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebugpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebugpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MvccRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebugpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MvccRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MvccRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field By", wireType)
			}
			m.By = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.By |= (MvccRequest_By(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebugpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
			}
			m.StartTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebugpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebugpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MvccResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebugpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MvccResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MvccResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebugpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &MvccResponse_Entry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebugpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebugpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MvccResponse_Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebugpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebugpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebugpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &kvrpcpb.MvccInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebugpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebugpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftLogRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebugpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftLogRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftLogRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIndex", wireType)
			}
			m.LogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebugpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebugpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftLogResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebugpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftLogResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftLogResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebugpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entry == nil {
				m.Entry = &eraftpb.Entry{}
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebugpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebugpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebugpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebugpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebugpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebugpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftLocalState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebugpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RaftLocalState == nil {
				m.RaftLocalState = &raft_serverpb.RaftLocalState{}
			}
			if err := m.RaftLocalState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftApplyState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebugpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RaftApplyState == nil {
				m.RaftApplyState = &raft_serverpb.RaftApplyState{}
			}
			if err := m.RaftApplyState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebugpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebugpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebugpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDebugpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDebugpb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v CF
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDebugpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (CF(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cfs = append(m.Cfs, v)
				}
			} else if wireType == 0 {
				var v CF
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDebugpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (CF(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cfs = append(m.Cfs, v)
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cfs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebugpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebugpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebugpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebugpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebugpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebugpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromKeyEncoded", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDebugpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromKeyEncoded = append(m.FromKeyEncoded[:0], dAtA[iNdEx:postIndex]...)
			if m.FromKeyEncoded == nil {
				m.FromKeyEncoded = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToKeyEncoded", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDebugpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToKeyEncoded = append(m.ToKeyEncoded[:0], dAtA[iNdEx:postIndex]...)
			if m.ToKeyEncoded == nil {
				m.ToKeyEncoded = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebugpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &ScanRequest_Filter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebugpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebugpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScanRequest_Filter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebugpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Filter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Filter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
			}
			m.StartTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTs", wireType)
			}
			m.CommitTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitTs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyOnly = bool(v != 0)
		case 5:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDebugpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDebugpb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v CF
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDebugpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (CF(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cfs = append(m.Cfs, v)
				}
			} else if wireType == 0 {
				var v CF
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDebugpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (CF(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cfs = append(m.Cfs, v)
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cfs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebugpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebugpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebugpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyEncoded", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDebugpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyEncoded = append(m.KeyEncoded[:0], dAtA[iNdEx:postIndex]...)
			if m.KeyEncoded == nil {
				m.KeyEncoded = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebugpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &kvrpcpb.MvccInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebugpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebugpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDebugpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDebugpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDebugpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDebugpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDebugpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDebugpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDebugpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDebugpb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("debugpb.proto", fileDescriptorDebugpb) }

var fileDescriptorDebugpb = []byte{
	// 863 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0xce, 0x38, 0xce, 0x26, 0x7b, 0x9c, 0x0d, 0xee, 0x74, 0x11, 0xc1, 0xab, 0x2e, 0xd1, 0x50,
	0x44, 0xd4, 0x0b, 0x53, 0xa5, 0xaa, 0x7a, 0x85, 0x60, 0x7f, 0x92, 0x92, 0xee, 0x42, 0xa5, 0x49,
	0x28, 0xe2, 0xca, 0x72, 0x9c, 0xb1, 0x65, 0xc5, 0xf1, 0x04, 0x7b, 0x36, 0xc2, 0x7d, 0x01, 0xae,
	0x90, 0xb8, 0xe4, 0x05, 0xe0, 0x59, 0xb8, 0xe4, 0x11, 0xd0, 0x72, 0xcd, 0x3b, 0xa0, 0xf1, 0xd8,
	0x89, 0x93, 0x6e, 0xa5, 0xbd, 0xca, 0x9c, 0x9f, 0xf9, 0xce, 0x77, 0xc6, 0xe7, 0x3b, 0x81, 0xa3,
	0x39, 0x9b, 0xdd, 0x04, 0xab, 0x99, 0xbd, 0x4a, 0xb8, 0xe0, 0xb8, 0x59, 0x98, 0xd6, 0x11, 0x4b,
	0x5c, 0x5f, 0x94, 0x7e, 0xeb, 0x68, 0xb1, 0x4e, 0x56, 0xde, 0xc6, 0x7c, 0x28, 0x83, 0x4e, 0xca,
	0x92, 0x35, 0x4b, 0x36, 0xce, 0xe3, 0x80, 0x07, 0x3c, 0x3f, 0x7e, 0x21, 0x4f, 0xca, 0x4b, 0x5e,
	0x01, 0xbc, 0x64, 0x82, 0xb2, 0x9f, 0x6e, 0x58, 0x2a, 0xf0, 0x09, 0x68, 0x9e, 0xdf, 0x45, 0x3d,
	0xd4, 0xef, 0x0c, 0x0c, 0xbb, 0xac, 0x7d, 0x31, 0xa2, 0x9a, 0xe7, 0xe3, 0x4f, 0xc0, 0x58, 0xb0,
	0xcc, 0x61, 0xb1, 0xc7, 0xe7, 0x6c, 0xde, 0xd5, 0x7a, 0xa8, 0xdf, 0xa6, 0xb0, 0x60, 0xd9, 0x50,
	0x79, 0xc8, 0xa7, 0x60, 0xe4, 0x58, 0xe9, 0x8a, 0xc7, 0x29, 0xc3, 0xc7, 0xd0, 0x58, 0xbb, 0xd1,
	0x0d, 0xcb, 0xf1, 0xda, 0x54, 0x19, 0xe4, 0x57, 0x04, 0xc6, 0xb7, 0x6b, 0xcf, 0x2b, 0x4b, 0x7e,
	0x0e, 0xda, 0x2c, 0x2b, 0x4a, 0x7e, 0xb4, 0x29, 0x59, 0xc9, 0xb0, 0xcf, 0x33, 0xaa, 0xcd, 0x32,
	0x6c, 0x42, 0x7d, 0xc1, 0xb2, 0xbc, 0xec, 0x21, 0x95, 0x47, 0xfc, 0x31, 0xb4, 0x52, 0xe1, 0x26,
	0xc2, 0x11, 0x69, 0xb7, 0xde, 0x43, 0x7d, 0x9d, 0x36, 0x73, 0x7b, 0x9a, 0x92, 0x3e, 0x68, 0xe7,
	0x19, 0x36, 0xa0, 0x39, 0xfe, 0xee, 0xcd, 0xd9, 0xf5, 0xf8, 0xd2, 0xac, 0xe1, 0x26, 0xd4, 0xaf,
	0x86, 0x3f, 0x9a, 0x08, 0xb7, 0xa1, 0x35, 0x99, 0x9e, 0xd1, 0xa9, 0x33, 0x9d, 0x98, 0x1a, 0xf9,
	0x05, 0x41, 0x5b, 0x55, 0x2b, 0x68, 0x3f, 0x87, 0x26, 0x8b, 0x45, 0x12, 0xb2, 0xb4, 0x8b, 0x7a,
	0xf5, 0xbe, 0x31, 0x38, 0xd9, 0x63, 0xa5, 0xf2, 0xec, 0x61, 0x2c, 0x92, 0x8c, 0x96, 0xb9, 0xd6,
	0xd7, 0xd0, 0xc8, 0x3d, 0x25, 0x4f, 0xb4, 0xe5, 0xf9, 0x19, 0xe8, 0x61, 0xec, 0xf3, 0x9c, 0xba,
	0x31, 0x78, 0x60, 0x97, 0x1f, 0x4b, 0xc2, 0x8d, 0x63, 0x9f, 0xd3, 0x3c, 0x4c, 0x5e, 0x41, 0x87,
	0xba, 0xbe, 0xb8, 0xe6, 0xc1, 0xf6, 0x73, 0x1c, 0x26, 0x2c, 0x08, 0x79, 0xec, 0x84, 0xf3, 0x1c,
	0x50, 0xa7, 0x2d, 0xe5, 0x18, 0xcf, 0x65, 0x30, 0xe2, 0x81, 0x13, 0xc6, 0x73, 0xf6, 0x73, 0x0e,
	0xad, 0xd3, 0x56, 0xc4, 0x83, 0xb1, 0xb4, 0xc9, 0x0b, 0xf8, 0x60, 0x83, 0x55, 0xf4, 0xf5, 0x18,
	0x1a, 0x92, 0xab, 0x62, 0x66, 0x0c, 0x3a, 0x76, 0x39, 0x42, 0xaa, 0x11, 0x15, 0x24, 0x4f, 0xe1,
	0x01, 0x55, 0x15, 0x24, 0xb1, 0x7b, 0xf0, 0x20, 0x7f, 0x22, 0xc0, 0xd5, 0x2b, 0x45, 0xb9, 0x97,
	0x60, 0xe6, 0x53, 0x18, 0x71, 0xcf, 0x8d, 0x9c, 0x54, 0xb8, 0x82, 0x15, 0x95, 0x1f, 0xd9, 0xbb,
	0xe3, 0xa9, 0x88, 0x7a, 0x6e, 0x34, 0x91, 0x49, 0xb4, 0x93, 0xec, 0xd8, 0x1b, 0x20, 0x77, 0xb5,
	0x8a, 0xb2, 0x02, 0x48, 0x7b, 0x2f, 0xd0, 0x99, 0xcc, 0xaa, 0x00, 0x6d, 0x6d, 0x32, 0x06, 0x63,
	0x12, 0xbe, 0x65, 0xf7, 0x7a, 0xdc, 0x47, 0x50, 0xf7, 0xfc, 0xb4, 0xab, 0xf5, 0xea, 0xfb, 0x4a,
	0x90, 0x7e, 0x42, 0xa0, 0xad, 0xa0, 0x8a, 0x66, 0x31, 0xe8, 0x69, 0xf8, 0x96, 0x15, 0x30, 0xf9,
	0x99, 0xfc, 0xa1, 0x81, 0x31, 0xf1, 0xdc, 0xb8, 0xac, 0xd7, 0x07, 0xd3, 0x4f, 0xf8, 0xd2, 0xa9,
	0x6a, 0x48, 0x29, 0xa3, 0x23, 0xfd, 0x57, 0x1b, 0x1d, 0xe1, 0xc7, 0xd0, 0x11, 0xdc, 0x79, 0x57,
	0x6b, 0x6d, 0xc1, 0x2b, 0x59, 0xcf, 0xe0, 0xc0, 0x0f, 0x23, 0xc1, 0x92, 0x7c, 0xf6, 0xab, 0x63,
	0x5a, 0xa9, 0x6a, 0x8f, 0xf2, 0x14, 0x5a, 0xa4, 0x5a, 0xbf, 0x21, 0x38, 0x50, 0x2e, 0x29, 0xcf,
	0x28, 0x5c, 0x86, 0xa2, 0x20, 0xad, 0x8c, 0x1d, 0x4d, 0x69, 0x3b, 0x9a, 0x92, 0x0f, 0xe6, 0xf1,
	0xe5, 0x32, 0xac, 0xe8, 0xad, 0xa5, 0x1c, 0xd3, 0x54, 0xde, 0x93, 0x84, 0x79, 0x1c, 0x65, 0x5d,
	0xbd, 0x87, 0xfa, 0x2d, 0xda, 0x5c, 0xb0, 0xec, 0x75, 0x1c, 0x65, 0xe5, 0x5b, 0x36, 0xde, 0xf3,
	0x96, 0x6f, 0xa0, 0xad, 0x08, 0x17, 0x6f, 0xb9, 0xb7, 0x66, 0xd0, 0xfe, 0x9a, 0xb9, 0xa7, 0x9c,
	0x9e, 0x7c, 0x09, 0xda, 0xc5, 0x68, 0x77, 0x05, 0x18, 0xd0, 0xbc, 0x1c, 0x8e, 0xce, 0xbe, 0xbf,
	0x9e, 0x9a, 0x08, 0x1f, 0x42, 0xe3, 0x07, 0x3a, 0x9e, 0x0e, 0x4d, 0x0d, 0xb7, 0x40, 0xbf, 0x7e,
	0x7d, 0x71, 0x65, 0xd6, 0xe5, 0x89, 0x9e, 0x8d, 0xa6, 0xa6, 0x3e, 0xf8, 0x4f, 0x83, 0xc6, 0xa5,
	0xa4, 0x8a, 0x07, 0x50, 0x0f, 0x98, 0xc0, 0x0f, 0x37, 0xcc, 0xb7, 0x0b, 0xd3, 0x3a, 0xde, 0x75,
	0xaa, 0x16, 0x48, 0x0d, 0x3f, 0x07, 0x7d, 0xb9, 0xf6, 0x3c, 0x7c, 0x7c, 0xd7, 0x46, 0xb3, 0x3e,
	0xbc, 0x73, 0xa3, 0x90, 0x1a, 0xfe, 0x0a, 0x5a, 0x85, 0x68, 0x02, 0xbc, 0x5d, 0x86, 0xbb, 0x5b,
	0xc1, 0xea, 0xbe, 0x1b, 0xd8, 0x00, 0x7c, 0x03, 0x46, 0x39, 0xd4, 0xb1, 0xcf, 0xb1, 0xb5, 0x4d,
	0xdd, 0x17, 0xb5, 0x75, 0x72, 0x67, 0xac, 0xda, 0x81, 0x1c, 0xe3, 0x4a, 0x07, 0x15, 0xf1, 0x54,
	0x3a, 0xa8, 0xea, 0x80, 0xd4, 0xf0, 0x0b, 0xd0, 0x53, 0xcf, 0x8d, 0xab, 0xd7, 0xb6, 0xd3, 0x58,
	0xbd, 0x56, 0xf9, 0xe4, 0xa4, 0xf6, 0x14, 0x9d, 0x3f, 0xf9, 0xeb, 0xf6, 0x14, 0xfd, 0x7d, 0x7b,
	0x8a, 0xfe, 0xb9, 0x3d, 0x45, 0xbf, 0xff, 0x7b, 0x5a, 0x83, 0xae, 0xc7, 0x97, 0xf6, 0x2a, 0x8c,
	0x03, 0xcf, 0x5d, 0xd9, 0x22, 0x5c, 0xac, 0xed, 0xc5, 0x3a, 0xff, 0xd3, 0x9a, 0x1d, 0xe4, 0x3f,
	0xcf, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x68, 0x91, 0x4b, 0xd9, 0x1e, 0x07, 0x00, 0x00,
}
