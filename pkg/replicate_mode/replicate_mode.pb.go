// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: replicate_mode.proto

package replicate_mode

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReplicateStatus_Mode int32

const (
	ReplicateStatus_MAJORITY    ReplicateStatus_Mode = 0
	ReplicateStatus_DR_AUTOSYNC ReplicateStatus_Mode = 1
)

var ReplicateStatus_Mode_name = map[int32]string{
	0: "MAJORITY",
	1: "DR_AUTOSYNC",
}
var ReplicateStatus_Mode_value = map[string]int32{
	"MAJORITY":    0,
	"DR_AUTOSYNC": 1,
}

func (x ReplicateStatus_Mode) String() string {
	return proto.EnumName(ReplicateStatus_Mode_name, int32(x))
}
func (ReplicateStatus_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_replicate_mode_bb139e0745d19c01, []int{0, 0}
}

type DRAutoSync_State int32

const (
	DRAutoSync_SYNC         DRAutoSync_State = 0
	DRAutoSync_ASYNC        DRAutoSync_State = 1
	DRAutoSync_SYNC_RECOVER DRAutoSync_State = 2
)

var DRAutoSync_State_name = map[int32]string{
	0: "SYNC",
	1: "ASYNC",
	2: "SYNC_RECOVER",
}
var DRAutoSync_State_value = map[string]int32{
	"SYNC":         0,
	"ASYNC":        1,
	"SYNC_RECOVER": 2,
}

func (x DRAutoSync_State) String() string {
	return proto.EnumName(DRAutoSync_State_name, int32(x))
}
func (DRAutoSync_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_replicate_mode_bb139e0745d19c01, []int{1, 0}
}

type RegionReplicateStatus_State int32

const (
	RegionReplicateStatus_UNKNOWN              RegionReplicateStatus_State = 0
	RegionReplicateStatus_MAJORITY             RegionReplicateStatus_State = 1
	RegionReplicateStatus_INTEGRITY_OVER_LABEL RegionReplicateStatus_State = 2
)

var RegionReplicateStatus_State_name = map[int32]string{
	0: "UNKNOWN",
	1: "MAJORITY",
	2: "INTEGRITY_OVER_LABEL",
}
var RegionReplicateStatus_State_value = map[string]int32{
	"UNKNOWN":              0,
	"MAJORITY":             1,
	"INTEGRITY_OVER_LABEL": 2,
}

func (x RegionReplicateStatus_State) String() string {
	return proto.EnumName(RegionReplicateStatus_State_name, int32(x))
}
func (RegionReplicateStatus_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_replicate_mode_bb139e0745d19c01, []int{2, 0}
}

// The replicate status sync from PD to TiKV.
type ReplicateStatus struct {
	Mode                 ReplicateStatus_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=replicate_mode.ReplicateStatus_Mode" json:"mode,omitempty"`
	DrAutosync           *DRAutoSync          `protobuf:"bytes,2,opt,name=dr_autosync,json=drAutosync" json:"dr_autosync,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ReplicateStatus) Reset()         { *m = ReplicateStatus{} }
func (m *ReplicateStatus) String() string { return proto.CompactTextString(m) }
func (*ReplicateStatus) ProtoMessage()    {}
func (*ReplicateStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_replicate_mode_bb139e0745d19c01, []int{0}
}
func (m *ReplicateStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicateStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicateStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ReplicateStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicateStatus.Merge(dst, src)
}
func (m *ReplicateStatus) XXX_Size() int {
	return m.Size()
}
func (m *ReplicateStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicateStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicateStatus proto.InternalMessageInfo

func (m *ReplicateStatus) GetMode() ReplicateStatus_Mode {
	if m != nil {
		return m.Mode
	}
	return ReplicateStatus_MAJORITY
}

func (m *ReplicateStatus) GetDrAutosync() *DRAutoSync {
	if m != nil {
		return m.DrAutosync
	}
	return nil
}

// The status of dr-autosync mode.
type DRAutoSync struct {
	LabelKey             string           `protobuf:"bytes,1,opt,name=label_key,json=labelKey,proto3" json:"label_key,omitempty"`
	State                DRAutoSync_State `protobuf:"varint,2,opt,name=state,proto3,enum=replicate_mode.DRAutoSync_State" json:"state,omitempty"`
	RecoverId            uint64           `protobuf:"varint,3,opt,name=recover_id,json=recoverId,proto3" json:"recover_id,omitempty"`
	WaitSyncTimeoutHint  int32            `protobuf:"varint,4,opt,name=wait_sync_timeout_hint,json=waitSyncTimeoutHint,proto3" json:"wait_sync_timeout_hint,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DRAutoSync) Reset()         { *m = DRAutoSync{} }
func (m *DRAutoSync) String() string { return proto.CompactTextString(m) }
func (*DRAutoSync) ProtoMessage()    {}
func (*DRAutoSync) Descriptor() ([]byte, []int) {
	return fileDescriptor_replicate_mode_bb139e0745d19c01, []int{1}
}
func (m *DRAutoSync) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DRAutoSync) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DRAutoSync.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DRAutoSync) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DRAutoSync.Merge(dst, src)
}
func (m *DRAutoSync) XXX_Size() int {
	return m.Size()
}
func (m *DRAutoSync) XXX_DiscardUnknown() {
	xxx_messageInfo_DRAutoSync.DiscardUnknown(m)
}

var xxx_messageInfo_DRAutoSync proto.InternalMessageInfo

func (m *DRAutoSync) GetLabelKey() string {
	if m != nil {
		return m.LabelKey
	}
	return ""
}

func (m *DRAutoSync) GetState() DRAutoSync_State {
	if m != nil {
		return m.State
	}
	return DRAutoSync_SYNC
}

func (m *DRAutoSync) GetRecoverId() uint64 {
	if m != nil {
		return m.RecoverId
	}
	return 0
}

func (m *DRAutoSync) GetWaitSyncTimeoutHint() int32 {
	if m != nil {
		return m.WaitSyncTimeoutHint
	}
	return 0
}

// The replicate status sync from TiKV to PD.
type RegionReplicateStatus struct {
	State                RegionReplicateStatus_State `protobuf:"varint,1,opt,name=state,proto3,enum=replicate_mode.RegionReplicateStatus_State" json:"state,omitempty"`
	RecoverId            uint64                      `protobuf:"varint,2,opt,name=recover_id,json=recoverId,proto3" json:"recover_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *RegionReplicateStatus) Reset()         { *m = RegionReplicateStatus{} }
func (m *RegionReplicateStatus) String() string { return proto.CompactTextString(m) }
func (*RegionReplicateStatus) ProtoMessage()    {}
func (*RegionReplicateStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_replicate_mode_bb139e0745d19c01, []int{2}
}
func (m *RegionReplicateStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionReplicateStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionReplicateStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RegionReplicateStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionReplicateStatus.Merge(dst, src)
}
func (m *RegionReplicateStatus) XXX_Size() int {
	return m.Size()
}
func (m *RegionReplicateStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionReplicateStatus.DiscardUnknown(m)
}

var xxx_messageInfo_RegionReplicateStatus proto.InternalMessageInfo

func (m *RegionReplicateStatus) GetState() RegionReplicateStatus_State {
	if m != nil {
		return m.State
	}
	return RegionReplicateStatus_UNKNOWN
}

func (m *RegionReplicateStatus) GetRecoverId() uint64 {
	if m != nil {
		return m.RecoverId
	}
	return 0
}

func init() {
	proto.RegisterType((*ReplicateStatus)(nil), "replicate_mode.ReplicateStatus")
	proto.RegisterType((*DRAutoSync)(nil), "replicate_mode.DRAutoSync")
	proto.RegisterType((*RegionReplicateStatus)(nil), "replicate_mode.RegionReplicateStatus")
	proto.RegisterEnum("replicate_mode.ReplicateStatus_Mode", ReplicateStatus_Mode_name, ReplicateStatus_Mode_value)
	proto.RegisterEnum("replicate_mode.DRAutoSync_State", DRAutoSync_State_name, DRAutoSync_State_value)
	proto.RegisterEnum("replicate_mode.RegionReplicateStatus_State", RegionReplicateStatus_State_name, RegionReplicateStatus_State_value)
}
func (m *ReplicateStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicateStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintReplicateMode(dAtA, i, uint64(m.Mode))
	}
	if m.DrAutosync != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintReplicateMode(dAtA, i, uint64(m.DrAutosync.Size()))
		n1, err := m.DrAutosync.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DRAutoSync) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DRAutoSync) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LabelKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReplicateMode(dAtA, i, uint64(len(m.LabelKey)))
		i += copy(dAtA[i:], m.LabelKey)
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintReplicateMode(dAtA, i, uint64(m.State))
	}
	if m.RecoverId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintReplicateMode(dAtA, i, uint64(m.RecoverId))
	}
	if m.WaitSyncTimeoutHint != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintReplicateMode(dAtA, i, uint64(m.WaitSyncTimeoutHint))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RegionReplicateStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionReplicateStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintReplicateMode(dAtA, i, uint64(m.State))
	}
	if m.RecoverId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintReplicateMode(dAtA, i, uint64(m.RecoverId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintReplicateMode(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReplicateStatus) Size() (n int) {
	var l int
	_ = l
	if m.Mode != 0 {
		n += 1 + sovReplicateMode(uint64(m.Mode))
	}
	if m.DrAutosync != nil {
		l = m.DrAutosync.Size()
		n += 1 + l + sovReplicateMode(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DRAutoSync) Size() (n int) {
	var l int
	_ = l
	l = len(m.LabelKey)
	if l > 0 {
		n += 1 + l + sovReplicateMode(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovReplicateMode(uint64(m.State))
	}
	if m.RecoverId != 0 {
		n += 1 + sovReplicateMode(uint64(m.RecoverId))
	}
	if m.WaitSyncTimeoutHint != 0 {
		n += 1 + sovReplicateMode(uint64(m.WaitSyncTimeoutHint))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegionReplicateStatus) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovReplicateMode(uint64(m.State))
	}
	if m.RecoverId != 0 {
		n += 1 + sovReplicateMode(uint64(m.RecoverId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovReplicateMode(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozReplicateMode(x uint64) (n int) {
	return sovReplicateMode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReplicateStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicateMode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicateStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicateStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicateMode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (ReplicateStatus_Mode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrAutosync", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicateMode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReplicateMode
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DrAutosync == nil {
				m.DrAutosync = &DRAutoSync{}
			}
			if err := m.DrAutosync.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplicateMode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplicateMode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DRAutoSync) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicateMode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DRAutoSync: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DRAutoSync: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicateMode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplicateMode
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicateMode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (DRAutoSync_State(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoverId", wireType)
			}
			m.RecoverId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicateMode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecoverId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitSyncTimeoutHint", wireType)
			}
			m.WaitSyncTimeoutHint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicateMode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WaitSyncTimeoutHint |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReplicateMode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplicateMode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionReplicateStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplicateMode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionReplicateStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionReplicateStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicateMode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (RegionReplicateStatus_State(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoverId", wireType)
			}
			m.RecoverId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplicateMode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecoverId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReplicateMode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReplicateMode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReplicateMode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReplicateMode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReplicateMode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReplicateMode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthReplicateMode
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowReplicateMode
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipReplicateMode(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthReplicateMode = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReplicateMode   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("replicate_mode.proto", fileDescriptor_replicate_mode_bb139e0745d19c01)
}

var fileDescriptor_replicate_mode_bb139e0745d19c01 = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xdd, 0x8a, 0xd3, 0x40,
	0x18, 0xcd, 0xc4, 0x44, 0x9b, 0x2f, 0x4b, 0x37, 0x8c, 0xab, 0x04, 0xc5, 0x10, 0x82, 0x42, 0x40,
	0xc8, 0x45, 0x17, 0x44, 0xd0, 0x9b, 0xec, 0x6e, 0xd0, 0xba, 0xbb, 0x09, 0x4c, 0xb3, 0xca, 0x5e,
	0x0d, 0x69, 0x32, 0x68, 0xb0, 0xcd, 0x94, 0x74, 0xa2, 0xe4, 0x4d, 0x7c, 0x0b, 0x2f, 0x7d, 0x05,
	0x2f, 0x7d, 0x04, 0xa9, 0xf8, 0x1e, 0x32, 0x49, 0x8b, 0x34, 0xfe, 0xdc, 0xcd, 0x9c, 0xef, 0x7c,
	0x67, 0xce, 0xe1, 0x0c, 0x1c, 0xd5, 0x6c, 0xb5, 0x28, 0xf3, 0x4c, 0x30, 0xba, 0xe4, 0x05, 0x0b,
	0x56, 0x35, 0x17, 0x1c, 0x8f, 0xf7, 0x51, 0xef, 0x33, 0x82, 0x43, 0xb2, 0x83, 0x66, 0x22, 0x13,
	0xcd, 0x1a, 0x3f, 0x05, 0x4d, 0xce, 0x6c, 0xe4, 0x22, 0x7f, 0x3c, 0x79, 0x18, 0x0c, 0x84, 0x06,
	0xf4, 0xe0, 0x92, 0x17, 0x8c, 0x74, 0x1b, 0xf8, 0x19, 0x98, 0x45, 0x4d, 0xb3, 0x46, 0xf0, 0x75,
	0x5b, 0xe5, 0xb6, 0xea, 0x22, 0xdf, 0x9c, 0xdc, 0x1b, 0x0a, 0x9c, 0x91, 0xb0, 0x11, 0x7c, 0xd6,
	0x56, 0x39, 0x81, 0xa2, 0x0e, 0xb7, 0x6c, 0xef, 0x11, 0x68, 0x52, 0x0a, 0x1f, 0xc0, 0xe8, 0x32,
	0x7c, 0x95, 0x90, 0x69, 0x7a, 0x6d, 0x29, 0xf8, 0x10, 0xcc, 0x33, 0x42, 0xc3, 0xab, 0x34, 0x99,
	0x5d, 0xc7, 0xa7, 0x16, 0xf2, 0x7e, 0x22, 0x80, 0xdf, 0x0a, 0xf8, 0x3e, 0x18, 0x8b, 0x6c, 0xce,
	0x16, 0xf4, 0x3d, 0x6b, 0x3b, 0xc7, 0x06, 0x19, 0x75, 0xc0, 0x39, 0x6b, 0xf1, 0x13, 0xd0, 0xd7,
	0x22, 0x13, 0xac, 0x73, 0x32, 0x9e, 0xb8, 0xff, 0x76, 0x12, 0xc8, 0x30, 0x8c, 0xf4, 0x74, 0xfc,
	0x00, 0xa0, 0x66, 0x39, 0xff, 0xc0, 0x6a, 0x5a, 0x16, 0xf6, 0x0d, 0x17, 0xf9, 0x1a, 0x31, 0xb6,
	0xc8, 0xb4, 0xc0, 0xc7, 0x70, 0xf7, 0x63, 0x56, 0x0a, 0x2a, 0x6d, 0x53, 0x51, 0x2e, 0x19, 0x6f,
	0x04, 0x7d, 0x57, 0x56, 0xc2, 0xd6, 0x5c, 0xe4, 0xeb, 0xe4, 0xb6, 0x9c, 0x4a, 0xd5, 0xb4, 0x9f,
	0xbd, 0x2c, 0x2b, 0xe1, 0x05, 0xa0, 0x77, 0x6f, 0xe0, 0x11, 0x68, 0x5d, 0x14, 0x05, 0x1b, 0xa0,
	0x87, 0x7d, 0x2a, 0x6c, 0xc1, 0x81, 0x3c, 0x51, 0x12, 0x9d, 0x26, 0xaf, 0x23, 0x62, 0xa9, 0xde,
	0x17, 0x04, 0x77, 0x08, 0x7b, 0x5b, 0xf2, 0x6a, 0xd8, 0x4f, 0xb8, 0x4b, 0xd5, 0x17, 0xf4, 0xf8,
	0xcf, 0x82, 0xfe, 0xb2, 0xf5, 0xbf, 0x80, 0xea, 0x20, 0xa0, 0xf7, 0x7c, 0xe7, 0xd5, 0x84, 0x5b,
	0x57, 0xf1, 0x79, 0x9c, 0xbc, 0x89, 0x2d, 0x65, 0xaf, 0x18, 0x84, 0x6d, 0x38, 0x9a, 0xc6, 0x69,
	0xf4, 0x42, 0x5e, 0xa9, 0xf4, 0x4c, 0x2f, 0xc2, 0x93, 0xe8, 0xc2, 0x52, 0x4f, 0xac, 0xaf, 0x1b,
	0x07, 0x7d, 0xdb, 0x38, 0xe8, 0xfb, 0xc6, 0x41, 0x9f, 0x7e, 0x38, 0xca, 0xfc, 0x66, 0xf7, 0xf9,
	0x8e, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x80, 0xe5, 0x5d, 0x27, 0x94, 0x02, 0x00, 0x00,
}
