// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerpb.proto

package routerpb

import (
	"context"
	"fmt"
	"math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/pingcap/kvproto/pkg/metapb"
	pdpb "github.com/pingcap/kvproto/pkg/pdpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("routerpb.proto", fileDescriptor_3a7843d531c130ba) }

var fileDescriptor_3a7843d531c130ba = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0x4a, 0xeb, 0x40,
	0x14, 0x86, 0x33, 0x5c, 0x28, 0xbd, 0x63, 0xd5, 0x32, 0x68, 0xb5, 0x01, 0x67, 0xe1, 0xca, 0x55,
	0x94, 0xba, 0x14, 0x04, 0x83, 0x18, 0xdd, 0x69, 0xf2, 0x04, 0x69, 0x3d, 0xc4, 0xd2, 0x9a, 0x89,
	0x33, 0x27, 0x81, 0xbe, 0x85, 0x4b, 0x1f, 0xc1, 0x47, 0x71, 0xd9, 0x65, 0x97, 0x92, 0x3c, 0x85,
	0x3b, 0xe9, 0xa4, 0x33, 0x48, 0xac, 0x20, 0xae, 0x72, 0xe6, 0xfb, 0xff, 0xf9, 0x38, 0x81, 0xa1,
	0x5b, 0x52, 0xe4, 0x08, 0x32, 0x1b, 0x7a, 0x99, 0x14, 0x28, 0x58, 0xdb, 0x9c, 0xdd, 0xce, 0x23,
	0x60, 0x6c, 0xb8, 0x4b, 0xb3, 0x7b, 0x3b, 0xef, 0x24, 0x22, 0x11, 0x7a, 0x3c, 0x5e, 0x4e, 0x2b,
	0xba, 0x2d, 0x73, 0x85, 0x7a, 0xac, 0xc1, 0xe0, 0xe3, 0x1f, 0x6d, 0x85, 0xda, 0xc6, 0xce, 0xe9,
	0xff, 0x00, 0x30, 0x84, 0x64, 0x2c, 0x52, 0xd6, 0xf3, 0xb4, 0xcb, 0x82, 0x10, 0x9e, 0x72, 0x50,
	0xe8, 0xee, 0x7d, 0xe3, 0x2a, 0x13, 0xa9, 0x82, 0x43, 0x87, 0xf9, 0x74, 0x33, 0x00, 0xbc, 0x95,
	0x50, 0xfc, 0xdd, 0x71, 0xa5, 0x1d, 0x35, 0xf6, 0x67, 0x37, 0x97, 0xcc, 0x6d, 0x74, 0x97, 0xf0,
	0x17, 0x9e, 0x6b, 0xba, 0x71, 0x97, 0x83, 0x9c, 0xad, 0x36, 0xd9, 0xaf, 0x9b, 0x5f, 0x90, 0x71,
	0xf4, 0xd7, 0x24, 0xc6, 0x72, 0x44, 0x4e, 0x08, 0x8b, 0x68, 0xd7, 0x8f, 0x71, 0xf4, 0x10, 0x8d,
	0xe2, 0xb4, 0x2e, 0x28, 0x76, 0x50, 0x5f, 0x6a, 0x72, 0xe3, 0xe4, 0x3f, 0xc5, 0x76, 0xbd, 0x33,
	0xda, 0x0e, 0x00, 0x23, 0x14, 0x12, 0xd8, 0xae, 0xfd, 0x0b, 0x7d, 0x36, 0x92, 0x5e, 0x13, 0xdb,
	0xcb, 0x01, 0xed, 0x04, 0x80, 0x17, 0xd3, 0xa9, 0x0e, 0x14, 0xeb, 0xdb, 0xa6, 0x65, 0x46, 0xe2,
	0xae, 0x8b, 0x8c, 0xc8, 0x1f, 0x2c, 0x5e, 0xdb, 0xe4, 0xad, 0xe4, 0x64, 0x5e, 0x72, 0xf2, 0x5e,
	0x72, 0xf2, 0x5c, 0x71, 0xe7, 0xa5, 0xe2, 0xce, 0xbc, 0xe2, 0xce, 0xa2, 0xe2, 0x0e, 0xed, 0x0a,
	0x99, 0x78, 0x38, 0x9e, 0x14, 0xde, 0xa4, 0xd0, 0xef, 0x65, 0xd8, 0xd2, 0x9f, 0xd3, 0xcf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x62, 0xe8, 0x35, 0x79, 0x93, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RouterClient is the client API for Router service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouterClient interface {
	GetRegion(ctx context.Context, in *pdpb.GetRegionRequest, opts ...grpc.CallOption) (*pdpb.GetRegionResponse, error)
	GetPrevRegion(ctx context.Context, in *pdpb.GetRegionRequest, opts ...grpc.CallOption) (*pdpb.GetRegionResponse, error)
	GetRegionByID(ctx context.Context, in *pdpb.GetRegionByIDRequest, opts ...grpc.CallOption) (*pdpb.GetRegionResponse, error)
	QueryRegion(ctx context.Context, opts ...grpc.CallOption) (Router_QueryRegionClient, error)
	BatchScanRegions(ctx context.Context, in *pdpb.BatchScanRegionsRequest, opts ...grpc.CallOption) (*pdpb.BatchScanRegionsResponse, error)
	GetStore(ctx context.Context, in *pdpb.GetStoreRequest, opts ...grpc.CallOption) (*pdpb.GetStoreResponse, error)
	GetAllStores(ctx context.Context, in *pdpb.GetAllStoresRequest, opts ...grpc.CallOption) (*pdpb.GetAllStoresResponse, error)
}

type routerClient struct {
	cc *grpc.ClientConn
}

func NewRouterClient(cc *grpc.ClientConn) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) GetRegion(ctx context.Context, in *pdpb.GetRegionRequest, opts ...grpc.CallOption) (*pdpb.GetRegionResponse, error) {
	out := new(pdpb.GetRegionResponse)
	err := c.cc.Invoke(ctx, "/routerpb.Router/GetRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) GetPrevRegion(ctx context.Context, in *pdpb.GetRegionRequest, opts ...grpc.CallOption) (*pdpb.GetRegionResponse, error) {
	out := new(pdpb.GetRegionResponse)
	err := c.cc.Invoke(ctx, "/routerpb.Router/GetPrevRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) GetRegionByID(ctx context.Context, in *pdpb.GetRegionByIDRequest, opts ...grpc.CallOption) (*pdpb.GetRegionResponse, error) {
	out := new(pdpb.GetRegionResponse)
	err := c.cc.Invoke(ctx, "/routerpb.Router/GetRegionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) QueryRegion(ctx context.Context, opts ...grpc.CallOption) (Router_QueryRegionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Router_serviceDesc.Streams[0], "/routerpb.Router/QueryRegion", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerQueryRegionClient{stream}
	return x, nil
}

type Router_QueryRegionClient interface {
	Send(*pdpb.QueryRegionRequest) error
	Recv() (*pdpb.QueryRegionResponse, error)
	grpc.ClientStream
}

type routerQueryRegionClient struct {
	grpc.ClientStream
}

func (x *routerQueryRegionClient) Send(m *pdpb.QueryRegionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routerQueryRegionClient) Recv() (*pdpb.QueryRegionResponse, error) {
	m := new(pdpb.QueryRegionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routerClient) BatchScanRegions(ctx context.Context, in *pdpb.BatchScanRegionsRequest, opts ...grpc.CallOption) (*pdpb.BatchScanRegionsResponse, error) {
	out := new(pdpb.BatchScanRegionsResponse)
	err := c.cc.Invoke(ctx, "/routerpb.Router/BatchScanRegions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) GetStore(ctx context.Context, in *pdpb.GetStoreRequest, opts ...grpc.CallOption) (*pdpb.GetStoreResponse, error) {
	out := new(pdpb.GetStoreResponse)
	err := c.cc.Invoke(ctx, "/routerpb.Router/GetStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) GetAllStores(ctx context.Context, in *pdpb.GetAllStoresRequest, opts ...grpc.CallOption) (*pdpb.GetAllStoresResponse, error) {
	out := new(pdpb.GetAllStoresResponse)
	err := c.cc.Invoke(ctx, "/routerpb.Router/GetAllStores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouterServer is the server API for Router service.
type RouterServer interface {
	GetRegion(context.Context, *pdpb.GetRegionRequest) (*pdpb.GetRegionResponse, error)
	GetPrevRegion(context.Context, *pdpb.GetRegionRequest) (*pdpb.GetRegionResponse, error)
	GetRegionByID(context.Context, *pdpb.GetRegionByIDRequest) (*pdpb.GetRegionResponse, error)
	QueryRegion(Router_QueryRegionServer) error
	BatchScanRegions(context.Context, *pdpb.BatchScanRegionsRequest) (*pdpb.BatchScanRegionsResponse, error)
	GetStore(context.Context, *pdpb.GetStoreRequest) (*pdpb.GetStoreResponse, error)
	GetAllStores(context.Context, *pdpb.GetAllStoresRequest) (*pdpb.GetAllStoresResponse, error)
}

// UnimplementedRouterServer can be embedded to have forward compatible implementations.
type UnimplementedRouterServer struct {
}

func (*UnimplementedRouterServer) GetRegion(ctx context.Context, req *pdpb.GetRegionRequest) (*pdpb.GetRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegion not implemented")
}
func (*UnimplementedRouterServer) GetPrevRegion(ctx context.Context, req *pdpb.GetRegionRequest) (*pdpb.GetRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrevRegion not implemented")
}
func (*UnimplementedRouterServer) GetRegionByID(ctx context.Context, req *pdpb.GetRegionByIDRequest) (*pdpb.GetRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegionByID not implemented")
}
func (*UnimplementedRouterServer) QueryRegion(srv Router_QueryRegionServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryRegion not implemented")
}
func (*UnimplementedRouterServer) BatchScanRegions(ctx context.Context, req *pdpb.BatchScanRegionsRequest) (*pdpb.BatchScanRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchScanRegions not implemented")
}
func (*UnimplementedRouterServer) GetStore(ctx context.Context, req *pdpb.GetStoreRequest) (*pdpb.GetStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStore not implemented")
}
func (*UnimplementedRouterServer) GetAllStores(ctx context.Context, req *pdpb.GetAllStoresRequest) (*pdpb.GetAllStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStores not implemented")
}

func RegisterRouterServer(s *grpc.Server, srv RouterServer) {
	s.RegisterService(&_Router_serviceDesc, srv)
}

func _Router_GetRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pdpb.GetRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).GetRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerpb.Router/GetRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).GetRegion(ctx, req.(*pdpb.GetRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_GetPrevRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pdpb.GetRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).GetPrevRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerpb.Router/GetPrevRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).GetPrevRegion(ctx, req.(*pdpb.GetRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_GetRegionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pdpb.GetRegionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).GetRegionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerpb.Router/GetRegionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).GetRegionByID(ctx, req.(*pdpb.GetRegionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_QueryRegion_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouterServer).QueryRegion(&routerQueryRegionServer{stream})
}

type Router_QueryRegionServer interface {
	Send(*pdpb.QueryRegionResponse) error
	Recv() (*pdpb.QueryRegionRequest, error)
	grpc.ServerStream
}

type routerQueryRegionServer struct {
	grpc.ServerStream
}

func (x *routerQueryRegionServer) Send(m *pdpb.QueryRegionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routerQueryRegionServer) Recv() (*pdpb.QueryRegionRequest, error) {
	m := new(pdpb.QueryRegionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Router_BatchScanRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pdpb.BatchScanRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).BatchScanRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerpb.Router/BatchScanRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).BatchScanRegions(ctx, req.(*pdpb.BatchScanRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_GetStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pdpb.GetStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).GetStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerpb.Router/GetStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).GetStore(ctx, req.(*pdpb.GetStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_GetAllStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pdpb.GetAllStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).GetAllStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerpb.Router/GetAllStores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).GetAllStores(ctx, req.(*pdpb.GetAllStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Router_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routerpb.Router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRegion",
			Handler:    _Router_GetRegion_Handler,
		},
		{
			MethodName: "GetPrevRegion",
			Handler:    _Router_GetPrevRegion_Handler,
		},
		{
			MethodName: "GetRegionByID",
			Handler:    _Router_GetRegionByID_Handler,
		},
		{
			MethodName: "BatchScanRegions",
			Handler:    _Router_BatchScanRegions_Handler,
		},
		{
			MethodName: "GetStore",
			Handler:    _Router_GetStore_Handler,
		},
		{
			MethodName: "GetAllStores",
			Handler:    _Router_GetAllStores_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryRegion",
			Handler:       _Router_QueryRegion_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "routerpb.proto",
}
