// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cdcpb.proto

package cdcpb

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"

	_ "github.com/gogo/protobuf/gogoproto"

	errorpb "github.com/pingcap/kvproto/pkg/errorpb"

	kvrpcpb "github.com/pingcap/kvproto/pkg/kvrpcpb"

	metapb "github.com/pingcap/kvproto/pkg/metapb"

	raft_cmdpb "github.com/pingcap/kvproto/pkg/raft_cmdpb"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event_LogType int32

const (
	Event_UNKNOWN     Event_LogType = 0
	Event_PREWRITE    Event_LogType = 1
	Event_COMMIT      Event_LogType = 2
	Event_ROLLBACK    Event_LogType = 3
	Event_COMMITTED   Event_LogType = 4
	Event_INITIALIZED Event_LogType = 5
)

var Event_LogType_name = map[int32]string{
	0: "UNKNOWN",
	1: "PREWRITE",
	2: "COMMIT",
	3: "ROLLBACK",
	4: "COMMITTED",
	5: "INITIALIZED",
}
var Event_LogType_value = map[string]int32{
	"UNKNOWN":     0,
	"PREWRITE":    1,
	"COMMIT":      2,
	"ROLLBACK":    3,
	"COMMITTED":   4,
	"INITIALIZED": 5,
}

func (x Event_LogType) String() string {
	return proto.EnumName(Event_LogType_name, int32(x))
}
func (Event_LogType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cdcpb_41a6287fdfe94a2f, []int{3, 0}
}

type Event_Row_OpType int32

const (
	Event_Row_UNKNOWN Event_Row_OpType = 0
	Event_Row_PUT     Event_Row_OpType = 1
	Event_Row_DELETE  Event_Row_OpType = 2
)

var Event_Row_OpType_name = map[int32]string{
	0: "UNKNOWN",
	1: "PUT",
	2: "DELETE",
}
var Event_Row_OpType_value = map[string]int32{
	"UNKNOWN": 0,
	"PUT":     1,
	"DELETE":  2,
}

func (x Event_Row_OpType) String() string {
	return proto.EnumName(Event_Row_OpType_name, int32(x))
}
func (Event_Row_OpType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cdcpb_41a6287fdfe94a2f, []int{3, 0, 0}
}

type Header struct {
	ClusterId            uint64   `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdcpb_41a6287fdfe94a2f, []int{0}
}
func (m *Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Header.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(dst, src)
}
func (m *Header) XXX_Size() int {
	return m.Size()
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

func (m *Header) GetClusterId() uint64 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

type Error struct {
	NotLeader            *errorpb.NotLeader      `protobuf:"bytes,1,opt,name=not_leader,json=notLeader" json:"not_leader,omitempty"`
	RegionNotFound       *errorpb.RegionNotFound `protobuf:"bytes,2,opt,name=region_not_found,json=regionNotFound" json:"region_not_found,omitempty"`
	EpochNotMatch        *errorpb.EpochNotMatch  `protobuf:"bytes,3,opt,name=epoch_not_match,json=epochNotMatch" json:"epoch_not_match,omitempty"`
	DuplicateRequest     *Error_DuplicateRequest `protobuf:"bytes,4,opt,name=duplicate_request,json=duplicateRequest" json:"duplicate_request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdcpb_41a6287fdfe94a2f, []int{1}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(dst, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetNotLeader() *errorpb.NotLeader {
	if m != nil {
		return m.NotLeader
	}
	return nil
}

func (m *Error) GetRegionNotFound() *errorpb.RegionNotFound {
	if m != nil {
		return m.RegionNotFound
	}
	return nil
}

func (m *Error) GetEpochNotMatch() *errorpb.EpochNotMatch {
	if m != nil {
		return m.EpochNotMatch
	}
	return nil
}

func (m *Error) GetDuplicateRequest() *Error_DuplicateRequest {
	if m != nil {
		return m.DuplicateRequest
	}
	return nil
}

type Error_DuplicateRequest struct {
	RegionId             uint64   `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error_DuplicateRequest) Reset()         { *m = Error_DuplicateRequest{} }
func (m *Error_DuplicateRequest) String() string { return proto.CompactTextString(m) }
func (*Error_DuplicateRequest) ProtoMessage()    {}
func (*Error_DuplicateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdcpb_41a6287fdfe94a2f, []int{1, 0}
}
func (m *Error_DuplicateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error_DuplicateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error_DuplicateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Error_DuplicateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error_DuplicateRequest.Merge(dst, src)
}
func (m *Error_DuplicateRequest) XXX_Size() int {
	return m.Size()
}
func (m *Error_DuplicateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Error_DuplicateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Error_DuplicateRequest proto.InternalMessageInfo

func (m *Error_DuplicateRequest) GetRegionId() uint64 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

type EventCheckLocks struct {
	Locks                []*kvrpcpb.LockInfo `protobuf:"bytes,1,rep,name=locks" json:"locks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *EventCheckLocks) Reset()         { *m = EventCheckLocks{} }
func (m *EventCheckLocks) String() string { return proto.CompactTextString(m) }
func (*EventCheckLocks) ProtoMessage()    {}
func (*EventCheckLocks) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdcpb_41a6287fdfe94a2f, []int{2}
}
func (m *EventCheckLocks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCheckLocks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCheckLocks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EventCheckLocks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCheckLocks.Merge(dst, src)
}
func (m *EventCheckLocks) XXX_Size() int {
	return m.Size()
}
func (m *EventCheckLocks) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCheckLocks.DiscardUnknown(m)
}

var xxx_messageInfo_EventCheckLocks proto.InternalMessageInfo

func (m *EventCheckLocks) GetLocks() []*kvrpcpb.LockInfo {
	if m != nil {
		return m.Locks
	}
	return nil
}

type Event struct {
	RegionId  uint64 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	Index     uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	RequestId uint64 `protobuf:"varint,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Types that are valid to be assigned to Event:
	//	*Event_Entries_
	//	*Event_Admin_
	//	*Event_Error
	//	*Event_ResolvedTs
	//	*Event_CheckLocks
	Event                isEvent_Event `protobuf_oneof:"event"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdcpb_41a6287fdfe94a2f, []int{3}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(dst, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

type isEvent_Event interface {
	isEvent_Event()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_Entries_ struct {
	Entries *Event_Entries `protobuf:"bytes,3,opt,name=entries,oneof"`
}
type Event_Admin_ struct {
	Admin *Event_Admin `protobuf:"bytes,4,opt,name=admin,oneof"`
}
type Event_Error struct {
	Error *Error `protobuf:"bytes,5,opt,name=error,oneof"`
}
type Event_ResolvedTs struct {
	ResolvedTs uint64 `protobuf:"varint,6,opt,name=resolved_ts,json=resolvedTs,proto3,oneof"`
}
type Event_CheckLocks struct {
	CheckLocks *EventCheckLocks `protobuf:"bytes,8,opt,name=check_locks,json=checkLocks,oneof"`
}

func (*Event_Entries_) isEvent_Event()   {}
func (*Event_Admin_) isEvent_Event()     {}
func (*Event_Error) isEvent_Event()      {}
func (*Event_ResolvedTs) isEvent_Event() {}
func (*Event_CheckLocks) isEvent_Event() {}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *Event) GetRegionId() uint64 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *Event) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Event) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *Event) GetEntries() *Event_Entries {
	if x, ok := m.GetEvent().(*Event_Entries_); ok {
		return x.Entries
	}
	return nil
}

func (m *Event) GetAdmin() *Event_Admin {
	if x, ok := m.GetEvent().(*Event_Admin_); ok {
		return x.Admin
	}
	return nil
}

func (m *Event) GetError() *Error {
	if x, ok := m.GetEvent().(*Event_Error); ok {
		return x.Error
	}
	return nil
}

func (m *Event) GetResolvedTs() uint64 {
	if x, ok := m.GetEvent().(*Event_ResolvedTs); ok {
		return x.ResolvedTs
	}
	return 0
}

func (m *Event) GetCheckLocks() *EventCheckLocks {
	if x, ok := m.GetEvent().(*Event_CheckLocks); ok {
		return x.CheckLocks
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, _Event_OneofSizer, []interface{}{
		(*Event_Entries_)(nil),
		(*Event_Admin_)(nil),
		(*Event_Error)(nil),
		(*Event_ResolvedTs)(nil),
		(*Event_CheckLocks)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// event
	switch x := m.Event.(type) {
	case *Event_Entries_:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Entries); err != nil {
			return err
		}
	case *Event_Admin_:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Admin); err != nil {
			return err
		}
	case *Event_Error:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case *Event_ResolvedTs:
		_ = b.EncodeVarint(6<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.ResolvedTs))
	case *Event_CheckLocks:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CheckLocks); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Event.Event has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 3: // event.entries
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Event_Entries)
		err := b.DecodeMessage(msg)
		m.Event = &Event_Entries_{msg}
		return true, err
	case 4: // event.admin
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Event_Admin)
		err := b.DecodeMessage(msg)
		m.Event = &Event_Admin_{msg}
		return true, err
	case 5: // event.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Error)
		err := b.DecodeMessage(msg)
		m.Event = &Event_Error{msg}
		return true, err
	case 6: // event.resolved_ts
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Event = &Event_ResolvedTs{x}
		return true, err
	case 8: // event.check_locks
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventCheckLocks)
		err := b.DecodeMessage(msg)
		m.Event = &Event_CheckLocks{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Event_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event)
	// event
	switch x := m.Event.(type) {
	case *Event_Entries_:
		s := proto.Size(x.Entries)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Admin_:
		s := proto.Size(x.Admin)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Error:
		s := proto.Size(x.Error)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_ResolvedTs:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.ResolvedTs))
	case *Event_CheckLocks:
		s := proto.Size(x.CheckLocks)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Event_Row struct {
	StartTs              uint64           `protobuf:"varint,1,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	CommitTs             uint64           `protobuf:"varint,2,opt,name=commit_ts,json=commitTs,proto3" json:"commit_ts,omitempty"`
	Type                 Event_LogType    `protobuf:"varint,3,opt,name=type,proto3,enum=cdcpb.Event_LogType" json:"type,omitempty"`
	OpType               Event_Row_OpType `protobuf:"varint,4,opt,name=op_type,json=opType,proto3,enum=cdcpb.Event_Row_OpType" json:"op_type,omitempty"`
	Key                  []byte           `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte           `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Event_Row) Reset()         { *m = Event_Row{} }
func (m *Event_Row) String() string { return proto.CompactTextString(m) }
func (*Event_Row) ProtoMessage()    {}
func (*Event_Row) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdcpb_41a6287fdfe94a2f, []int{3, 0}
}
func (m *Event_Row) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_Row) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_Row.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Event_Row) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_Row.Merge(dst, src)
}
func (m *Event_Row) XXX_Size() int {
	return m.Size()
}
func (m *Event_Row) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_Row.DiscardUnknown(m)
}

var xxx_messageInfo_Event_Row proto.InternalMessageInfo

func (m *Event_Row) GetStartTs() uint64 {
	if m != nil {
		return m.StartTs
	}
	return 0
}

func (m *Event_Row) GetCommitTs() uint64 {
	if m != nil {
		return m.CommitTs
	}
	return 0
}

func (m *Event_Row) GetType() Event_LogType {
	if m != nil {
		return m.Type
	}
	return Event_UNKNOWN
}

func (m *Event_Row) GetOpType() Event_Row_OpType {
	if m != nil {
		return m.OpType
	}
	return Event_Row_UNKNOWN
}

func (m *Event_Row) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Event_Row) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type Event_Entries struct {
	Entries              []*Event_Row `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Event_Entries) Reset()         { *m = Event_Entries{} }
func (m *Event_Entries) String() string { return proto.CompactTextString(m) }
func (*Event_Entries) ProtoMessage()    {}
func (*Event_Entries) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdcpb_41a6287fdfe94a2f, []int{3, 1}
}
func (m *Event_Entries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_Entries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_Entries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Event_Entries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_Entries.Merge(dst, src)
}
func (m *Event_Entries) XXX_Size() int {
	return m.Size()
}
func (m *Event_Entries) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_Entries.DiscardUnknown(m)
}

var xxx_messageInfo_Event_Entries proto.InternalMessageInfo

func (m *Event_Entries) GetEntries() []*Event_Row {
	if m != nil {
		return m.Entries
	}
	return nil
}

type Event_Admin struct {
	AdminRequest         *raft_cmdpb.AdminRequest  `protobuf:"bytes,1,opt,name=admin_request,json=adminRequest" json:"admin_request,omitempty"`
	AdminResponse        *raft_cmdpb.AdminResponse `protobuf:"bytes,2,opt,name=admin_response,json=adminResponse" json:"admin_response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *Event_Admin) Reset()         { *m = Event_Admin{} }
func (m *Event_Admin) String() string { return proto.CompactTextString(m) }
func (*Event_Admin) ProtoMessage()    {}
func (*Event_Admin) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdcpb_41a6287fdfe94a2f, []int{3, 2}
}
func (m *Event_Admin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_Admin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_Admin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Event_Admin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_Admin.Merge(dst, src)
}
func (m *Event_Admin) XXX_Size() int {
	return m.Size()
}
func (m *Event_Admin) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_Admin.DiscardUnknown(m)
}

var xxx_messageInfo_Event_Admin proto.InternalMessageInfo

func (m *Event_Admin) GetAdminRequest() *raft_cmdpb.AdminRequest {
	if m != nil {
		return m.AdminRequest
	}
	return nil
}

func (m *Event_Admin) GetAdminResponse() *raft_cmdpb.AdminResponse {
	if m != nil {
		return m.AdminResponse
	}
	return nil
}

type ChangeDataEvent struct {
	Events               []*Event `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeDataEvent) Reset()         { *m = ChangeDataEvent{} }
func (m *ChangeDataEvent) String() string { return proto.CompactTextString(m) }
func (*ChangeDataEvent) ProtoMessage()    {}
func (*ChangeDataEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdcpb_41a6287fdfe94a2f, []int{4}
}
func (m *ChangeDataEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeDataEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeDataEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChangeDataEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeDataEvent.Merge(dst, src)
}
func (m *ChangeDataEvent) XXX_Size() int {
	return m.Size()
}
func (m *ChangeDataEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeDataEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeDataEvent proto.InternalMessageInfo

func (m *ChangeDataEvent) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type ChangeDataRegister struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeDataRegister) Reset()         { *m = ChangeDataRegister{} }
func (m *ChangeDataRegister) String() string { return proto.CompactTextString(m) }
func (*ChangeDataRegister) ProtoMessage()    {}
func (*ChangeDataRegister) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdcpb_41a6287fdfe94a2f, []int{5}
}
func (m *ChangeDataRegister) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeDataRegister) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeDataRegister.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChangeDataRegister) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeDataRegister.Merge(dst, src)
}
func (m *ChangeDataRegister) XXX_Size() int {
	return m.Size()
}
func (m *ChangeDataRegister) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeDataRegister.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeDataRegister proto.InternalMessageInfo

type ChangeDataLongTxnStatus struct {
	TxnStartTs           []uint64 `protobuf:"varint,1,rep,packed,name=txn_start_ts,json=txnStartTs" json:"txn_start_ts,omitempty"`
	MinCommitTs          uint64   `protobuf:"varint,2,opt,name=min_commit_ts,json=minCommitTs,proto3" json:"min_commit_ts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeDataLongTxnStatus) Reset()         { *m = ChangeDataLongTxnStatus{} }
func (m *ChangeDataLongTxnStatus) String() string { return proto.CompactTextString(m) }
func (*ChangeDataLongTxnStatus) ProtoMessage()    {}
func (*ChangeDataLongTxnStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdcpb_41a6287fdfe94a2f, []int{6}
}
func (m *ChangeDataLongTxnStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeDataLongTxnStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeDataLongTxnStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChangeDataLongTxnStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeDataLongTxnStatus.Merge(dst, src)
}
func (m *ChangeDataLongTxnStatus) XXX_Size() int {
	return m.Size()
}
func (m *ChangeDataLongTxnStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeDataLongTxnStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeDataLongTxnStatus proto.InternalMessageInfo

func (m *ChangeDataLongTxnStatus) GetTxnStartTs() []uint64 {
	if m != nil {
		return m.TxnStartTs
	}
	return nil
}

func (m *ChangeDataLongTxnStatus) GetMinCommitTs() uint64 {
	if m != nil {
		return m.MinCommitTs
	}
	return 0
}

type ChangeDataRequest struct {
	Header       *Header             `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	RegionId     uint64              `protobuf:"varint,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	RegionEpoch  *metapb.RegionEpoch `protobuf:"bytes,3,opt,name=region_epoch,json=regionEpoch" json:"region_epoch,omitempty"`
	CheckpointTs uint64              `protobuf:"varint,4,opt,name=checkpoint_ts,json=checkpointTs,proto3" json:"checkpoint_ts,omitempty"`
	StartKey     []byte              `protobuf:"bytes,5,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey       []byte              `protobuf:"bytes,6,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	// Used for CDC to identify events corresponding to different requests.
	RequestId uint64 `protobuf:"varint,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Types that are valid to be assigned to Request:
	//	*ChangeDataRequest_Register
	//	*ChangeDataRequest_LongTxnStatus
	Request              isChangeDataRequest_Request `protobuf_oneof:"request"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ChangeDataRequest) Reset()         { *m = ChangeDataRequest{} }
func (m *ChangeDataRequest) String() string { return proto.CompactTextString(m) }
func (*ChangeDataRequest) ProtoMessage()    {}
func (*ChangeDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdcpb_41a6287fdfe94a2f, []int{7}
}
func (m *ChangeDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChangeDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeDataRequest.Merge(dst, src)
}
func (m *ChangeDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChangeDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeDataRequest proto.InternalMessageInfo

type isChangeDataRequest_Request interface {
	isChangeDataRequest_Request()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ChangeDataRequest_Register struct {
	Register *ChangeDataRegister `protobuf:"bytes,8,opt,name=register,oneof"`
}
type ChangeDataRequest_LongTxnStatus struct {
	LongTxnStatus *ChangeDataLongTxnStatus `protobuf:"bytes,9,opt,name=long_txn_status,json=longTxnStatus,oneof"`
}

func (*ChangeDataRequest_Register) isChangeDataRequest_Request()      {}
func (*ChangeDataRequest_LongTxnStatus) isChangeDataRequest_Request() {}

func (m *ChangeDataRequest) GetRequest() isChangeDataRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ChangeDataRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ChangeDataRequest) GetRegionId() uint64 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *ChangeDataRequest) GetRegionEpoch() *metapb.RegionEpoch {
	if m != nil {
		return m.RegionEpoch
	}
	return nil
}

func (m *ChangeDataRequest) GetCheckpointTs() uint64 {
	if m != nil {
		return m.CheckpointTs
	}
	return 0
}

func (m *ChangeDataRequest) GetStartKey() []byte {
	if m != nil {
		return m.StartKey
	}
	return nil
}

func (m *ChangeDataRequest) GetEndKey() []byte {
	if m != nil {
		return m.EndKey
	}
	return nil
}

func (m *ChangeDataRequest) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *ChangeDataRequest) GetRegister() *ChangeDataRegister {
	if x, ok := m.GetRequest().(*ChangeDataRequest_Register); ok {
		return x.Register
	}
	return nil
}

func (m *ChangeDataRequest) GetLongTxnStatus() *ChangeDataLongTxnStatus {
	if x, ok := m.GetRequest().(*ChangeDataRequest_LongTxnStatus); ok {
		return x.LongTxnStatus
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ChangeDataRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ChangeDataRequest_OneofMarshaler, _ChangeDataRequest_OneofUnmarshaler, _ChangeDataRequest_OneofSizer, []interface{}{
		(*ChangeDataRequest_Register)(nil),
		(*ChangeDataRequest_LongTxnStatus)(nil),
	}
}

func _ChangeDataRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ChangeDataRequest)
	// request
	switch x := m.Request.(type) {
	case *ChangeDataRequest_Register:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Register); err != nil {
			return err
		}
	case *ChangeDataRequest_LongTxnStatus:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LongTxnStatus); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ChangeDataRequest.Request has unexpected type %T", x)
	}
	return nil
}

func _ChangeDataRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ChangeDataRequest)
	switch tag {
	case 8: // request.register
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ChangeDataRegister)
		err := b.DecodeMessage(msg)
		m.Request = &ChangeDataRequest_Register{msg}
		return true, err
	case 9: // request.long_txn_status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ChangeDataLongTxnStatus)
		err := b.DecodeMessage(msg)
		m.Request = &ChangeDataRequest_LongTxnStatus{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ChangeDataRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ChangeDataRequest)
	// request
	switch x := m.Request.(type) {
	case *ChangeDataRequest_Register:
		s := proto.Size(x.Register)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ChangeDataRequest_LongTxnStatus:
		s := proto.Size(x.LongTxnStatus)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Header)(nil), "cdcpb.Header")
	proto.RegisterType((*Error)(nil), "cdcpb.Error")
	proto.RegisterType((*Error_DuplicateRequest)(nil), "cdcpb.Error.DuplicateRequest")
	proto.RegisterType((*EventCheckLocks)(nil), "cdcpb.EventCheckLocks")
	proto.RegisterType((*Event)(nil), "cdcpb.Event")
	proto.RegisterType((*Event_Row)(nil), "cdcpb.Event.Row")
	proto.RegisterType((*Event_Entries)(nil), "cdcpb.Event.Entries")
	proto.RegisterType((*Event_Admin)(nil), "cdcpb.Event.Admin")
	proto.RegisterType((*ChangeDataEvent)(nil), "cdcpb.ChangeDataEvent")
	proto.RegisterType((*ChangeDataRegister)(nil), "cdcpb.ChangeDataRegister")
	proto.RegisterType((*ChangeDataLongTxnStatus)(nil), "cdcpb.ChangeDataLongTxnStatus")
	proto.RegisterType((*ChangeDataRequest)(nil), "cdcpb.ChangeDataRequest")
	proto.RegisterEnum("cdcpb.Event_LogType", Event_LogType_name, Event_LogType_value)
	proto.RegisterEnum("cdcpb.Event_Row_OpType", Event_Row_OpType_name, Event_Row_OpType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChangeData service

type ChangeDataClient interface {
	EventFeed(ctx context.Context, opts ...grpc.CallOption) (ChangeData_EventFeedClient, error)
}

type changeDataClient struct {
	cc *grpc.ClientConn
}

func NewChangeDataClient(cc *grpc.ClientConn) ChangeDataClient {
	return &changeDataClient{cc}
}

func (c *changeDataClient) EventFeed(ctx context.Context, opts ...grpc.CallOption) (ChangeData_EventFeedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChangeData_serviceDesc.Streams[0], "/cdcpb.ChangeData/EventFeed", opts...)
	if err != nil {
		return nil, err
	}
	x := &changeDataEventFeedClient{stream}
	return x, nil
}

type ChangeData_EventFeedClient interface {
	Send(*ChangeDataRequest) error
	Recv() (*ChangeDataEvent, error)
	grpc.ClientStream
}

type changeDataEventFeedClient struct {
	grpc.ClientStream
}

func (x *changeDataEventFeedClient) Send(m *ChangeDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *changeDataEventFeedClient) Recv() (*ChangeDataEvent, error) {
	m := new(ChangeDataEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ChangeData service

type ChangeDataServer interface {
	EventFeed(ChangeData_EventFeedServer) error
}

func RegisterChangeDataServer(s *grpc.Server, srv ChangeDataServer) {
	s.RegisterService(&_ChangeData_serviceDesc, srv)
}

func _ChangeData_EventFeed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChangeDataServer).EventFeed(&changeDataEventFeedServer{stream})
}

type ChangeData_EventFeedServer interface {
	Send(*ChangeDataEvent) error
	Recv() (*ChangeDataRequest, error)
	grpc.ServerStream
}

type changeDataEventFeedServer struct {
	grpc.ServerStream
}

func (x *changeDataEventFeedServer) Send(m *ChangeDataEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *changeDataEventFeedServer) Recv() (*ChangeDataRequest, error) {
	m := new(ChangeDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ChangeData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cdcpb.ChangeData",
	HandlerType: (*ChangeDataServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventFeed",
			Handler:       _ChangeData_EventFeed_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cdcpb.proto",
}

func (m *Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Header) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClusterId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.ClusterId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NotLeader != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.NotLeader.Size()))
		n1, err := m.NotLeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.RegionNotFound != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.RegionNotFound.Size()))
		n2, err := m.RegionNotFound.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.EpochNotMatch != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.EpochNotMatch.Size()))
		n3, err := m.EpochNotMatch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.DuplicateRequest != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.DuplicateRequest.Size()))
		n4, err := m.DuplicateRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Error_DuplicateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error_DuplicateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RegionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.RegionId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EventCheckLocks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCheckLocks) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for _, msg := range m.Locks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCdcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RegionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.RegionId))
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.Index))
	}
	if m.Event != nil {
		nn5, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	if m.RequestId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.RequestId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Event_Entries_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Entries != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.Entries.Size()))
		n6, err := m.Entries.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Event_Admin_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Admin != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.Admin.Size()))
		n7, err := m.Admin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Event_Error) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Error != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.Error.Size()))
		n8, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Event_ResolvedTs) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x30
	i++
	i = encodeVarintCdcpb(dAtA, i, uint64(m.ResolvedTs))
	return i, nil
}
func (m *Event_CheckLocks) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CheckLocks != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.CheckLocks.Size()))
		n9, err := m.CheckLocks.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Event_Row) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_Row) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartTs != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.StartTs))
	}
	if m.CommitTs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.CommitTs))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.Type))
	}
	if m.OpType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.OpType))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Event_Entries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_Entries) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, msg := range m.Entries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCdcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Event_Admin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_Admin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AdminRequest != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.AdminRequest.Size()))
		n10, err := m.AdminRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.AdminResponse != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.AdminResponse.Size()))
		n11, err := m.AdminResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChangeDataEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeDataEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCdcpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChangeDataRegister) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeDataRegister) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChangeDataLongTxnStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeDataLongTxnStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TxnStartTs) > 0 {
		dAtA13 := make([]byte, len(m.TxnStartTs)*10)
		var j12 int
		for _, num := range m.TxnStartTs {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(j12))
		i += copy(dAtA[i:], dAtA13[:j12])
	}
	if m.MinCommitTs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.MinCommitTs))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChangeDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeDataRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.Header.Size()))
		n14, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.RegionId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.RegionId))
	}
	if m.RegionEpoch != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.RegionEpoch.Size()))
		n15, err := m.RegionEpoch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.CheckpointTs != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.CheckpointTs))
	}
	if len(m.StartKey) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(len(m.StartKey)))
		i += copy(dAtA[i:], m.StartKey)
	}
	if len(m.EndKey) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(len(m.EndKey)))
		i += copy(dAtA[i:], m.EndKey)
	}
	if m.RequestId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.RequestId))
	}
	if m.Request != nil {
		nn16, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn16
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChangeDataRequest_Register) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Register != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.Register.Size()))
		n17, err := m.Register.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *ChangeDataRequest_LongTxnStatus) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LongTxnStatus != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCdcpb(dAtA, i, uint64(m.LongTxnStatus.Size()))
		n18, err := m.LongTxnStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func encodeVarintCdcpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Header) Size() (n int) {
	var l int
	_ = l
	if m.ClusterId != 0 {
		n += 1 + sovCdcpb(uint64(m.ClusterId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Error) Size() (n int) {
	var l int
	_ = l
	if m.NotLeader != nil {
		l = m.NotLeader.Size()
		n += 1 + l + sovCdcpb(uint64(l))
	}
	if m.RegionNotFound != nil {
		l = m.RegionNotFound.Size()
		n += 1 + l + sovCdcpb(uint64(l))
	}
	if m.EpochNotMatch != nil {
		l = m.EpochNotMatch.Size()
		n += 1 + l + sovCdcpb(uint64(l))
	}
	if m.DuplicateRequest != nil {
		l = m.DuplicateRequest.Size()
		n += 1 + l + sovCdcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Error_DuplicateRequest) Size() (n int) {
	var l int
	_ = l
	if m.RegionId != 0 {
		n += 1 + sovCdcpb(uint64(m.RegionId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventCheckLocks) Size() (n int) {
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for _, e := range m.Locks {
			l = e.Size()
			n += 1 + l + sovCdcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Event) Size() (n int) {
	var l int
	_ = l
	if m.RegionId != 0 {
		n += 1 + sovCdcpb(uint64(m.RegionId))
	}
	if m.Index != 0 {
		n += 1 + sovCdcpb(uint64(m.Index))
	}
	if m.Event != nil {
		n += m.Event.Size()
	}
	if m.RequestId != 0 {
		n += 1 + sovCdcpb(uint64(m.RequestId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Event_Entries_) Size() (n int) {
	var l int
	_ = l
	if m.Entries != nil {
		l = m.Entries.Size()
		n += 1 + l + sovCdcpb(uint64(l))
	}
	return n
}
func (m *Event_Admin_) Size() (n int) {
	var l int
	_ = l
	if m.Admin != nil {
		l = m.Admin.Size()
		n += 1 + l + sovCdcpb(uint64(l))
	}
	return n
}
func (m *Event_Error) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCdcpb(uint64(l))
	}
	return n
}
func (m *Event_ResolvedTs) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCdcpb(uint64(m.ResolvedTs))
	return n
}
func (m *Event_CheckLocks) Size() (n int) {
	var l int
	_ = l
	if m.CheckLocks != nil {
		l = m.CheckLocks.Size()
		n += 1 + l + sovCdcpb(uint64(l))
	}
	return n
}
func (m *Event_Row) Size() (n int) {
	var l int
	_ = l
	if m.StartTs != 0 {
		n += 1 + sovCdcpb(uint64(m.StartTs))
	}
	if m.CommitTs != 0 {
		n += 1 + sovCdcpb(uint64(m.CommitTs))
	}
	if m.Type != 0 {
		n += 1 + sovCdcpb(uint64(m.Type))
	}
	if m.OpType != 0 {
		n += 1 + sovCdcpb(uint64(m.OpType))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCdcpb(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCdcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Event_Entries) Size() (n int) {
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovCdcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Event_Admin) Size() (n int) {
	var l int
	_ = l
	if m.AdminRequest != nil {
		l = m.AdminRequest.Size()
		n += 1 + l + sovCdcpb(uint64(l))
	}
	if m.AdminResponse != nil {
		l = m.AdminResponse.Size()
		n += 1 + l + sovCdcpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChangeDataEvent) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovCdcpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChangeDataRegister) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChangeDataLongTxnStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.TxnStartTs) > 0 {
		l = 0
		for _, e := range m.TxnStartTs {
			l += sovCdcpb(uint64(e))
		}
		n += 1 + sovCdcpb(uint64(l)) + l
	}
	if m.MinCommitTs != 0 {
		n += 1 + sovCdcpb(uint64(m.MinCommitTs))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChangeDataRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovCdcpb(uint64(l))
	}
	if m.RegionId != 0 {
		n += 1 + sovCdcpb(uint64(m.RegionId))
	}
	if m.RegionEpoch != nil {
		l = m.RegionEpoch.Size()
		n += 1 + l + sovCdcpb(uint64(l))
	}
	if m.CheckpointTs != 0 {
		n += 1 + sovCdcpb(uint64(m.CheckpointTs))
	}
	l = len(m.StartKey)
	if l > 0 {
		n += 1 + l + sovCdcpb(uint64(l))
	}
	l = len(m.EndKey)
	if l > 0 {
		n += 1 + l + sovCdcpb(uint64(l))
	}
	if m.RequestId != 0 {
		n += 1 + sovCdcpb(uint64(m.RequestId))
	}
	if m.Request != nil {
		n += m.Request.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChangeDataRequest_Register) Size() (n int) {
	var l int
	_ = l
	if m.Register != nil {
		l = m.Register.Size()
		n += 1 + l + sovCdcpb(uint64(l))
	}
	return n
}
func (m *ChangeDataRequest_LongTxnStatus) Size() (n int) {
	var l int
	_ = l
	if m.LongTxnStatus != nil {
		l = m.LongTxnStatus.Size()
		n += 1 + l + sovCdcpb(uint64(l))
	}
	return n
}

func sovCdcpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCdcpb(x uint64) (n int) {
	return sovCdcpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCdcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			m.ClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCdcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCdcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCdcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotLeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NotLeader == nil {
				m.NotLeader = &errorpb.NotLeader{}
			}
			if err := m.NotLeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionNotFound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegionNotFound == nil {
				m.RegionNotFound = &errorpb.RegionNotFound{}
			}
			if err := m.RegionNotFound.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNotMatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EpochNotMatch == nil {
				m.EpochNotMatch = &errorpb.EpochNotMatch{}
			}
			if err := m.EpochNotMatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DuplicateRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DuplicateRequest == nil {
				m.DuplicateRequest = &Error_DuplicateRequest{}
			}
			if err := m.DuplicateRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCdcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCdcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error_DuplicateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCdcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DuplicateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DuplicateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCdcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCdcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCheckLocks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCdcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCheckLocks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCheckLocks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locks = append(m.Locks, &kvrpcpb.LockInfo{})
			if err := m.Locks[len(m.Locks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCdcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCdcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCdcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_Entries{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_Entries_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_Admin{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_Admin_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Error{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_Error{v}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedTs", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Event = &Event_ResolvedTs{v}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckLocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventCheckLocks{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_CheckLocks{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCdcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCdcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_Row) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCdcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Row: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Row: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
			}
			m.StartTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTs", wireType)
			}
			m.CommitTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitTs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Event_LogType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpType", wireType)
			}
			m.OpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpType |= (Event_Row_OpType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCdcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCdcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCdcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCdcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_Entries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCdcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &Event_Row{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCdcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCdcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_Admin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCdcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Admin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Admin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminRequest == nil {
				m.AdminRequest = &raft_cmdpb.AdminRequest{}
			}
			if err := m.AdminRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminResponse == nil {
				m.AdminResponse = &raft_cmdpb.AdminResponse{}
			}
			if err := m.AdminResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCdcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCdcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeDataEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCdcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeDataEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeDataEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCdcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCdcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeDataRegister) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCdcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeDataRegister: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeDataRegister: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCdcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCdcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeDataLongTxnStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCdcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeDataLongTxnStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeDataLongTxnStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCdcpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TxnStartTs = append(m.TxnStartTs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCdcpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCdcpb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCdcpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TxnStartTs = append(m.TxnStartTs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TxnStartTs", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCommitTs", wireType)
			}
			m.MinCommitTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCommitTs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCdcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCdcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCdcpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegionEpoch == nil {
				m.RegionEpoch = &metapb.RegionEpoch{}
			}
			if err := m.RegionEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointTs", wireType)
			}
			m.CheckpointTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckpointTs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCdcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartKey = append(m.StartKey[:0], dAtA[iNdEx:postIndex]...)
			if m.StartKey == nil {
				m.StartKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCdcpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndKey = append(m.EndKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EndKey == nil {
				m.EndKey = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Register", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeDataRegister{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &ChangeDataRequest_Register{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongTxnStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCdcpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ChangeDataLongTxnStatus{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &ChangeDataRequest_LongTxnStatus{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCdcpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCdcpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCdcpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCdcpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCdcpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCdcpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCdcpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCdcpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCdcpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCdcpb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cdcpb.proto", fileDescriptor_cdcpb_41a6287fdfe94a2f) }

var fileDescriptor_cdcpb_41a6287fdfe94a2f = []byte{
	// 1042 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x55, 0xdd, 0x6e, 0xe3, 0xc4,
	0x17, 0x8f, 0x9b, 0x38, 0x1f, 0x27, 0xc9, 0xc6, 0x3b, 0xff, 0x6a, 0x9b, 0xe6, 0xaf, 0xad, 0x8a,
	0x59, 0xd8, 0x6a, 0x2f, 0xbc, 0x4b, 0x11, 0xac, 0x40, 0x02, 0xd1, 0x0f, 0xaf, 0x12, 0x9a, 0xa6,
	0xab, 0xc1, 0xab, 0x95, 0xb8, 0xc0, 0xf2, 0xda, 0xd3, 0x34, 0x4a, 0xe2, 0x31, 0xf6, 0x24, 0xdb,
	0xbe, 0x01, 0x6f, 0x00, 0x8f, 0xc0, 0x33, 0xf0, 0x04, 0x5c, 0x72, 0x85, 0xb8, 0x44, 0xe5, 0x9a,
	0x77, 0x40, 0x73, 0xc6, 0x76, 0x9c, 0x74, 0x05, 0x57, 0x99, 0x73, 0x7e, 0xbf, 0x33, 0x39, 0xf3,
	0x3b, 0x1f, 0x86, 0xa6, 0x1f, 0xf8, 0xd1, 0x1b, 0x2b, 0x8a, 0xb9, 0xe0, 0x44, 0x47, 0xa3, 0x67,
	0xc4, 0xde, 0xa5, 0x70, 0xfd, 0x79, 0x90, 0x01, 0xbd, 0xd6, 0x9c, 0x09, 0x2f, 0xb7, 0xda, 0x2c,
	0x8e, 0x79, 0xbc, 0x32, 0xa7, 0xcb, 0x38, 0xca, 0x2f, 0xe9, 0x6d, 0x8f, 0xf9, 0x98, 0xe3, 0xf1,
	0xa9, 0x3c, 0xa5, 0xde, 0x4e, 0xbc, 0x48, 0x04, 0x1e, 0x95, 0xc3, 0x7c, 0x0c, 0xd5, 0x3e, 0xf3,
	0x02, 0x16, 0x93, 0x87, 0x00, 0xfe, 0x6c, 0x91, 0x08, 0x16, 0xbb, 0x93, 0xa0, 0xab, 0xed, 0x6b,
	0x07, 0x15, 0xda, 0x48, 0x3d, 0x83, 0xc0, 0xfc, 0x65, 0x0b, 0x74, 0x5b, 0xfe, 0x21, 0xf9, 0x08,
	0x20, 0xe4, 0xc2, 0x9d, 0x61, 0x18, 0x12, 0x9b, 0x87, 0xc4, 0xca, 0x92, 0x19, 0x71, 0x31, 0x44,
	0x84, 0x36, 0xc2, 0xec, 0x48, 0x8e, 0xc0, 0x88, 0xd9, 0x78, 0xc2, 0x43, 0x57, 0x46, 0x5e, 0xf2,
	0x45, 0x18, 0x74, 0xb7, 0x30, 0x70, 0x27, 0x0f, 0xa4, 0x48, 0x18, 0x71, 0xf1, 0x42, 0xc2, 0xf4,
	0x5e, 0xbc, 0x66, 0x93, 0x2f, 0xa1, 0xc3, 0x22, 0xee, 0x5f, 0xe1, 0x0d, 0x73, 0x4f, 0xf8, 0x57,
	0xdd, 0x32, 0xde, 0xf0, 0x20, 0xbf, 0xc1, 0x96, 0xf8, 0x88, 0x8b, 0x73, 0x89, 0xd2, 0x36, 0x2b,
	0x9a, 0xe4, 0x6b, 0xb8, 0x1f, 0x2c, 0xa2, 0xd9, 0xc4, 0xf7, 0x04, 0x73, 0x63, 0xf6, 0xfd, 0x82,
	0x25, 0xa2, 0x5b, 0xc1, 0x1b, 0x1e, 0x5a, 0x4a, 0x7d, 0x7c, 0x9e, 0x75, 0x9a, 0xb1, 0xa8, 0x22,
	0x51, 0x23, 0xd8, 0xf0, 0xf4, 0x9e, 0x82, 0xb1, 0xc9, 0x22, 0xff, 0x87, 0x46, 0xfa, 0xc4, 0x5c,
	0xbd, 0xba, 0x72, 0x0c, 0x02, 0xf3, 0x73, 0xe8, 0xd8, 0x4b, 0x16, 0x8a, 0x93, 0x2b, 0xe6, 0x4f,
	0x87, 0xdc, 0x9f, 0x26, 0xe4, 0x31, 0xe8, 0x33, 0x79, 0xe8, 0x6a, 0xfb, 0xe5, 0x83, 0xe6, 0xe1,
	0x7d, 0x2b, 0x2b, 0x9f, 0x84, 0x07, 0xe1, 0x25, 0xa7, 0x0a, 0x37, 0x7f, 0xaf, 0x82, 0x8e, 0xc1,
	0xff, 0xfa, 0x17, 0x64, 0x1b, 0xf4, 0x49, 0x18, 0xb0, 0x6b, 0xd4, 0xb5, 0x42, 0x95, 0x41, 0x9e,
	0x41, 0x8d, 0x85, 0x22, 0x9e, 0xb0, 0x24, 0x55, 0x6b, 0x3b, 0x7b, 0xab, 0xbc, 0xd1, 0xb2, 0x15,
	0xd6, 0x2f, 0xd1, 0x8c, 0x46, 0x9e, 0x80, 0xee, 0x05, 0xf3, 0x49, 0x98, 0x6a, 0x43, 0xd6, 0xf8,
	0x47, 0x12, 0xe9, 0x97, 0xa8, 0xa2, 0x90, 0x47, 0xa0, 0xa3, 0xf6, 0x5d, 0x1d, 0xb9, 0xad, 0xa2,
	0x8e, 0x92, 0x85, 0x20, 0x79, 0x0f, 0x9a, 0x31, 0x4b, 0xf8, 0x6c, 0xc9, 0x02, 0x57, 0x24, 0xdd,
	0xaa, 0xcc, 0xaf, 0x5f, 0xa2, 0x90, 0x39, 0x9d, 0x44, 0xf6, 0x5e, 0x5a, 0x12, 0xf9, 0xb4, 0x9a,
	0xea, 0xbd, 0xd4, 0x33, 0x08, 0xc8, 0x67, 0xd0, 0xf4, 0xa5, 0x72, 0xae, 0x52, 0xac, 0x9e, 0xd6,
	0xbd, 0x90, 0xd9, 0x4a, 0x58, 0x79, 0xb3, 0x9f, 0x5b, 0xbd, 0xbf, 0x35, 0x28, 0x53, 0xfe, 0x96,
	0xec, 0x42, 0x3d, 0x11, 0x5e, 0x2c, 0x64, 0x06, 0x4a, 0xba, 0x1a, 0xda, 0x4e, 0x22, 0x65, 0xf5,
	0xf9, 0x7c, 0x3e, 0x41, 0x4c, 0xa9, 0x57, 0x57, 0x0e, 0x27, 0x21, 0x07, 0x50, 0x11, 0x37, 0x11,
	0x43, 0xf5, 0xee, 0x6d, 0xa8, 0x37, 0xe4, 0x63, 0xe7, 0x26, 0x62, 0x14, 0x19, 0x52, 0x6a, 0x1e,
	0xb9, 0x48, 0xae, 0x20, 0x79, 0x67, 0x8d, 0x4c, 0xf9, 0x5b, 0xeb, 0x22, 0x42, 0x7e, 0x95, 0xe3,
	0x2f, 0x31, 0xa0, 0x3c, 0x65, 0x37, 0x28, 0x5e, 0x8b, 0xca, 0xa3, 0x2c, 0xe2, 0xd2, 0x9b, 0x2d,
	0x18, 0x8a, 0xd4, 0xa2, 0xca, 0x30, 0x9f, 0x40, 0x55, 0x45, 0x92, 0x26, 0xd4, 0x5e, 0x8d, 0xce,
	0x46, 0x17, 0xaf, 0x47, 0x46, 0x89, 0xd4, 0xa0, 0xfc, 0xf2, 0x95, 0x63, 0x68, 0x04, 0xa0, 0x7a,
	0x6a, 0x0f, 0x6d, 0xc7, 0x36, 0xb6, 0x7a, 0x9f, 0x40, 0xcd, 0xce, 0x2b, 0x99, 0xd7, 0x5e, 0xf5,
	0x98, 0xb1, 0x99, 0x50, 0x5e, 0xf5, 0xde, 0x0f, 0x1a, 0xe8, 0x58, 0x5c, 0xf2, 0x05, 0xb4, 0xb1,
	0xb8, 0xf9, 0x8c, 0xa8, 0x01, 0xef, 0x5a, 0x85, 0x6d, 0x84, 0xcc, 0x6c, 0x3c, 0x5a, 0x5e, 0xc1,
	0x22, 0x5f, 0xc1, 0xbd, 0x2c, 0x3c, 0x89, 0x78, 0x98, 0xb0, 0x74, 0xce, 0x77, 0xdf, 0x11, 0xaf,
	0x08, 0xb4, 0xed, 0x15, 0x4d, 0xf3, 0x3b, 0xa8, 0xa5, 0xc2, 0xae, 0x3f, 0xb7, 0x05, 0xf5, 0x97,
	0xd4, 0x7e, 0x4d, 0x07, 0x8e, 0xad, 0xde, 0x7c, 0x72, 0x71, 0x7e, 0x3e, 0x70, 0x8c, 0x2d, 0x89,
	0xd0, 0x8b, 0xe1, 0xf0, 0xf8, 0xe8, 0xe4, 0xcc, 0x28, 0x93, 0x36, 0x34, 0x14, 0xe2, 0xd8, 0xa7,
	0x46, 0x85, 0x74, 0xa0, 0x39, 0x18, 0x0d, 0x9c, 0xc1, 0xd1, 0x70, 0xf0, 0xad, 0x7d, 0x6a, 0xe8,
	0xc7, 0x35, 0xd0, 0x99, 0x14, 0xc0, 0x7c, 0x0e, 0x9d, 0x93, 0x2b, 0x2f, 0x1c, 0xb3, 0x53, 0x4f,
	0x78, 0x6a, 0xc2, 0x1e, 0x41, 0x15, 0xb1, 0x4c, 0xb1, 0x56, 0x51, 0x31, 0x9a, 0x62, 0xe6, 0x36,
	0x90, 0x55, 0xa0, 0x5c, 0x5b, 0x72, 0x45, 0x9a, 0x2e, 0xec, 0xac, 0xbc, 0x43, 0x1e, 0x8e, 0x9d,
	0xeb, 0xf0, 0x1b, 0xe1, 0x89, 0x45, 0x42, 0xf6, 0xa1, 0x25, 0xae, 0x43, 0xb7, 0xd0, 0x80, 0xe5,
	0x83, 0x0a, 0x05, 0x81, 0x04, 0xec, 0x41, 0x13, 0xda, 0x52, 0xb4, 0xcd, 0x3e, 0x6c, 0xce, 0x27,
	0xe1, 0x49, 0xda, 0x8a, 0xe6, 0x8f, 0x65, 0xb8, 0x5f, 0xfc, 0x5f, 0x25, 0xf8, 0x07, 0x50, 0xbd,
	0x2a, 0x6e, 0xe2, 0x76, 0x9a, 0xb2, 0xda, 0xea, 0x34, 0x05, 0xd7, 0x77, 0xc7, 0xd6, 0xc6, 0xee,
	0xf8, 0x14, 0x5a, 0x29, 0x88, 0x3b, 0x33, 0x5d, 0x15, 0xff, 0xb3, 0xd2, 0xcf, 0x8d, 0xda, 0xcc,
	0xb8, 0x5d, 0x69, 0x33, 0x5e, 0x19, 0xe4, 0x7d, 0x68, 0xe3, 0xa8, 0x45, 0x7c, 0x12, 0x62, 0xd6,
	0x15, 0xbc, 0xb8, 0xb5, 0x72, 0xaa, 0xf1, 0x52, 0x0f, 0x5f, 0xf5, 0xba, 0x1a, 0xc5, 0x33, 0x76,
	0x43, 0x76, 0x64, 0x8f, 0x06, 0x08, 0xa9, 0x96, 0xaf, 0xb2, 0x30, 0x90, 0xc0, 0x7f, 0x6c, 0x84,
	0xe7, 0x80, 0xd9, 0x4b, 0xe1, 0xd3, 0x75, 0xb0, 0x9b, 0xbe, 0xfb, 0x6e, 0x65, 0xfa, 0x25, 0x9a,
	0x93, 0x49, 0x1f, 0x3a, 0x33, 0x1e, 0x8e, 0xdd, 0xb4, 0x1e, 0x62, 0x91, 0x74, 0x1b, 0x18, 0xbf,
	0x77, 0x27, 0x7e, 0xad, 0x86, 0xfd, 0x12, 0x6d, 0xcf, 0x8a, 0x8e, 0xe3, 0x06, 0xd4, 0xd2, 0x7c,
	0x0e, 0x2f, 0x00, 0x56, 0x61, 0xe4, 0x08, 0x1a, 0xd8, 0x2f, 0x2f, 0x18, 0x0b, 0x48, 0xf7, 0x1d,
	0x69, 0xa9, 0x8f, 0xc8, 0x83, 0x3b, 0x08, 0x46, 0x1d, 0x68, 0xcf, 0xb4, 0xe3, 0x0f, 0xff, 0xf8,
	0xb9, 0xae, 0xfd, 0x7a, 0xbb, 0xa7, 0xfd, 0x76, 0xbb, 0xa7, 0xfd, 0x79, 0xbb, 0xa7, 0xfd, 0xf4,
	0xd7, 0x5e, 0x09, 0x0c, 0x1e, 0x8f, 0x2d, 0x31, 0x99, 0x2e, 0xad, 0xe9, 0x12, 0xbf, 0xde, 0x6f,
	0xaa, 0xf8, 0xf3, 0xf1, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x62, 0xdf, 0xfd, 0xbb, 0x3f, 0x08,
	0x00, 0x00,
}
