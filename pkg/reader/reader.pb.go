// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reader.proto

package reader

import (
	"context"
	"fmt"
	"io"
	"math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	tici "github.com/pingcap/kvproto/pkg/tici"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// WarmupShardRequest contains information needed to warmup a shard
type WarmupShardRequest struct {
	// Shard header information (contains shard_id, key range, epoch)
	Shard *tici.ShardManifestHeader `protobuf:"bytes,1,opt,name=shard,proto3" json:"shard,omitempty"`
	// Index information
	IndexInfo *tici.IndexInfo `protobuf:"bytes,2,opt,name=index_info,json=indexInfo,proto3" json:"index_info,omitempty"`
	// Table information
	TableInfo *tici.TableInfo `protobuf:"bytes,3,opt,name=table_info,json=tableInfo,proto3" json:"table_info,omitempty"`
	// S3 bucket for fragment downloads
	FragUploadBucket string `protobuf:"bytes,4,opt,name=frag_upload_bucket,json=fragUploadBucket,proto3" json:"frag_upload_bucket,omitempty"`
	// Fragment metadata for downloading specific files
	Fragments []*tici.FragMeta `protobuf:"bytes,5,rep,name=fragments,proto3" json:"fragments,omitempty"`
}

func (m *WarmupShardRequest) Reset()         { *m = WarmupShardRequest{} }
func (m *WarmupShardRequest) String() string { return proto.CompactTextString(m) }
func (*WarmupShardRequest) ProtoMessage()    {}
func (*WarmupShardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f534e48276761a43, []int{0}
}
func (m *WarmupShardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WarmupShardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WarmupShardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WarmupShardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WarmupShardRequest.Merge(m, src)
}
func (m *WarmupShardRequest) XXX_Size() int {
	return m.Size()
}
func (m *WarmupShardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WarmupShardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WarmupShardRequest proto.InternalMessageInfo

func (m *WarmupShardRequest) GetShard() *tici.ShardManifestHeader {
	if m != nil {
		return m.Shard
	}
	return nil
}

func (m *WarmupShardRequest) GetIndexInfo() *tici.IndexInfo {
	if m != nil {
		return m.IndexInfo
	}
	return nil
}

func (m *WarmupShardRequest) GetTableInfo() *tici.TableInfo {
	if m != nil {
		return m.TableInfo
	}
	return nil
}

func (m *WarmupShardRequest) GetFragUploadBucket() string {
	if m != nil {
		return m.FragUploadBucket
	}
	return ""
}

func (m *WarmupShardRequest) GetFragments() []*tici.FragMeta {
	if m != nil {
		return m.Fragments
	}
	return nil
}

// WarmupShardResponse indicates the result of warmup operation
type WarmupShardResponse struct {
	// Operation result status code, 0 means success
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Error message, only valid when status is non-zero
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (m *WarmupShardResponse) Reset()         { *m = WarmupShardResponse{} }
func (m *WarmupShardResponse) String() string { return proto.CompactTextString(m) }
func (*WarmupShardResponse) ProtoMessage()    {}
func (*WarmupShardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f534e48276761a43, []int{1}
}
func (m *WarmupShardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WarmupShardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WarmupShardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WarmupShardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WarmupShardResponse.Merge(m, src)
}
func (m *WarmupShardResponse) XXX_Size() int {
	return m.Size()
}
func (m *WarmupShardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WarmupShardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WarmupShardResponse proto.InternalMessageInfo

func (m *WarmupShardResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *WarmupShardResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

// GetDebugCacheInfoRequest is used to query cache information (debug only)
type GetDebugCacheInfoRequest struct {
}

func (m *GetDebugCacheInfoRequest) Reset()         { *m = GetDebugCacheInfoRequest{} }
func (m *GetDebugCacheInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetDebugCacheInfoRequest) ProtoMessage()    {}
func (*GetDebugCacheInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f534e48276761a43, []int{2}
}
func (m *GetDebugCacheInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDebugCacheInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDebugCacheInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDebugCacheInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDebugCacheInfoRequest.Merge(m, src)
}
func (m *GetDebugCacheInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDebugCacheInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDebugCacheInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDebugCacheInfoRequest proto.InternalMessageInfo

// GetDebugCacheInfoResponse contains information about cached shards (debug only)
type GetDebugCacheInfoResponse struct {
	// Operation result status code, 0 means success
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Error message, only valid when status is non-zero
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Number of cached shards
	CachedShardCount int32 `protobuf:"varint,3,opt,name=cached_shard_count,json=cachedShardCount,proto3" json:"cached_shard_count,omitempty"`
	// List of cached shard IDs
	CachedShardIds []uint64 `protobuf:"varint,4,rep,packed,name=cached_shard_ids,json=cachedShardIds,proto3" json:"cached_shard_ids,omitempty"`
}

func (m *GetDebugCacheInfoResponse) Reset()         { *m = GetDebugCacheInfoResponse{} }
func (m *GetDebugCacheInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetDebugCacheInfoResponse) ProtoMessage()    {}
func (*GetDebugCacheInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f534e48276761a43, []int{3}
}
func (m *GetDebugCacheInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDebugCacheInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDebugCacheInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDebugCacheInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDebugCacheInfoResponse.Merge(m, src)
}
func (m *GetDebugCacheInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDebugCacheInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDebugCacheInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDebugCacheInfoResponse proto.InternalMessageInfo

func (m *GetDebugCacheInfoResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetDebugCacheInfoResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetDebugCacheInfoResponse) GetCachedShardCount() int32 {
	if m != nil {
		return m.CachedShardCount
	}
	return 0
}

func (m *GetDebugCacheInfoResponse) GetCachedShardIds() []uint64 {
	if m != nil {
		return m.CachedShardIds
	}
	return nil
}

func init() {
	proto.RegisterType((*WarmupShardRequest)(nil), "reader.WarmupShardRequest")
	proto.RegisterType((*WarmupShardResponse)(nil), "reader.WarmupShardResponse")
	proto.RegisterType((*GetDebugCacheInfoRequest)(nil), "reader.GetDebugCacheInfoRequest")
	proto.RegisterType((*GetDebugCacheInfoResponse)(nil), "reader.GetDebugCacheInfoResponse")
}

func init() { proto.RegisterFile("reader.proto", fileDescriptor_f534e48276761a43) }

var fileDescriptor_f534e48276761a43 = []byte{
	// 458 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xc7, 0xe3, 0xe6, 0x43, 0x64, 0xd2, 0x8f, 0x60, 0x10, 0xda, 0x2e, 0xd2, 0x6a, 0x09, 0x97,
	0x3d, 0x54, 0xa9, 0x14, 0xde, 0xa0, 0x45, 0x85, 0x1c, 0x72, 0x71, 0x41, 0x70, 0x5b, 0x39, 0xbb,
	0x93, 0xed, 0x8a, 0x66, 0x1d, 0x6c, 0x2f, 0xe2, 0xca, 0x1b, 0x70, 0xe4, 0x11, 0x38, 0xc2, 0x5b,
	0x70, 0xec, 0xb1, 0x47, 0x94, 0xbc, 0x08, 0xf2, 0x38, 0x11, 0xa9, 0x5a, 0x38, 0xf5, 0x36, 0xf3,
	0x9f, 0xdf, 0x8c, 0x35, 0x7f, 0xdb, 0xb0, 0xab, 0x51, 0xe6, 0xa8, 0x87, 0x0b, 0xad, 0xac, 0xe2,
	0x1d, 0x9f, 0x85, 0x60, 0xcb, 0xac, 0xf4, 0x5a, 0xf8, 0xb8, 0x50, 0x85, 0xa2, 0xf0, 0xd8, 0x45,
	0x6b, 0xf5, 0x40, 0xd7, 0xc6, 0x52, 0xe8, 0x85, 0xc1, 0x97, 0x1d, 0xe0, 0xef, 0xa4, 0x9e, 0xd7,
	0x8b, 0xf3, 0x0b, 0xa9, 0x73, 0x81, 0x1f, 0x6b, 0x34, 0x96, 0x1f, 0x43, 0xdb, 0xb8, 0x3c, 0x60,
	0x31, 0x4b, 0x7a, 0xa3, 0xc3, 0x21, 0x4d, 0x26, 0x64, 0x22, 0xab, 0x72, 0x86, 0xc6, 0xbe, 0xa6,
	0x33, 0x85, 0xe7, 0xf8, 0x10, 0xa0, 0xac, 0x72, 0xfc, 0x9c, 0x96, 0xd5, 0x4c, 0x05, 0x3b, 0xd4,
	0x75, 0xe0, 0xbb, 0xc6, 0x4e, 0x1f, 0x57, 0x33, 0x25, 0xba, 0xe5, 0x26, 0x74, 0xbc, 0x95, 0xd3,
	0x4b, 0xf4, 0x7c, 0x73, 0x9b, 0x7f, 0xe3, 0x74, 0xcf, 0xdb, 0x4d, 0xc8, 0x8f, 0x80, 0xcf, 0xb4,
	0x2c, 0xd2, 0x7a, 0x71, 0xa9, 0x64, 0x9e, 0x4e, 0xeb, 0xec, 0x03, 0xda, 0xa0, 0x15, 0xb3, 0xa4,
	0x2b, 0xfa, 0xae, 0xf2, 0x96, 0x0a, 0x27, 0xa4, 0xf3, 0x23, 0xe8, 0x3a, 0x6d, 0x8e, 0x95, 0x35,
	0x41, 0x3b, 0x6e, 0x26, 0xbd, 0xd1, 0xbe, 0x1f, 0x7e, 0xa6, 0x65, 0x31, 0x41, 0x2b, 0xc5, 0x5f,
	0x60, 0x20, 0xe0, 0xd1, 0x0d, 0x0b, 0xcc, 0x42, 0x55, 0x06, 0xf9, 0x13, 0xe8, 0x18, 0x2b, 0x6d,
	0x6d, 0xc8, 0x84, 0xb6, 0x58, 0x67, 0xfc, 0x39, 0xec, 0xa1, 0xd6, 0x4a, 0xa7, 0x73, 0x34, 0x46,
	0x16, 0x48, 0xdb, 0x76, 0xc5, 0x2e, 0x89, 0x13, 0xaf, 0x0d, 0x42, 0x08, 0x5e, 0xa1, 0x7d, 0x89,
	0xd3, 0xba, 0x38, 0x95, 0xd9, 0x85, 0xdf, 0xc7, 0x9b, 0x3b, 0xf8, 0xc1, 0xe0, 0xf0, 0x8e, 0xe2,
	0x3d, 0x1c, 0xeb, 0x6c, 0xca, 0xdc, 0xc4, 0x3c, 0xa5, 0x6b, 0x49, 0x33, 0x55, 0x57, 0x96, 0xec,
	0x6d, 0x8b, 0xbe, 0xaf, 0xd0, 0x92, 0xa7, 0x4e, 0xe7, 0x09, 0xf4, 0x6f, 0xd0, 0x65, 0x6e, 0x82,
	0x56, 0xdc, 0x4c, 0x5a, 0x62, 0x7f, 0x8b, 0x1d, 0xe7, 0x66, 0xf4, 0x93, 0xc1, 0x9e, 0xa0, 0x0b,
	0x3f, 0x47, 0xfd, 0xa9, 0xcc, 0x90, 0x9f, 0x41, 0x6f, 0xcb, 0x34, 0x1e, 0x0e, 0xd7, 0x2f, 0xf2,
	0xf6, 0x63, 0x0a, 0x9f, 0xde, 0x59, 0x5b, 0xaf, 0xfb, 0x1e, 0x1e, 0xde, 0xf2, 0x82, 0xc7, 0x9b,
	0x8e, 0x7f, 0x79, 0x18, 0x3e, 0xfb, 0x0f, 0xe1, 0x27, 0x9f, 0xc4, 0xd7, 0xdf, 0x1f, 0xb0, 0x5f,
	0xcb, 0x88, 0x5d, 0x2d, 0x23, 0xf6, 0x7b, 0x19, 0xb1, 0xaf, 0xab, 0xa8, 0xf1, 0x6d, 0x15, 0x35,
	0xae, 0x56, 0x51, 0xe3, 0x7a, 0x15, 0x35, 0xa6, 0x1d, 0xfa, 0x03, 0x2f, 0xfe, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x10, 0x13, 0x9c, 0xfc, 0x4e, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReaderServiceClient is the client API for ReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReaderServiceClient interface {
	// WarmupShard instructs the reader to download and cache a shard's index locally
	WarmupShard(ctx context.Context, in *WarmupShardRequest, opts ...grpc.CallOption) (*WarmupShardResponse, error)
	// GetDebugCacheInfo returns information about cached shards on this reader (debug only)
	GetDebugCacheInfo(ctx context.Context, in *GetDebugCacheInfoRequest, opts ...grpc.CallOption) (*GetDebugCacheInfoResponse, error)
}

type readerServiceClient struct {
	cc *grpc.ClientConn
}

func NewReaderServiceClient(cc *grpc.ClientConn) ReaderServiceClient {
	return &readerServiceClient{cc}
}

func (c *readerServiceClient) WarmupShard(ctx context.Context, in *WarmupShardRequest, opts ...grpc.CallOption) (*WarmupShardResponse, error) {
	out := new(WarmupShardResponse)
	err := c.cc.Invoke(ctx, "/reader.ReaderService/WarmupShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readerServiceClient) GetDebugCacheInfo(ctx context.Context, in *GetDebugCacheInfoRequest, opts ...grpc.CallOption) (*GetDebugCacheInfoResponse, error) {
	out := new(GetDebugCacheInfoResponse)
	err := c.cc.Invoke(ctx, "/reader.ReaderService/GetDebugCacheInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReaderServiceServer is the server API for ReaderService service.
type ReaderServiceServer interface {
	// WarmupShard instructs the reader to download and cache a shard's index locally
	WarmupShard(context.Context, *WarmupShardRequest) (*WarmupShardResponse, error)
	// GetDebugCacheInfo returns information about cached shards on this reader (debug only)
	GetDebugCacheInfo(context.Context, *GetDebugCacheInfoRequest) (*GetDebugCacheInfoResponse, error)
}

// UnimplementedReaderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReaderServiceServer struct {
}

func (*UnimplementedReaderServiceServer) WarmupShard(ctx context.Context, req *WarmupShardRequest) (*WarmupShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WarmupShard not implemented")
}
func (*UnimplementedReaderServiceServer) GetDebugCacheInfo(ctx context.Context, req *GetDebugCacheInfoRequest) (*GetDebugCacheInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDebugCacheInfo not implemented")
}

func RegisterReaderServiceServer(s *grpc.Server, srv ReaderServiceServer) {
	s.RegisterService(&_ReaderService_serviceDesc, srv)
}

func _ReaderService_WarmupShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarmupShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderServiceServer).WarmupShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reader.ReaderService/WarmupShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderServiceServer).WarmupShard(ctx, req.(*WarmupShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReaderService_GetDebugCacheInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDebugCacheInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderServiceServer).GetDebugCacheInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reader.ReaderService/GetDebugCacheInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderServiceServer).GetDebugCacheInfo(ctx, req.(*GetDebugCacheInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "reader.ReaderService",
	HandlerType: (*ReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WarmupShard",
			Handler:    _ReaderService_WarmupShard_Handler,
		},
		{
			MethodName: "GetDebugCacheInfo",
			Handler:    _ReaderService_GetDebugCacheInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reader.proto",
}

func (m *WarmupShardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WarmupShardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WarmupShardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fragments) > 0 {
		for iNdEx := len(m.Fragments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fragments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReader(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.FragUploadBucket) > 0 {
		i -= len(m.FragUploadBucket)
		copy(dAtA[i:], m.FragUploadBucket)
		i = encodeVarintReader(dAtA, i, uint64(len(m.FragUploadBucket)))
		i--
		dAtA[i] = 0x22
	}
	if m.TableInfo != nil {
		{
			size, err := m.TableInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReader(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.IndexInfo != nil {
		{
			size, err := m.IndexInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReader(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Shard != nil {
		{
			size, err := m.Shard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReader(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WarmupShardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WarmupShardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WarmupShardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintReader(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintReader(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDebugCacheInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDebugCacheInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDebugCacheInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetDebugCacheInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDebugCacheInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDebugCacheInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CachedShardIds) > 0 {
		dAtA5 := make([]byte, len(m.CachedShardIds)*10)
		var j4 int
		for _, num := range m.CachedShardIds {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintReader(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x22
	}
	if m.CachedShardCount != 0 {
		i = encodeVarintReader(dAtA, i, uint64(m.CachedShardCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintReader(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintReader(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintReader(dAtA []byte, offset int, v uint64) int {
	offset -= sovReader(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WarmupShardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Shard != nil {
		l = m.Shard.Size()
		n += 1 + l + sovReader(uint64(l))
	}
	if m.IndexInfo != nil {
		l = m.IndexInfo.Size()
		n += 1 + l + sovReader(uint64(l))
	}
	if m.TableInfo != nil {
		l = m.TableInfo.Size()
		n += 1 + l + sovReader(uint64(l))
	}
	l = len(m.FragUploadBucket)
	if l > 0 {
		n += 1 + l + sovReader(uint64(l))
	}
	if len(m.Fragments) > 0 {
		for _, e := range m.Fragments {
			l = e.Size()
			n += 1 + l + sovReader(uint64(l))
		}
	}
	return n
}

func (m *WarmupShardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovReader(uint64(m.Status))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovReader(uint64(l))
	}
	return n
}

func (m *GetDebugCacheInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetDebugCacheInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovReader(uint64(m.Status))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovReader(uint64(l))
	}
	if m.CachedShardCount != 0 {
		n += 1 + sovReader(uint64(m.CachedShardCount))
	}
	if len(m.CachedShardIds) > 0 {
		l = 0
		for _, e := range m.CachedShardIds {
			l += sovReader(uint64(e))
		}
		n += 1 + sovReader(uint64(l)) + l
	}
	return n
}

func sovReader(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReader(x uint64) (n int) {
	return sovReader(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WarmupShardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WarmupShardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WarmupShardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReader
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shard == nil {
				m.Shard = &tici.ShardManifestHeader{}
			}
			if err := m.Shard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReader
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IndexInfo == nil {
				m.IndexInfo = &tici.IndexInfo{}
			}
			if err := m.IndexInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReader
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TableInfo == nil {
				m.TableInfo = &tici.TableInfo{}
			}
			if err := m.TableInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FragUploadBucket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReader
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FragUploadBucket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fragments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReader
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fragments = append(m.Fragments, &tici.FragMeta{})
			if err := m.Fragments[len(m.Fragments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WarmupShardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WarmupShardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WarmupShardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReader
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDebugCacheInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDebugCacheInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDebugCacheInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipReader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDebugCacheInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDebugCacheInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDebugCacheInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReader
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CachedShardCount", wireType)
			}
			m.CachedShardCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CachedShardCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReader
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CachedShardIds = append(m.CachedShardIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReader
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthReader
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthReader
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CachedShardIds) == 0 {
					m.CachedShardIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReader
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CachedShardIds = append(m.CachedShardIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CachedShardIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReader(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReader
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReader
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReader
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReader
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReader
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReader
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReader        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReader          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReader = fmt.Errorf("proto: unexpected end of group")
)
