// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: disaggregated.proto

package disaggregated

import (
	"fmt"
	"io"
	"math"
	math_bits "math/bits"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type S3LockError struct {
	// Types that are valid to be assigned to Error:
	//
	//	*S3LockError_ErrDataFileIsMissing
	//	*S3LockError_ErrDataFileIsDeleted
	//	*S3LockError_ErrAddLockFileFail
	//	*S3LockError_ErrDataFileIsLocked
	//	*S3LockError_ErrAddDeleteFileFail
	Error                isS3LockError_Error `protobuf_oneof:"error"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *S3LockError) Reset()         { *m = S3LockError{} }
func (m *S3LockError) String() string { return proto.CompactTextString(m) }
func (*S3LockError) ProtoMessage()    {}
func (*S3LockError) Descriptor() ([]byte, []int) {
	return fileDescriptor_1026192e39a9f8dc, []int{0}
}
func (m *S3LockError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S3LockError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S3LockError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S3LockError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S3LockError.Merge(m, src)
}
func (m *S3LockError) XXX_Size() int {
	return m.Size()
}
func (m *S3LockError) XXX_DiscardUnknown() {
	xxx_messageInfo_S3LockError.DiscardUnknown(m)
}

var xxx_messageInfo_S3LockError proto.InternalMessageInfo

type isS3LockError_Error interface {
	isS3LockError_Error()
	MarshalTo([]byte) (int, error)
	Size() int
}

type S3LockError_ErrDataFileIsMissing struct {
	ErrDataFileIsMissing *S3LockErrorDataFileIsMissing `protobuf:"bytes,1,opt,name=err_data_file_is_missing,json=errDataFileIsMissing,proto3,oneof" json:"err_data_file_is_missing,omitempty"`
}
type S3LockError_ErrDataFileIsDeleted struct {
	ErrDataFileIsDeleted *S3LockErrorDataFileIsDeleted `protobuf:"bytes,2,opt,name=err_data_file_is_deleted,json=errDataFileIsDeleted,proto3,oneof" json:"err_data_file_is_deleted,omitempty"`
}
type S3LockError_ErrAddLockFileFail struct {
	ErrAddLockFileFail *S3LockErrorAddLockFileFail `protobuf:"bytes,3,opt,name=err_add_lock_file_fail,json=errAddLockFileFail,proto3,oneof" json:"err_add_lock_file_fail,omitempty"`
}
type S3LockError_ErrDataFileIsLocked struct {
	ErrDataFileIsLocked *S3LockErrorDataFileIsLocked `protobuf:"bytes,4,opt,name=err_data_file_is_locked,json=errDataFileIsLocked,proto3,oneof" json:"err_data_file_is_locked,omitempty"`
}
type S3LockError_ErrAddDeleteFileFail struct {
	ErrAddDeleteFileFail *S3LockErrorAddDeleteFileFail `protobuf:"bytes,5,opt,name=err_add_delete_file_fail,json=errAddDeleteFileFail,proto3,oneof" json:"err_add_delete_file_fail,omitempty"`
}

func (*S3LockError_ErrDataFileIsMissing) isS3LockError_Error() {}
func (*S3LockError_ErrDataFileIsDeleted) isS3LockError_Error() {}
func (*S3LockError_ErrAddLockFileFail) isS3LockError_Error()   {}
func (*S3LockError_ErrDataFileIsLocked) isS3LockError_Error()  {}
func (*S3LockError_ErrAddDeleteFileFail) isS3LockError_Error() {}

func (m *S3LockError) GetError() isS3LockError_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *S3LockError) GetErrDataFileIsMissing() *S3LockErrorDataFileIsMissing {
	if x, ok := m.GetError().(*S3LockError_ErrDataFileIsMissing); ok {
		return x.ErrDataFileIsMissing
	}
	return nil
}

func (m *S3LockError) GetErrDataFileIsDeleted() *S3LockErrorDataFileIsDeleted {
	if x, ok := m.GetError().(*S3LockError_ErrDataFileIsDeleted); ok {
		return x.ErrDataFileIsDeleted
	}
	return nil
}

func (m *S3LockError) GetErrAddLockFileFail() *S3LockErrorAddLockFileFail {
	if x, ok := m.GetError().(*S3LockError_ErrAddLockFileFail); ok {
		return x.ErrAddLockFileFail
	}
	return nil
}

func (m *S3LockError) GetErrDataFileIsLocked() *S3LockErrorDataFileIsLocked {
	if x, ok := m.GetError().(*S3LockError_ErrDataFileIsLocked); ok {
		return x.ErrDataFileIsLocked
	}
	return nil
}

func (m *S3LockError) GetErrAddDeleteFileFail() *S3LockErrorAddDeleteFileFail {
	if x, ok := m.GetError().(*S3LockError_ErrAddDeleteFileFail); ok {
		return x.ErrAddDeleteFileFail
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*S3LockError) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*S3LockError_ErrDataFileIsMissing)(nil),
		(*S3LockError_ErrDataFileIsDeleted)(nil),
		(*S3LockError_ErrAddLockFileFail)(nil),
		(*S3LockError_ErrDataFileIsLocked)(nil),
		(*S3LockError_ErrAddDeleteFileFail)(nil),
	}
}

type S3LockErrorDataFileIsMissing struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S3LockErrorDataFileIsMissing) Reset()         { *m = S3LockErrorDataFileIsMissing{} }
func (m *S3LockErrorDataFileIsMissing) String() string { return proto.CompactTextString(m) }
func (*S3LockErrorDataFileIsMissing) ProtoMessage()    {}
func (*S3LockErrorDataFileIsMissing) Descriptor() ([]byte, []int) {
	return fileDescriptor_1026192e39a9f8dc, []int{1}
}
func (m *S3LockErrorDataFileIsMissing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S3LockErrorDataFileIsMissing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S3LockErrorDataFileIsMissing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S3LockErrorDataFileIsMissing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S3LockErrorDataFileIsMissing.Merge(m, src)
}
func (m *S3LockErrorDataFileIsMissing) XXX_Size() int {
	return m.Size()
}
func (m *S3LockErrorDataFileIsMissing) XXX_DiscardUnknown() {
	xxx_messageInfo_S3LockErrorDataFileIsMissing.DiscardUnknown(m)
}

var xxx_messageInfo_S3LockErrorDataFileIsMissing proto.InternalMessageInfo

type S3LockErrorDataFileIsDeleted struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S3LockErrorDataFileIsDeleted) Reset()         { *m = S3LockErrorDataFileIsDeleted{} }
func (m *S3LockErrorDataFileIsDeleted) String() string { return proto.CompactTextString(m) }
func (*S3LockErrorDataFileIsDeleted) ProtoMessage()    {}
func (*S3LockErrorDataFileIsDeleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_1026192e39a9f8dc, []int{2}
}
func (m *S3LockErrorDataFileIsDeleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S3LockErrorDataFileIsDeleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S3LockErrorDataFileIsDeleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S3LockErrorDataFileIsDeleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S3LockErrorDataFileIsDeleted.Merge(m, src)
}
func (m *S3LockErrorDataFileIsDeleted) XXX_Size() int {
	return m.Size()
}
func (m *S3LockErrorDataFileIsDeleted) XXX_DiscardUnknown() {
	xxx_messageInfo_S3LockErrorDataFileIsDeleted.DiscardUnknown(m)
}

var xxx_messageInfo_S3LockErrorDataFileIsDeleted proto.InternalMessageInfo

type S3LockErrorAddLockFileFail struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S3LockErrorAddLockFileFail) Reset()         { *m = S3LockErrorAddLockFileFail{} }
func (m *S3LockErrorAddLockFileFail) String() string { return proto.CompactTextString(m) }
func (*S3LockErrorAddLockFileFail) ProtoMessage()    {}
func (*S3LockErrorAddLockFileFail) Descriptor() ([]byte, []int) {
	return fileDescriptor_1026192e39a9f8dc, []int{3}
}
func (m *S3LockErrorAddLockFileFail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S3LockErrorAddLockFileFail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S3LockErrorAddLockFileFail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S3LockErrorAddLockFileFail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S3LockErrorAddLockFileFail.Merge(m, src)
}
func (m *S3LockErrorAddLockFileFail) XXX_Size() int {
	return m.Size()
}
func (m *S3LockErrorAddLockFileFail) XXX_DiscardUnknown() {
	xxx_messageInfo_S3LockErrorAddLockFileFail.DiscardUnknown(m)
}

var xxx_messageInfo_S3LockErrorAddLockFileFail proto.InternalMessageInfo

type S3LockErrorDataFileIsLocked struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S3LockErrorDataFileIsLocked) Reset()         { *m = S3LockErrorDataFileIsLocked{} }
func (m *S3LockErrorDataFileIsLocked) String() string { return proto.CompactTextString(m) }
func (*S3LockErrorDataFileIsLocked) ProtoMessage()    {}
func (*S3LockErrorDataFileIsLocked) Descriptor() ([]byte, []int) {
	return fileDescriptor_1026192e39a9f8dc, []int{4}
}
func (m *S3LockErrorDataFileIsLocked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S3LockErrorDataFileIsLocked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S3LockErrorDataFileIsLocked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S3LockErrorDataFileIsLocked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S3LockErrorDataFileIsLocked.Merge(m, src)
}
func (m *S3LockErrorDataFileIsLocked) XXX_Size() int {
	return m.Size()
}
func (m *S3LockErrorDataFileIsLocked) XXX_DiscardUnknown() {
	xxx_messageInfo_S3LockErrorDataFileIsLocked.DiscardUnknown(m)
}

var xxx_messageInfo_S3LockErrorDataFileIsLocked proto.InternalMessageInfo

type S3LockErrorAddDeleteFileFail struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S3LockErrorAddDeleteFileFail) Reset()         { *m = S3LockErrorAddDeleteFileFail{} }
func (m *S3LockErrorAddDeleteFileFail) String() string { return proto.CompactTextString(m) }
func (*S3LockErrorAddDeleteFileFail) ProtoMessage()    {}
func (*S3LockErrorAddDeleteFileFail) Descriptor() ([]byte, []int) {
	return fileDescriptor_1026192e39a9f8dc, []int{5}
}
func (m *S3LockErrorAddDeleteFileFail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S3LockErrorAddDeleteFileFail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S3LockErrorAddDeleteFileFail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S3LockErrorAddDeleteFileFail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S3LockErrorAddDeleteFileFail.Merge(m, src)
}
func (m *S3LockErrorAddDeleteFileFail) XXX_Size() int {
	return m.Size()
}
func (m *S3LockErrorAddDeleteFileFail) XXX_DiscardUnknown() {
	xxx_messageInfo_S3LockErrorAddDeleteFileFail.DiscardUnknown(m)
}

var xxx_messageInfo_S3LockErrorAddDeleteFileFail proto.InternalMessageInfo

type TryAddLockRequest struct {
	// The original data file name.
	OriDataFile string `protobuf:"bytes,1,opt,name=ori_data_file,json=oriDataFile,proto3" json:"ori_data_file,omitempty"`
	// The original store id.
	OriStoreId uint64 `protobuf:"varint,2,opt,name=ori_store_id,json=oriStoreId,proto3" json:"ori_store_id,omitempty"`
	// The lock store id.
	LockStoreId uint64 `protobuf:"varint,3,opt,name=lock_store_id,json=lockStoreId,proto3" json:"lock_store_id,omitempty"`
	// The upload sequence number.
	UploadSeq            uint64   `protobuf:"varint,4,opt,name=upload_seq,json=uploadSeq,proto3" json:"upload_seq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TryAddLockRequest) Reset()         { *m = TryAddLockRequest{} }
func (m *TryAddLockRequest) String() string { return proto.CompactTextString(m) }
func (*TryAddLockRequest) ProtoMessage()    {}
func (*TryAddLockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1026192e39a9f8dc, []int{6}
}
func (m *TryAddLockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TryAddLockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TryAddLockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TryAddLockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TryAddLockRequest.Merge(m, src)
}
func (m *TryAddLockRequest) XXX_Size() int {
	return m.Size()
}
func (m *TryAddLockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TryAddLockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TryAddLockRequest proto.InternalMessageInfo

func (m *TryAddLockRequest) GetOriDataFile() string {
	if m != nil {
		return m.OriDataFile
	}
	return ""
}

func (m *TryAddLockRequest) GetOriStoreId() uint64 {
	if m != nil {
		return m.OriStoreId
	}
	return 0
}

func (m *TryAddLockRequest) GetLockStoreId() uint64 {
	if m != nil {
		return m.LockStoreId
	}
	return 0
}

func (m *TryAddLockRequest) GetUploadSeq() uint64 {
	if m != nil {
		return m.UploadSeq
	}
	return 0
}

type TryAddLockResponse struct {
	// Whether the lock is successfully added.
	IsSuccess bool `protobuf:"varint,1,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	// Error message
	Error                *S3LockError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TryAddLockResponse) Reset()         { *m = TryAddLockResponse{} }
func (m *TryAddLockResponse) String() string { return proto.CompactTextString(m) }
func (*TryAddLockResponse) ProtoMessage()    {}
func (*TryAddLockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1026192e39a9f8dc, []int{7}
}
func (m *TryAddLockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TryAddLockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TryAddLockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TryAddLockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TryAddLockResponse.Merge(m, src)
}
func (m *TryAddLockResponse) XXX_Size() int {
	return m.Size()
}
func (m *TryAddLockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TryAddLockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TryAddLockResponse proto.InternalMessageInfo

func (m *TryAddLockResponse) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *TryAddLockResponse) GetError() *S3LockError {
	if m != nil {
		return m.Error
	}
	return nil
}

type TryMarkDeleteRequest struct {
	// The original data file name.
	OriDataFile string `protobuf:"bytes,1,opt,name=ori_data_file,json=oriDataFile,proto3" json:"ori_data_file,omitempty"`
	// The original store id.
	OriStoreId           uint64   `protobuf:"varint,2,opt,name=ori_store_id,json=oriStoreId,proto3" json:"ori_store_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TryMarkDeleteRequest) Reset()         { *m = TryMarkDeleteRequest{} }
func (m *TryMarkDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*TryMarkDeleteRequest) ProtoMessage()    {}
func (*TryMarkDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1026192e39a9f8dc, []int{8}
}
func (m *TryMarkDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TryMarkDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TryMarkDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TryMarkDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TryMarkDeleteRequest.Merge(m, src)
}
func (m *TryMarkDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *TryMarkDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TryMarkDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TryMarkDeleteRequest proto.InternalMessageInfo

func (m *TryMarkDeleteRequest) GetOriDataFile() string {
	if m != nil {
		return m.OriDataFile
	}
	return ""
}

func (m *TryMarkDeleteRequest) GetOriStoreId() uint64 {
	if m != nil {
		return m.OriStoreId
	}
	return 0
}

type TryMarkDeleteResponse struct {
	// Whether the deleta is successfully marked.
	IsSuccess bool `protobuf:"varint,1,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	// Error message
	Error                *S3LockError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TryMarkDeleteResponse) Reset()         { *m = TryMarkDeleteResponse{} }
func (m *TryMarkDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*TryMarkDeleteResponse) ProtoMessage()    {}
func (*TryMarkDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1026192e39a9f8dc, []int{9}
}
func (m *TryMarkDeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TryMarkDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TryMarkDeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TryMarkDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TryMarkDeleteResponse.Merge(m, src)
}
func (m *TryMarkDeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *TryMarkDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TryMarkDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TryMarkDeleteResponse proto.InternalMessageInfo

func (m *TryMarkDeleteResponse) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *TryMarkDeleteResponse) GetError() *S3LockError {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*S3LockError)(nil), "disaggregated.S3LockError")
	proto.RegisterType((*S3LockErrorDataFileIsMissing)(nil), "disaggregated.S3LockErrorDataFileIsMissing")
	proto.RegisterType((*S3LockErrorDataFileIsDeleted)(nil), "disaggregated.S3LockErrorDataFileIsDeleted")
	proto.RegisterType((*S3LockErrorAddLockFileFail)(nil), "disaggregated.S3LockErrorAddLockFileFail")
	proto.RegisterType((*S3LockErrorDataFileIsLocked)(nil), "disaggregated.S3LockErrorDataFileIsLocked")
	proto.RegisterType((*S3LockErrorAddDeleteFileFail)(nil), "disaggregated.S3LockErrorAddDeleteFileFail")
	proto.RegisterType((*TryAddLockRequest)(nil), "disaggregated.TryAddLockRequest")
	proto.RegisterType((*TryAddLockResponse)(nil), "disaggregated.TryAddLockResponse")
	proto.RegisterType((*TryMarkDeleteRequest)(nil), "disaggregated.TryMarkDeleteRequest")
	proto.RegisterType((*TryMarkDeleteResponse)(nil), "disaggregated.TryMarkDeleteResponse")
}

func init() { proto.RegisterFile("disaggregated.proto", fileDescriptor_1026192e39a9f8dc) }

var fileDescriptor_1026192e39a9f8dc = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0x69, 0x0a, 0x64, 0x42, 0x25, 0xd8, 0x06, 0xb0, 0x4a, 0x6b, 0x55, 0x7b, 0xe2, 0x47,
	0x8a, 0x10, 0x7d, 0x82, 0x56, 0xa5, 0x4a, 0xa5, 0xf6, 0xb2, 0xe9, 0x11, 0x69, 0xb5, 0xcd, 0x4e,
	0xcd, 0xca, 0xa6, 0x9b, 0xcc, 0x3a, 0x95, 0xfa, 0x16, 0x1c, 0x39, 0xf0, 0x40, 0x1c, 0x79, 0x04,
	0x14, 0x5e, 0x04, 0xed, 0xae, 0x03, 0xf9, 0x21, 0xa5, 0x07, 0x7a, 0xb2, 0xf5, 0x79, 0xe6, 0xfb,
	0xe6, 0xfb, 0x66, 0x64, 0xd8, 0xd4, 0xc6, 0xa9, 0x3c, 0x27, 0xcc, 0x55, 0x85, 0xba, 0x3b, 0x24,
	0x5b, 0x59, 0xb6, 0x31, 0x07, 0xf2, 0xcf, 0x4d, 0x68, 0xf7, 0xf7, 0x4e, 0xec, 0xa0, 0x78, 0x4f,
	0x64, 0x89, 0x21, 0xa4, 0x48, 0x24, 0xb5, 0xaa, 0x94, 0xbc, 0x30, 0x25, 0x4a, 0xe3, 0xe4, 0x27,
	0xe3, 0x9c, 0xb9, 0xcc, 0xd3, 0x64, 0x37, 0x79, 0xd9, 0x7e, 0xf7, 0xa6, 0x3b, 0x4f, 0x3b, 0xd3,
	0x7d, 0xa8, 0x2a, 0x75, 0x64, 0x4a, 0x3c, 0x76, 0xa7, 0xb1, 0xa5, 0xd7, 0x10, 0x1d, 0xa4, 0x65,
	0xfc, 0xaf, 0x32, 0x1a, 0x4b, 0xac, 0x50, 0xa7, 0xf7, 0x6e, 0x2f, 0x73, 0x18, 0x5b, 0x96, 0x64,
	0x6a, 0x9c, 0x49, 0x78, 0xe6, 0x65, 0x94, 0xd6, 0xb2, 0xb4, 0x83, 0x22, 0x4a, 0x5d, 0x28, 0x53,
	0xa6, 0x6b, 0x41, 0xe4, 0xd5, 0x6a, 0x91, 0x7d, 0xad, 0xfd, 0xbb, 0xe7, 0x3b, 0x52, 0xa6, 0xec,
	0x35, 0x04, 0x43, 0x5a, 0x44, 0xd9, 0x39, 0x3c, 0x5f, 0xf2, 0xe1, 0x95, 0x50, 0xa7, 0xcd, 0xa0,
	0xf0, 0xfa, 0x36, 0x36, 0x4e, 0x42, 0x47, 0xaf, 0x21, 0x36, 0xe7, 0x5c, 0x44, 0x78, 0x9a, 0x95,
	0x37, 0x11, 0x23, 0x9a, 0xb1, 0xb1, 0xfe, 0xaf, 0xac, 0xf6, 0xb5, 0x8e, 0x61, 0xcc, 0x18, 0xe9,
	0x44, 0x23, 0xf3, 0xf8, 0xc1, 0x03, 0x58, 0x47, 0xdf, 0xc1, 0x33, 0xd8, 0xbe, 0x69, 0xa7, 0x2b,
	0xbf, 0xd7, 0xa1, 0xf3, 0x6d, 0xd8, 0x5a, 0x9d, 0x23, 0xdf, 0x81, 0x17, 0x37, 0x64, 0xb0, 0x40,
	0xbe, 0x34, 0x25, 0xff, 0x9a, 0xc0, 0x93, 0x33, 0xba, 0xae, 0x59, 0x05, 0x8e, 0xc6, 0xe8, 0x2a,
	0xc6, 0x61, 0xc3, 0x92, 0xf9, 0xb3, 0x86, 0x70, 0xaa, 0x2d, 0xd1, 0xb6, 0x64, 0xa6, 0x0a, 0x6c,
	0x17, 0x1e, 0xf9, 0x1a, 0x57, 0x59, 0x42, 0x69, 0xe2, 0x99, 0x35, 0x05, 0x58, 0x32, 0x7d, 0x0f,
	0x1d, 0x6b, 0xcf, 0x12, 0xae, 0xe4, 0x77, 0xc9, 0x5a, 0x28, 0x69, 0x7b, 0x70, 0x5a, 0xb3, 0x03,
	0x30, 0x1e, 0x96, 0x56, 0x69, 0xe9, 0x70, 0x14, 0x76, 0xdc, 0x14, 0xad, 0x88, 0xf4, 0x71, 0xc4,
	0x11, 0xd8, 0xec, 0x74, 0x6e, 0x68, 0x2f, 0x1d, 0xfa, 0x26, 0xe3, 0xa4, 0x1b, 0x0f, 0x06, 0xe8,
	0x5c, 0x98, 0xed, 0xa1, 0x68, 0x19, 0xd7, 0x8f, 0x00, 0x7b, 0x5b, 0x27, 0x5f, 0x5f, 0xfe, 0xd6,
	0xea, 0x6d, 0x8a, 0x7a, 0x45, 0x1f, 0xa0, 0x73, 0x46, 0xd7, 0xa7, 0x8a, 0x8a, 0x18, 0xcf, 0x7f,
	0xcd, 0x81, 0x7f, 0x84, 0xa7, 0x0b, 0xec, 0x77, 0xe4, 0xe3, 0x80, 0x7f, 0x9b, 0x64, 0xc9, 0xf7,
	0x49, 0x96, 0xfc, 0x98, 0x64, 0xc9, 0x97, 0x9f, 0x59, 0x03, 0x1e, 0x5b, 0xca, 0xbb, 0x95, 0x29,
	0xae, 0xba, 0xc5, 0x55, 0xf8, 0x61, 0x9d, 0xdf, 0x0f, 0x8f, 0xbd, 0x5f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xf1, 0x9d, 0x9f, 0xca, 0xce, 0x04, 0x00, 0x00,
}

func (m *S3LockError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S3LockError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S3LockError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != nil {
		{
			size := m.Error.Size()
			i -= size
			if _, err := m.Error.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *S3LockError_ErrDataFileIsMissing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S3LockError_ErrDataFileIsMissing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ErrDataFileIsMissing != nil {
		{
			size, err := m.ErrDataFileIsMissing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDisaggregated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *S3LockError_ErrDataFileIsDeleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S3LockError_ErrDataFileIsDeleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ErrDataFileIsDeleted != nil {
		{
			size, err := m.ErrDataFileIsDeleted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDisaggregated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *S3LockError_ErrAddLockFileFail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S3LockError_ErrAddLockFileFail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ErrAddLockFileFail != nil {
		{
			size, err := m.ErrAddLockFileFail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDisaggregated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *S3LockError_ErrDataFileIsLocked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S3LockError_ErrDataFileIsLocked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ErrDataFileIsLocked != nil {
		{
			size, err := m.ErrDataFileIsLocked.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDisaggregated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *S3LockError_ErrAddDeleteFileFail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S3LockError_ErrAddDeleteFileFail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ErrAddDeleteFileFail != nil {
		{
			size, err := m.ErrAddDeleteFileFail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDisaggregated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *S3LockErrorDataFileIsMissing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S3LockErrorDataFileIsMissing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S3LockErrorDataFileIsMissing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *S3LockErrorDataFileIsDeleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S3LockErrorDataFileIsDeleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S3LockErrorDataFileIsDeleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *S3LockErrorAddLockFileFail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S3LockErrorAddLockFileFail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S3LockErrorAddLockFileFail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *S3LockErrorDataFileIsLocked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S3LockErrorDataFileIsLocked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S3LockErrorDataFileIsLocked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *S3LockErrorAddDeleteFileFail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S3LockErrorAddDeleteFileFail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S3LockErrorAddDeleteFileFail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *TryAddLockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TryAddLockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TryAddLockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UploadSeq != 0 {
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.UploadSeq))
		i--
		dAtA[i] = 0x20
	}
	if m.LockStoreId != 0 {
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.LockStoreId))
		i--
		dAtA[i] = 0x18
	}
	if m.OriStoreId != 0 {
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.OriStoreId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OriDataFile) > 0 {
		i -= len(m.OriDataFile)
		copy(dAtA[i:], m.OriDataFile)
		i = encodeVarintDisaggregated(dAtA, i, uint64(len(m.OriDataFile)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TryAddLockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TryAddLockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TryAddLockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDisaggregated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.IsSuccess {
		i--
		if m.IsSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TryMarkDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TryMarkDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TryMarkDeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OriStoreId != 0 {
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.OriStoreId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OriDataFile) > 0 {
		i -= len(m.OriDataFile)
		copy(dAtA[i:], m.OriDataFile)
		i = encodeVarintDisaggregated(dAtA, i, uint64(len(m.OriDataFile)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TryMarkDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TryMarkDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TryMarkDeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDisaggregated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.IsSuccess {
		i--
		if m.IsSuccess {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDisaggregated(dAtA []byte, offset int, v uint64) int {
	offset -= sovDisaggregated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *S3LockError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		n += m.Error.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S3LockError_ErrDataFileIsMissing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrDataFileIsMissing != nil {
		l = m.ErrDataFileIsMissing.Size()
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	return n
}
func (m *S3LockError_ErrDataFileIsDeleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrDataFileIsDeleted != nil {
		l = m.ErrDataFileIsDeleted.Size()
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	return n
}
func (m *S3LockError_ErrAddLockFileFail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrAddLockFileFail != nil {
		l = m.ErrAddLockFileFail.Size()
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	return n
}
func (m *S3LockError_ErrDataFileIsLocked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrDataFileIsLocked != nil {
		l = m.ErrDataFileIsLocked.Size()
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	return n
}
func (m *S3LockError_ErrAddDeleteFileFail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrAddDeleteFileFail != nil {
		l = m.ErrAddDeleteFileFail.Size()
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	return n
}
func (m *S3LockErrorDataFileIsMissing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S3LockErrorDataFileIsDeleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S3LockErrorAddLockFileFail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S3LockErrorDataFileIsLocked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S3LockErrorAddDeleteFileFail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TryAddLockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OriDataFile)
	if l > 0 {
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	if m.OriStoreId != 0 {
		n += 1 + sovDisaggregated(uint64(m.OriStoreId))
	}
	if m.LockStoreId != 0 {
		n += 1 + sovDisaggregated(uint64(m.LockStoreId))
	}
	if m.UploadSeq != 0 {
		n += 1 + sovDisaggregated(uint64(m.UploadSeq))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TryAddLockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSuccess {
		n += 2
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TryMarkDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OriDataFile)
	if l > 0 {
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	if m.OriStoreId != 0 {
		n += 1 + sovDisaggregated(uint64(m.OriStoreId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TryMarkDeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSuccess {
		n += 2
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDisaggregated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDisaggregated(x uint64) (n int) {
	return sovDisaggregated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *S3LockError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S3LockError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S3LockError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrDataFileIsMissing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &S3LockErrorDataFileIsMissing{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Error = &S3LockError_ErrDataFileIsMissing{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrDataFileIsDeleted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &S3LockErrorDataFileIsDeleted{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Error = &S3LockError_ErrDataFileIsDeleted{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrAddLockFileFail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &S3LockErrorAddLockFileFail{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Error = &S3LockError_ErrAddLockFileFail{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrDataFileIsLocked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &S3LockErrorDataFileIsLocked{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Error = &S3LockError_ErrDataFileIsLocked{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrAddDeleteFileFail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &S3LockErrorAddDeleteFileFail{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Error = &S3LockError_ErrAddDeleteFileFail{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S3LockErrorDataFileIsMissing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S3LockErrorDataFileIsMissing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S3LockErrorDataFileIsMissing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S3LockErrorDataFileIsDeleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S3LockErrorDataFileIsDeleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S3LockErrorDataFileIsDeleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S3LockErrorAddLockFileFail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S3LockErrorAddLockFileFail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S3LockErrorAddLockFileFail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S3LockErrorDataFileIsLocked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S3LockErrorDataFileIsLocked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S3LockErrorDataFileIsLocked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S3LockErrorAddDeleteFileFail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S3LockErrorAddDeleteFileFail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S3LockErrorAddDeleteFileFail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TryAddLockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TryAddLockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TryAddLockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriDataFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriDataFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriStoreId", wireType)
			}
			m.OriStoreId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriStoreId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockStoreId", wireType)
			}
			m.LockStoreId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockStoreId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadSeq", wireType)
			}
			m.UploadSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UploadSeq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TryAddLockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TryAddLockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TryAddLockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuccess = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &S3LockError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TryMarkDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TryMarkDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TryMarkDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriDataFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriDataFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriStoreId", wireType)
			}
			m.OriStoreId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriStoreId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TryMarkDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TryMarkDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TryMarkDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuccess = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &S3LockError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDisaggregated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDisaggregated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDisaggregated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDisaggregated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDisaggregated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDisaggregated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDisaggregated = fmt.Errorf("proto: unexpected end of group")
)
