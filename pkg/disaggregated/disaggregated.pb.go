// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: disaggregated.proto

/*
Package disaggregated is a generated protocol buffer package.

It is generated from these files:

	disaggregated.proto

It has these top-level messages:

	S3LockResult
	Success
	NotOwner
	Conflict
	TryAddLockRequest
	TryAddLockResponse
	TryMarkDeleteRequest
	TryMarkDeleteResponse
	GetDisaggConfigRequest
	DisaggS3Config
	GetDisaggConfigResponse
	DisaggTaskMeta
	DisaggReadError
	EstablishDisaggTaskError
	ErrorRegion
	ErrorLocked
	ErrorOther
	EstablishDisaggTaskRequest
	EstablishDisaggTaskResponse
	CancelDisaggTaskRequest
	CancelDisaggTaskResponse
	FetchDisaggPagesRequest
	PagesPacket
*/
package disaggregated

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"
	coprocessor "github.com/pingcap/kvproto/pkg/coprocessor"

	kvrpcpb "github.com/pingcap/kvproto/pkg/kvrpcpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type S3LockResult struct {
	// Types that are valid to be assigned to Error:
	//	*S3LockResult_Success
	//	*S3LockResult_NotOwner
	//	*S3LockResult_Conflict
	Error isS3LockResult_Error `protobuf_oneof:"error"`
}

func (m *S3LockResult) Reset()                    { *m = S3LockResult{} }
func (m *S3LockResult) String() string            { return proto.CompactTextString(m) }
func (*S3LockResult) ProtoMessage()               {}
func (*S3LockResult) Descriptor() ([]byte, []int) { return fileDescriptorDisaggregated, []int{0} }

type isS3LockResult_Error interface {
	isS3LockResult_Error()
	MarshalTo([]byte) (int, error)
	Size() int
}

type S3LockResult_Success struct {
	Success *Success `protobuf:"bytes,1,opt,name=success,oneof"`
}
type S3LockResult_NotOwner struct {
	NotOwner *NotOwner `protobuf:"bytes,2,opt,name=not_owner,json=notOwner,oneof"`
}
type S3LockResult_Conflict struct {
	Conflict *Conflict `protobuf:"bytes,3,opt,name=conflict,oneof"`
}

func (*S3LockResult_Success) isS3LockResult_Error()  {}
func (*S3LockResult_NotOwner) isS3LockResult_Error() {}
func (*S3LockResult_Conflict) isS3LockResult_Error() {}

func (m *S3LockResult) GetError() isS3LockResult_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *S3LockResult) GetSuccess() *Success {
	if x, ok := m.GetError().(*S3LockResult_Success); ok {
		return x.Success
	}
	return nil
}

func (m *S3LockResult) GetNotOwner() *NotOwner {
	if x, ok := m.GetError().(*S3LockResult_NotOwner); ok {
		return x.NotOwner
	}
	return nil
}

func (m *S3LockResult) GetConflict() *Conflict {
	if x, ok := m.GetError().(*S3LockResult_Conflict); ok {
		return x.Conflict
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*S3LockResult) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _S3LockResult_OneofMarshaler, _S3LockResult_OneofUnmarshaler, _S3LockResult_OneofSizer, []interface{}{
		(*S3LockResult_Success)(nil),
		(*S3LockResult_NotOwner)(nil),
		(*S3LockResult_Conflict)(nil),
	}
}

func _S3LockResult_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*S3LockResult)
	// error
	switch x := m.Error.(type) {
	case *S3LockResult_Success:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Success); err != nil {
			return err
		}
	case *S3LockResult_NotOwner:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NotOwner); err != nil {
			return err
		}
	case *S3LockResult_Conflict:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Conflict); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("S3LockResult.Error has unexpected type %T", x)
	}
	return nil
}

func _S3LockResult_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*S3LockResult)
	switch tag {
	case 1: // error.success
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Success)
		err := b.DecodeMessage(msg)
		m.Error = &S3LockResult_Success{msg}
		return true, err
	case 2: // error.not_owner
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NotOwner)
		err := b.DecodeMessage(msg)
		m.Error = &S3LockResult_NotOwner{msg}
		return true, err
	case 3: // error.conflict
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Conflict)
		err := b.DecodeMessage(msg)
		m.Error = &S3LockResult_Conflict{msg}
		return true, err
	default:
		return false, nil
	}
}

func _S3LockResult_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*S3LockResult)
	// error
	switch x := m.Error.(type) {
	case *S3LockResult_Success:
		s := proto.Size(x.Success)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *S3LockResult_NotOwner:
		s := proto.Size(x.NotOwner)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *S3LockResult_Conflict:
		s := proto.Size(x.Conflict)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Success struct {
}

func (m *Success) Reset()                    { *m = Success{} }
func (m *Success) String() string            { return proto.CompactTextString(m) }
func (*Success) ProtoMessage()               {}
func (*Success) Descriptor() ([]byte, []int) { return fileDescriptorDisaggregated, []int{1} }

// Error caused by S3GC owner changed
// client should retry
type NotOwner struct {
}

func (m *NotOwner) Reset()                    { *m = NotOwner{} }
func (m *NotOwner) String() string            { return proto.CompactTextString(m) }
func (*NotOwner) ProtoMessage()               {}
func (*NotOwner) Descriptor() ([]byte, []int) { return fileDescriptorDisaggregated, []int{2} }

// Error caused by concurrency conflict,
// request cancel
type Conflict struct {
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *Conflict) Reset()                    { *m = Conflict{} }
func (m *Conflict) String() string            { return proto.CompactTextString(m) }
func (*Conflict) ProtoMessage()               {}
func (*Conflict) Descriptor() ([]byte, []int) { return fileDescriptorDisaggregated, []int{3} }

func (m *Conflict) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type TryAddLockRequest struct {
	// The data file key to add lock
	DataFileKey []byte `protobuf:"bytes,1,opt,name=data_file_key,json=dataFileKey,proto3" json:"data_file_key,omitempty"`
	// The lock store id
	LockStoreId uint64 `protobuf:"varint,3,opt,name=lock_store_id,json=lockStoreId,proto3" json:"lock_store_id,omitempty"`
	// The upload sequence number of lock store
	LockSeq uint64 `protobuf:"varint,4,opt,name=lock_seq,json=lockSeq,proto3" json:"lock_seq,omitempty"`
}

func (m *TryAddLockRequest) Reset()                    { *m = TryAddLockRequest{} }
func (m *TryAddLockRequest) String() string            { return proto.CompactTextString(m) }
func (*TryAddLockRequest) ProtoMessage()               {}
func (*TryAddLockRequest) Descriptor() ([]byte, []int) { return fileDescriptorDisaggregated, []int{4} }

func (m *TryAddLockRequest) GetDataFileKey() []byte {
	if m != nil {
		return m.DataFileKey
	}
	return nil
}

func (m *TryAddLockRequest) GetLockStoreId() uint64 {
	if m != nil {
		return m.LockStoreId
	}
	return 0
}

func (m *TryAddLockRequest) GetLockSeq() uint64 {
	if m != nil {
		return m.LockSeq
	}
	return 0
}

type TryAddLockResponse struct {
	Result *S3LockResult `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *TryAddLockResponse) Reset()                    { *m = TryAddLockResponse{} }
func (m *TryAddLockResponse) String() string            { return proto.CompactTextString(m) }
func (*TryAddLockResponse) ProtoMessage()               {}
func (*TryAddLockResponse) Descriptor() ([]byte, []int) { return fileDescriptorDisaggregated, []int{5} }

func (m *TryAddLockResponse) GetResult() *S3LockResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type TryMarkDeleteRequest struct {
	// The data file key to be marked as deleted
	DataFileKey []byte `protobuf:"bytes,1,opt,name=data_file_key,json=dataFileKey,proto3" json:"data_file_key,omitempty"`
}

func (m *TryMarkDeleteRequest) Reset()         { *m = TryMarkDeleteRequest{} }
func (m *TryMarkDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*TryMarkDeleteRequest) ProtoMessage()    {}
func (*TryMarkDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDisaggregated, []int{6}
}

func (m *TryMarkDeleteRequest) GetDataFileKey() []byte {
	if m != nil {
		return m.DataFileKey
	}
	return nil
}

type TryMarkDeleteResponse struct {
	Result *S3LockResult `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *TryMarkDeleteResponse) Reset()         { *m = TryMarkDeleteResponse{} }
func (m *TryMarkDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*TryMarkDeleteResponse) ProtoMessage()    {}
func (*TryMarkDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDisaggregated, []int{7}
}

func (m *TryMarkDeleteResponse) GetResult() *S3LockResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type GetDisaggConfigRequest struct {
}

func (m *GetDisaggConfigRequest) Reset()         { *m = GetDisaggConfigRequest{} }
func (m *GetDisaggConfigRequest) String() string { return proto.CompactTextString(m) }
func (*GetDisaggConfigRequest) ProtoMessage()    {}
func (*GetDisaggConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDisaggregated, []int{8}
}

type DisaggS3Config struct {
	Bucket   string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Root     string `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (m *DisaggS3Config) Reset()                    { *m = DisaggS3Config{} }
func (m *DisaggS3Config) String() string            { return proto.CompactTextString(m) }
func (*DisaggS3Config) ProtoMessage()               {}
func (*DisaggS3Config) Descriptor() ([]byte, []int) { return fileDescriptorDisaggregated, []int{9} }

func (m *DisaggS3Config) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *DisaggS3Config) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

func (m *DisaggS3Config) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

type GetDisaggConfigResponse struct {
	S3Config *DisaggS3Config `protobuf:"bytes,1,opt,name=s3_config,json=s3Config" json:"s3_config,omitempty"`
}

func (m *GetDisaggConfigResponse) Reset()         { *m = GetDisaggConfigResponse{} }
func (m *GetDisaggConfigResponse) String() string { return proto.CompactTextString(m) }
func (*GetDisaggConfigResponse) ProtoMessage()    {}
func (*GetDisaggConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDisaggregated, []int{10}
}

func (m *GetDisaggConfigResponse) GetS3Config() *DisaggS3Config {
	if m != nil {
		return m.S3Config
	}
	return nil
}

type DisaggTaskMeta struct {
	StartTs uint64 `protobuf:"varint,1,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	// gather_id + query_ts + server_id + local_query_id to represent a global unique query.
	GatherId     int64              `protobuf:"varint,9,opt,name=gather_id,json=gatherId,proto3" json:"gather_id,omitempty"`
	QueryTs      uint64             `protobuf:"varint,2,opt,name=query_ts,json=queryTs,proto3" json:"query_ts,omitempty"`
	ServerId     uint64             `protobuf:"varint,3,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	LocalQueryId uint64             `protobuf:"varint,4,opt,name=local_query_id,json=localQueryId,proto3" json:"local_query_id,omitempty"`
	TaskId       int64              `protobuf:"varint,5,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	ExecutorId   string             `protobuf:"bytes,6,opt,name=executor_id,json=executorId,proto3" json:"executor_id,omitempty"`
	KeyspaceId   uint32             `protobuf:"varint,7,opt,name=keyspace_id,json=keyspaceId,proto3" json:"keyspace_id,omitempty"`
	ApiVersion   kvrpcpb.APIVersion `protobuf:"varint,8,opt,name=api_version,json=apiVersion,proto3,enum=kvrpcpb.APIVersion" json:"api_version,omitempty"`
}

func (m *DisaggTaskMeta) Reset()                    { *m = DisaggTaskMeta{} }
func (m *DisaggTaskMeta) String() string            { return proto.CompactTextString(m) }
func (*DisaggTaskMeta) ProtoMessage()               {}
func (*DisaggTaskMeta) Descriptor() ([]byte, []int) { return fileDescriptorDisaggregated, []int{11} }

func (m *DisaggTaskMeta) GetStartTs() uint64 {
	if m != nil {
		return m.StartTs
	}
	return 0
}

func (m *DisaggTaskMeta) GetGatherId() int64 {
	if m != nil {
		return m.GatherId
	}
	return 0
}

func (m *DisaggTaskMeta) GetQueryTs() uint64 {
	if m != nil {
		return m.QueryTs
	}
	return 0
}

func (m *DisaggTaskMeta) GetServerId() uint64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *DisaggTaskMeta) GetLocalQueryId() uint64 {
	if m != nil {
		return m.LocalQueryId
	}
	return 0
}

func (m *DisaggTaskMeta) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *DisaggTaskMeta) GetExecutorId() string {
	if m != nil {
		return m.ExecutorId
	}
	return ""
}

func (m *DisaggTaskMeta) GetKeyspaceId() uint32 {
	if m != nil {
		return m.KeyspaceId
	}
	return 0
}

func (m *DisaggTaskMeta) GetApiVersion() kvrpcpb.APIVersion {
	if m != nil {
		return m.ApiVersion
	}
	return kvrpcpb.APIVersion_V1
}

type DisaggReadError struct {
	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *DisaggReadError) Reset()                    { *m = DisaggReadError{} }
func (m *DisaggReadError) String() string            { return proto.CompactTextString(m) }
func (*DisaggReadError) ProtoMessage()               {}
func (*DisaggReadError) Descriptor() ([]byte, []int) { return fileDescriptorDisaggregated, []int{12} }

func (m *DisaggReadError) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DisaggReadError) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type EstablishDisaggTaskError struct {
	// Types that are valid to be assigned to Errors:
	//	*EstablishDisaggTaskError_ErrorRegion
	//	*EstablishDisaggTaskError_ErrorLocked
	//	*EstablishDisaggTaskError_ErrorOther
	Errors isEstablishDisaggTaskError_Errors `protobuf_oneof:"errors"`
}

func (m *EstablishDisaggTaskError) Reset()         { *m = EstablishDisaggTaskError{} }
func (m *EstablishDisaggTaskError) String() string { return proto.CompactTextString(m) }
func (*EstablishDisaggTaskError) ProtoMessage()    {}
func (*EstablishDisaggTaskError) Descriptor() ([]byte, []int) {
	return fileDescriptorDisaggregated, []int{13}
}

type isEstablishDisaggTaskError_Errors interface {
	isEstablishDisaggTaskError_Errors()
	MarshalTo([]byte) (int, error)
	Size() int
}

type EstablishDisaggTaskError_ErrorRegion struct {
	ErrorRegion *ErrorRegion `protobuf:"bytes,1,opt,name=error_region,json=errorRegion,oneof"`
}
type EstablishDisaggTaskError_ErrorLocked struct {
	ErrorLocked *ErrorLocked `protobuf:"bytes,2,opt,name=error_locked,json=errorLocked,oneof"`
}
type EstablishDisaggTaskError_ErrorOther struct {
	ErrorOther *ErrorOther `protobuf:"bytes,99,opt,name=error_other,json=errorOther,oneof"`
}

func (*EstablishDisaggTaskError_ErrorRegion) isEstablishDisaggTaskError_Errors() {}
func (*EstablishDisaggTaskError_ErrorLocked) isEstablishDisaggTaskError_Errors() {}
func (*EstablishDisaggTaskError_ErrorOther) isEstablishDisaggTaskError_Errors()  {}

func (m *EstablishDisaggTaskError) GetErrors() isEstablishDisaggTaskError_Errors {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *EstablishDisaggTaskError) GetErrorRegion() *ErrorRegion {
	if x, ok := m.GetErrors().(*EstablishDisaggTaskError_ErrorRegion); ok {
		return x.ErrorRegion
	}
	return nil
}

func (m *EstablishDisaggTaskError) GetErrorLocked() *ErrorLocked {
	if x, ok := m.GetErrors().(*EstablishDisaggTaskError_ErrorLocked); ok {
		return x.ErrorLocked
	}
	return nil
}

func (m *EstablishDisaggTaskError) GetErrorOther() *ErrorOther {
	if x, ok := m.GetErrors().(*EstablishDisaggTaskError_ErrorOther); ok {
		return x.ErrorOther
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EstablishDisaggTaskError) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EstablishDisaggTaskError_OneofMarshaler, _EstablishDisaggTaskError_OneofUnmarshaler, _EstablishDisaggTaskError_OneofSizer, []interface{}{
		(*EstablishDisaggTaskError_ErrorRegion)(nil),
		(*EstablishDisaggTaskError_ErrorLocked)(nil),
		(*EstablishDisaggTaskError_ErrorOther)(nil),
	}
}

func _EstablishDisaggTaskError_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EstablishDisaggTaskError)
	// errors
	switch x := m.Errors.(type) {
	case *EstablishDisaggTaskError_ErrorRegion:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ErrorRegion); err != nil {
			return err
		}
	case *EstablishDisaggTaskError_ErrorLocked:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ErrorLocked); err != nil {
			return err
		}
	case *EstablishDisaggTaskError_ErrorOther:
		_ = b.EncodeVarint(99<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ErrorOther); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EstablishDisaggTaskError.Errors has unexpected type %T", x)
	}
	return nil
}

func _EstablishDisaggTaskError_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EstablishDisaggTaskError)
	switch tag {
	case 1: // errors.error_region
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ErrorRegion)
		err := b.DecodeMessage(msg)
		m.Errors = &EstablishDisaggTaskError_ErrorRegion{msg}
		return true, err
	case 2: // errors.error_locked
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ErrorLocked)
		err := b.DecodeMessage(msg)
		m.Errors = &EstablishDisaggTaskError_ErrorLocked{msg}
		return true, err
	case 99: // errors.error_other
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ErrorOther)
		err := b.DecodeMessage(msg)
		m.Errors = &EstablishDisaggTaskError_ErrorOther{msg}
		return true, err
	default:
		return false, nil
	}
}

func _EstablishDisaggTaskError_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EstablishDisaggTaskError)
	// errors
	switch x := m.Errors.(type) {
	case *EstablishDisaggTaskError_ErrorRegion:
		s := proto.Size(x.ErrorRegion)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EstablishDisaggTaskError_ErrorLocked:
		s := proto.Size(x.ErrorLocked)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EstablishDisaggTaskError_ErrorOther:
		s := proto.Size(x.ErrorOther)
		n += proto.SizeVarint(99<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ErrorRegion struct {
	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	// The read node needs to update its region cache about these regions.
	RegionIds []uint64 `protobuf:"varint,2,rep,packed,name=region_ids,json=regionIds" json:"region_ids,omitempty"`
}

func (m *ErrorRegion) Reset()                    { *m = ErrorRegion{} }
func (m *ErrorRegion) String() string            { return proto.CompactTextString(m) }
func (*ErrorRegion) ProtoMessage()               {}
func (*ErrorRegion) Descriptor() ([]byte, []int) { return fileDescriptorDisaggregated, []int{14} }

func (m *ErrorRegion) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ErrorRegion) GetRegionIds() []uint64 {
	if m != nil {
		return m.RegionIds
	}
	return nil
}

type ErrorLocked struct {
	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	// The read node needs to resolve these locks.
	Locked []*kvrpcpb.LockInfo `protobuf:"bytes,2,rep,name=locked" json:"locked,omitempty"`
}

func (m *ErrorLocked) Reset()                    { *m = ErrorLocked{} }
func (m *ErrorLocked) String() string            { return proto.CompactTextString(m) }
func (*ErrorLocked) ProtoMessage()               {}
func (*ErrorLocked) Descriptor() ([]byte, []int) { return fileDescriptorDisaggregated, []int{15} }

func (m *ErrorLocked) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ErrorLocked) GetLocked() []*kvrpcpb.LockInfo {
	if m != nil {
		return m.Locked
	}
	return nil
}

type ErrorOther struct {
	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *ErrorOther) Reset()                    { *m = ErrorOther{} }
func (m *ErrorOther) String() string            { return proto.CompactTextString(m) }
func (*ErrorOther) ProtoMessage()               {}
func (*ErrorOther) Descriptor() ([]byte, []int) { return fileDescriptorDisaggregated, []int{16} }

func (m *ErrorOther) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ErrorOther) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type EstablishDisaggTaskRequest struct {
	Meta    *DisaggTaskMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Address string          `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// The write node needs to ensure that subsequent
	// FetchDisaggPagesRequest can be processed within timeout_s.
	// unit: seconds
	TimeoutS int64 `protobuf:"varint,3,opt,name=timeout_s,json=timeoutS,proto3" json:"timeout_s,omitempty"`
	// The key ranges, Region meta that read node need to execute TableScan
	Regions   []*coprocessor.RegionInfo `protobuf:"bytes,4,rep,name=regions" json:"regions,omitempty"`
	SchemaVer int64                     `protobuf:"varint,5,opt,name=schema_ver,json=schemaVer,proto3" json:"schema_ver,omitempty"`
	// Used for PartitionTableScan
	TableRegions []*coprocessor.TableRegions `protobuf:"bytes,6,rep,name=table_regions,json=tableRegions" json:"table_regions,omitempty"`
	// The encoded TableScan/PartitionTableScan + Selection.
	EncodedPlan []byte `protobuf:"bytes,7,opt,name=encoded_plan,json=encodedPlan,proto3" json:"encoded_plan,omitempty"`
}

func (m *EstablishDisaggTaskRequest) Reset()         { *m = EstablishDisaggTaskRequest{} }
func (m *EstablishDisaggTaskRequest) String() string { return proto.CompactTextString(m) }
func (*EstablishDisaggTaskRequest) ProtoMessage()    {}
func (*EstablishDisaggTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDisaggregated, []int{17}
}

func (m *EstablishDisaggTaskRequest) GetMeta() *DisaggTaskMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *EstablishDisaggTaskRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EstablishDisaggTaskRequest) GetTimeoutS() int64 {
	if m != nil {
		return m.TimeoutS
	}
	return 0
}

func (m *EstablishDisaggTaskRequest) GetRegions() []*coprocessor.RegionInfo {
	if m != nil {
		return m.Regions
	}
	return nil
}

func (m *EstablishDisaggTaskRequest) GetSchemaVer() int64 {
	if m != nil {
		return m.SchemaVer
	}
	return 0
}

func (m *EstablishDisaggTaskRequest) GetTableRegions() []*coprocessor.TableRegions {
	if m != nil {
		return m.TableRegions
	}
	return nil
}

func (m *EstablishDisaggTaskRequest) GetEncodedPlan() []byte {
	if m != nil {
		return m.EncodedPlan
	}
	return nil
}

type EstablishDisaggTaskResponse struct {
	Error *EstablishDisaggTaskError `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// Write node maintains a snapshot with a lease time.
	// Read node should read the delta pages
	// (ColumnFileInMemory and ColumnFileTiny)
	// along with this store_id and snapshot_id.
	StoreId    uint64          `protobuf:"varint,3,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	SnapshotId *DisaggTaskMeta `protobuf:"bytes,4,opt,name=snapshot_id,json=snapshotId" json:"snapshot_id,omitempty"`
	// Serialized disaggregated tasks (per physical table)
	Tables [][]byte `protobuf:"bytes,5,rep,name=tables" json:"tables,omitempty"`
}

func (m *EstablishDisaggTaskResponse) Reset()         { *m = EstablishDisaggTaskResponse{} }
func (m *EstablishDisaggTaskResponse) String() string { return proto.CompactTextString(m) }
func (*EstablishDisaggTaskResponse) ProtoMessage()    {}
func (*EstablishDisaggTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDisaggregated, []int{18}
}

func (m *EstablishDisaggTaskResponse) GetError() *EstablishDisaggTaskError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *EstablishDisaggTaskResponse) GetStoreId() uint64 {
	if m != nil {
		return m.StoreId
	}
	return 0
}

func (m *EstablishDisaggTaskResponse) GetSnapshotId() *DisaggTaskMeta {
	if m != nil {
		return m.SnapshotId
	}
	return nil
}

func (m *EstablishDisaggTaskResponse) GetTables() [][]byte {
	if m != nil {
		return m.Tables
	}
	return nil
}

type CancelDisaggTaskRequest struct {
	Meta *DisaggTaskMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
}

func (m *CancelDisaggTaskRequest) Reset()         { *m = CancelDisaggTaskRequest{} }
func (m *CancelDisaggTaskRequest) String() string { return proto.CompactTextString(m) }
func (*CancelDisaggTaskRequest) ProtoMessage()    {}
func (*CancelDisaggTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDisaggregated, []int{19}
}

func (m *CancelDisaggTaskRequest) GetMeta() *DisaggTaskMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type CancelDisaggTaskResponse struct {
}

func (m *CancelDisaggTaskResponse) Reset()         { *m = CancelDisaggTaskResponse{} }
func (m *CancelDisaggTaskResponse) String() string { return proto.CompactTextString(m) }
func (*CancelDisaggTaskResponse) ProtoMessage()    {}
func (*CancelDisaggTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDisaggregated, []int{20}
}

type FetchDisaggPagesRequest struct {
	// The snapshot id to fetch pages
	SnapshotId *DisaggTaskMeta `protobuf:"bytes,1,opt,name=snapshot_id,json=snapshotId" json:"snapshot_id,omitempty"`
	TableId    int64           `protobuf:"varint,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	SegmentId  uint64          `protobuf:"varint,3,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	// It must be a subset of the delta pages ids returned
	// in EstablishDisaggTaskResponse.segments
	PageIds []uint64 `protobuf:"varint,4,rep,packed,name=page_ids,json=pageIds" json:"page_ids,omitempty"`
}

func (m *FetchDisaggPagesRequest) Reset()         { *m = FetchDisaggPagesRequest{} }
func (m *FetchDisaggPagesRequest) String() string { return proto.CompactTextString(m) }
func (*FetchDisaggPagesRequest) ProtoMessage()    {}
func (*FetchDisaggPagesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDisaggregated, []int{21}
}

func (m *FetchDisaggPagesRequest) GetSnapshotId() *DisaggTaskMeta {
	if m != nil {
		return m.SnapshotId
	}
	return nil
}

func (m *FetchDisaggPagesRequest) GetTableId() int64 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *FetchDisaggPagesRequest) GetSegmentId() uint64 {
	if m != nil {
		return m.SegmentId
	}
	return 0
}

func (m *FetchDisaggPagesRequest) GetPageIds() []uint64 {
	if m != nil {
		return m.PageIds
	}
	return nil
}

type PagesPacket struct {
	Error *DisaggReadError `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// Serialized column file data
	// * ColumnFilePersisted alone with its schema, page data, field offsets
	Pages [][]byte `protobuf:"bytes,2,rep,name=pages" json:"pages,omitempty"`
	// * ColumnFileInMemory alone with its serialized block
	Chunks [][]byte `protobuf:"bytes,3,rep,name=chunks" json:"chunks,omitempty"`
	// Return tipb.SelectResponse.execution_summaries in the
	// last packet
	Summaries [][]byte `protobuf:"bytes,4,rep,name=summaries" json:"summaries,omitempty"`
}

func (m *PagesPacket) Reset()                    { *m = PagesPacket{} }
func (m *PagesPacket) String() string            { return proto.CompactTextString(m) }
func (*PagesPacket) ProtoMessage()               {}
func (*PagesPacket) Descriptor() ([]byte, []int) { return fileDescriptorDisaggregated, []int{22} }

func (m *PagesPacket) GetError() *DisaggReadError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *PagesPacket) GetPages() [][]byte {
	if m != nil {
		return m.Pages
	}
	return nil
}

func (m *PagesPacket) GetChunks() [][]byte {
	if m != nil {
		return m.Chunks
	}
	return nil
}

func (m *PagesPacket) GetSummaries() [][]byte {
	if m != nil {
		return m.Summaries
	}
	return nil
}

func init() {
	proto.RegisterType((*S3LockResult)(nil), "disaggregated.S3LockResult")
	proto.RegisterType((*Success)(nil), "disaggregated.Success")
	proto.RegisterType((*NotOwner)(nil), "disaggregated.NotOwner")
	proto.RegisterType((*Conflict)(nil), "disaggregated.Conflict")
	proto.RegisterType((*TryAddLockRequest)(nil), "disaggregated.TryAddLockRequest")
	proto.RegisterType((*TryAddLockResponse)(nil), "disaggregated.TryAddLockResponse")
	proto.RegisterType((*TryMarkDeleteRequest)(nil), "disaggregated.TryMarkDeleteRequest")
	proto.RegisterType((*TryMarkDeleteResponse)(nil), "disaggregated.TryMarkDeleteResponse")
	proto.RegisterType((*GetDisaggConfigRequest)(nil), "disaggregated.GetDisaggConfigRequest")
	proto.RegisterType((*DisaggS3Config)(nil), "disaggregated.DisaggS3Config")
	proto.RegisterType((*GetDisaggConfigResponse)(nil), "disaggregated.GetDisaggConfigResponse")
	proto.RegisterType((*DisaggTaskMeta)(nil), "disaggregated.DisaggTaskMeta")
	proto.RegisterType((*DisaggReadError)(nil), "disaggregated.DisaggReadError")
	proto.RegisterType((*EstablishDisaggTaskError)(nil), "disaggregated.EstablishDisaggTaskError")
	proto.RegisterType((*ErrorRegion)(nil), "disaggregated.ErrorRegion")
	proto.RegisterType((*ErrorLocked)(nil), "disaggregated.ErrorLocked")
	proto.RegisterType((*ErrorOther)(nil), "disaggregated.ErrorOther")
	proto.RegisterType((*EstablishDisaggTaskRequest)(nil), "disaggregated.EstablishDisaggTaskRequest")
	proto.RegisterType((*EstablishDisaggTaskResponse)(nil), "disaggregated.EstablishDisaggTaskResponse")
	proto.RegisterType((*CancelDisaggTaskRequest)(nil), "disaggregated.CancelDisaggTaskRequest")
	proto.RegisterType((*CancelDisaggTaskResponse)(nil), "disaggregated.CancelDisaggTaskResponse")
	proto.RegisterType((*FetchDisaggPagesRequest)(nil), "disaggregated.FetchDisaggPagesRequest")
	proto.RegisterType((*PagesPacket)(nil), "disaggregated.PagesPacket")
}
func (m *S3LockResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S3LockResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		nn1, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *S3LockResult_Success) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Success != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.Success.Size()))
		n2, err := m.Success.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *S3LockResult_NotOwner) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NotOwner != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.NotOwner.Size()))
		n3, err := m.NotOwner.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *S3LockResult_Conflict) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Conflict != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.Conflict.Size()))
		n4, err := m.Conflict.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Success) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Success) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *NotOwner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotOwner) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Conflict) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Conflict) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	return i, nil
}

func (m *TryAddLockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TryAddLockRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DataFileKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(len(m.DataFileKey)))
		i += copy(dAtA[i:], m.DataFileKey)
	}
	if m.LockStoreId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.LockStoreId))
	}
	if m.LockSeq != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.LockSeq))
	}
	return i, nil
}

func (m *TryAddLockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TryAddLockResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.Result.Size()))
		n5, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *TryMarkDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TryMarkDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DataFileKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(len(m.DataFileKey)))
		i += copy(dAtA[i:], m.DataFileKey)
	}
	return i, nil
}

func (m *TryMarkDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TryMarkDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.Result.Size()))
		n6, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *GetDisaggConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDisaggConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DisaggS3Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisaggS3Config) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Bucket) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(len(m.Bucket)))
		i += copy(dAtA[i:], m.Bucket)
	}
	if len(m.Root) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(len(m.Root)))
		i += copy(dAtA[i:], m.Root)
	}
	if len(m.Endpoint) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(len(m.Endpoint)))
		i += copy(dAtA[i:], m.Endpoint)
	}
	return i, nil
}

func (m *GetDisaggConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDisaggConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.S3Config != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.S3Config.Size()))
		n7, err := m.S3Config.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *DisaggTaskMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisaggTaskMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartTs != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.StartTs))
	}
	if m.QueryTs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.QueryTs))
	}
	if m.ServerId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.ServerId))
	}
	if m.LocalQueryId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.LocalQueryId))
	}
	if m.TaskId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.TaskId))
	}
	if len(m.ExecutorId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(len(m.ExecutorId)))
		i += copy(dAtA[i:], m.ExecutorId)
	}
	if m.KeyspaceId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.KeyspaceId))
	}
	if m.ApiVersion != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.ApiVersion))
	}
	if m.GatherId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.GatherId))
	}
	return i, nil
}

func (m *DisaggReadError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisaggReadError) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *EstablishDisaggTaskError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstablishDisaggTaskError) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errors != nil {
		nn8, err := m.Errors.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn8
	}
	return i, nil
}

func (m *EstablishDisaggTaskError_ErrorRegion) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ErrorRegion != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.ErrorRegion.Size()))
		n9, err := m.ErrorRegion.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *EstablishDisaggTaskError_ErrorLocked) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ErrorLocked != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.ErrorLocked.Size()))
		n10, err := m.ErrorLocked.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *EstablishDisaggTaskError_ErrorOther) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ErrorOther != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.ErrorOther.Size()))
		n11, err := m.ErrorOther.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *ErrorRegion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorRegion) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.RegionIds) > 0 {
		dAtA13 := make([]byte, len(m.RegionIds)*10)
		var j12 int
		for _, num := range m.RegionIds {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(j12))
		i += copy(dAtA[i:], dAtA13[:j12])
	}
	return i, nil
}

func (m *ErrorLocked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorLocked) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Locked) > 0 {
		for _, msg := range m.Locked {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDisaggregated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ErrorOther) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorOther) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *EstablishDisaggTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstablishDisaggTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.Meta.Size()))
		n14, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.TimeoutS != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.TimeoutS))
	}
	if len(m.Regions) > 0 {
		for _, msg := range m.Regions {
			dAtA[i] = 0x22
			i++
			i = encodeVarintDisaggregated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.SchemaVer != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.SchemaVer))
	}
	if len(m.TableRegions) > 0 {
		for _, msg := range m.TableRegions {
			dAtA[i] = 0x32
			i++
			i = encodeVarintDisaggregated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.EncodedPlan) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(len(m.EncodedPlan)))
		i += copy(dAtA[i:], m.EncodedPlan)
	}
	return i, nil
}

func (m *EstablishDisaggTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstablishDisaggTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.Error.Size()))
		n15, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.StoreId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.StoreId))
	}
	if m.SnapshotId != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.SnapshotId.Size()))
		n16, err := m.SnapshotId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if len(m.Tables) > 0 {
		for _, b := range m.Tables {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintDisaggregated(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *CancelDisaggTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelDisaggTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.Meta.Size()))
		n17, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *CancelDisaggTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelDisaggTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *FetchDisaggPagesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchDisaggPagesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SnapshotId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.SnapshotId.Size()))
		n18, err := m.SnapshotId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.TableId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.TableId))
	}
	if m.SegmentId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.SegmentId))
	}
	if len(m.PageIds) > 0 {
		dAtA20 := make([]byte, len(m.PageIds)*10)
		var j19 int
		for _, num := range m.PageIds {
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(j19))
		i += copy(dAtA[i:], dAtA20[:j19])
	}
	return i, nil
}

func (m *PagesPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PagesPacket) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDisaggregated(dAtA, i, uint64(m.Error.Size()))
		n21, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if len(m.Pages) > 0 {
		for _, b := range m.Pages {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDisaggregated(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.Chunks) > 0 {
		for _, b := range m.Chunks {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintDisaggregated(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.Summaries) > 0 {
		for _, b := range m.Summaries {
			dAtA[i] = 0x22
			i++
			i = encodeVarintDisaggregated(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func encodeVarintDisaggregated(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *S3LockResult) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		n += m.Error.Size()
	}
	return n
}

func (m *S3LockResult_Success) Size() (n int) {
	var l int
	_ = l
	if m.Success != nil {
		l = m.Success.Size()
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	return n
}
func (m *S3LockResult_NotOwner) Size() (n int) {
	var l int
	_ = l
	if m.NotOwner != nil {
		l = m.NotOwner.Size()
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	return n
}
func (m *S3LockResult_Conflict) Size() (n int) {
	var l int
	_ = l
	if m.Conflict != nil {
		l = m.Conflict.Size()
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	return n
}
func (m *Success) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *NotOwner) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Conflict) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	return n
}

func (m *TryAddLockRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DataFileKey)
	if l > 0 {
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	if m.LockStoreId != 0 {
		n += 1 + sovDisaggregated(uint64(m.LockStoreId))
	}
	if m.LockSeq != 0 {
		n += 1 + sovDisaggregated(uint64(m.LockSeq))
	}
	return n
}

func (m *TryAddLockResponse) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	return n
}

func (m *TryMarkDeleteRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DataFileKey)
	if l > 0 {
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	return n
}

func (m *TryMarkDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	return n
}

func (m *GetDisaggConfigRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DisaggS3Config) Size() (n int) {
	var l int
	_ = l
	l = len(m.Bucket)
	if l > 0 {
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	return n
}

func (m *GetDisaggConfigResponse) Size() (n int) {
	var l int
	_ = l
	if m.S3Config != nil {
		l = m.S3Config.Size()
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	return n
}

func (m *DisaggTaskMeta) Size() (n int) {
	var l int
	_ = l
	if m.StartTs != 0 {
		n += 1 + sovDisaggregated(uint64(m.StartTs))
	}
	if m.QueryTs != 0 {
		n += 1 + sovDisaggregated(uint64(m.QueryTs))
	}
	if m.ServerId != 0 {
		n += 1 + sovDisaggregated(uint64(m.ServerId))
	}
	if m.LocalQueryId != 0 {
		n += 1 + sovDisaggregated(uint64(m.LocalQueryId))
	}
	if m.TaskId != 0 {
		n += 1 + sovDisaggregated(uint64(m.TaskId))
	}
	l = len(m.ExecutorId)
	if l > 0 {
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	if m.KeyspaceId != 0 {
		n += 1 + sovDisaggregated(uint64(m.KeyspaceId))
	}
	if m.ApiVersion != 0 {
		n += 1 + sovDisaggregated(uint64(m.ApiVersion))
	}
	if m.GatherId != 0 {
		n += 1 + sovDisaggregated(uint64(m.GatherId))
	}
	return n
}

func (m *DisaggReadError) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDisaggregated(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	return n
}

func (m *EstablishDisaggTaskError) Size() (n int) {
	var l int
	_ = l
	if m.Errors != nil {
		n += m.Errors.Size()
	}
	return n
}

func (m *EstablishDisaggTaskError_ErrorRegion) Size() (n int) {
	var l int
	_ = l
	if m.ErrorRegion != nil {
		l = m.ErrorRegion.Size()
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	return n
}
func (m *EstablishDisaggTaskError_ErrorLocked) Size() (n int) {
	var l int
	_ = l
	if m.ErrorLocked != nil {
		l = m.ErrorLocked.Size()
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	return n
}
func (m *EstablishDisaggTaskError_ErrorOther) Size() (n int) {
	var l int
	_ = l
	if m.ErrorOther != nil {
		l = m.ErrorOther.Size()
		n += 2 + l + sovDisaggregated(uint64(l))
	}
	return n
}
func (m *ErrorRegion) Size() (n int) {
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	if len(m.RegionIds) > 0 {
		l = 0
		for _, e := range m.RegionIds {
			l += sovDisaggregated(uint64(e))
		}
		n += 1 + sovDisaggregated(uint64(l)) + l
	}
	return n
}

func (m *ErrorLocked) Size() (n int) {
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	if len(m.Locked) > 0 {
		for _, e := range m.Locked {
			l = e.Size()
			n += 1 + l + sovDisaggregated(uint64(l))
		}
	}
	return n
}

func (m *ErrorOther) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDisaggregated(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	return n
}

func (m *EstablishDisaggTaskRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	if m.TimeoutS != 0 {
		n += 1 + sovDisaggregated(uint64(m.TimeoutS))
	}
	if len(m.Regions) > 0 {
		for _, e := range m.Regions {
			l = e.Size()
			n += 1 + l + sovDisaggregated(uint64(l))
		}
	}
	if m.SchemaVer != 0 {
		n += 1 + sovDisaggregated(uint64(m.SchemaVer))
	}
	if len(m.TableRegions) > 0 {
		for _, e := range m.TableRegions {
			l = e.Size()
			n += 1 + l + sovDisaggregated(uint64(l))
		}
	}
	l = len(m.EncodedPlan)
	if l > 0 {
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	return n
}

func (m *EstablishDisaggTaskResponse) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	if m.StoreId != 0 {
		n += 1 + sovDisaggregated(uint64(m.StoreId))
	}
	if m.SnapshotId != nil {
		l = m.SnapshotId.Size()
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	if len(m.Tables) > 0 {
		for _, b := range m.Tables {
			l = len(b)
			n += 1 + l + sovDisaggregated(uint64(l))
		}
	}
	return n
}

func (m *CancelDisaggTaskRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	return n
}

func (m *CancelDisaggTaskResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *FetchDisaggPagesRequest) Size() (n int) {
	var l int
	_ = l
	if m.SnapshotId != nil {
		l = m.SnapshotId.Size()
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	if m.TableId != 0 {
		n += 1 + sovDisaggregated(uint64(m.TableId))
	}
	if m.SegmentId != 0 {
		n += 1 + sovDisaggregated(uint64(m.SegmentId))
	}
	if len(m.PageIds) > 0 {
		l = 0
		for _, e := range m.PageIds {
			l += sovDisaggregated(uint64(e))
		}
		n += 1 + sovDisaggregated(uint64(l)) + l
	}
	return n
}

func (m *PagesPacket) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovDisaggregated(uint64(l))
	}
	if len(m.Pages) > 0 {
		for _, b := range m.Pages {
			l = len(b)
			n += 1 + l + sovDisaggregated(uint64(l))
		}
	}
	if len(m.Chunks) > 0 {
		for _, b := range m.Chunks {
			l = len(b)
			n += 1 + l + sovDisaggregated(uint64(l))
		}
	}
	if len(m.Summaries) > 0 {
		for _, b := range m.Summaries {
			l = len(b)
			n += 1 + l + sovDisaggregated(uint64(l))
		}
	}
	return n
}

func sovDisaggregated(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDisaggregated(x uint64) (n int) {
	return sovDisaggregated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *S3LockResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S3LockResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S3LockResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Success{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Error = &S3LockResult_Success{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotOwner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NotOwner{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Error = &S3LockResult_NotOwner{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conflict", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Conflict{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Error = &S3LockResult_Conflict{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Success) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Success: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Success: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotOwner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotOwner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotOwner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Conflict) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Conflict: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Conflict: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TryAddLockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TryAddLockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TryAddLockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataFileKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataFileKey = append(m.DataFileKey[:0], dAtA[iNdEx:postIndex]...)
			if m.DataFileKey == nil {
				m.DataFileKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockStoreId", wireType)
			}
			m.LockStoreId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockStoreId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockSeq", wireType)
			}
			m.LockSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockSeq |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TryAddLockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TryAddLockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TryAddLockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &S3LockResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TryMarkDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TryMarkDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TryMarkDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataFileKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataFileKey = append(m.DataFileKey[:0], dAtA[iNdEx:postIndex]...)
			if m.DataFileKey == nil {
				m.DataFileKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TryMarkDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TryMarkDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TryMarkDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &S3LockResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDisaggConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDisaggConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDisaggConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisaggS3Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisaggS3Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisaggS3Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bucket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bucket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDisaggConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDisaggConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDisaggConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S3Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S3Config == nil {
				m.S3Config = &DisaggS3Config{}
			}
			if err := m.S3Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisaggTaskMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisaggTaskMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisaggTaskMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
			}
			m.StartTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryTs", wireType)
			}
			m.QueryTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryTs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalQueryId", wireType)
			}
			m.LocalQueryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalQueryId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyspaceId", wireType)
			}
			m.KeyspaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyspaceId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiVersion", wireType)
			}
			m.ApiVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiVersion |= (kvrpcpb.APIVersion(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatherId", wireType)
			}
			m.GatherId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GatherId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisaggReadError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisaggReadError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisaggReadError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstablishDisaggTaskError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstablishDisaggTaskError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstablishDisaggTaskError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorRegion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ErrorRegion{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Errors = &EstablishDisaggTaskError_ErrorRegion{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorLocked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ErrorLocked{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Errors = &EstablishDisaggTaskError_ErrorLocked{v}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorOther", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ErrorOther{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Errors = &EstablishDisaggTaskError_ErrorOther{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorRegion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorRegion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorRegion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDisaggregated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RegionIds = append(m.RegionIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDisaggregated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDisaggregated
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDisaggregated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RegionIds = append(m.RegionIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorLocked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorLocked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorLocked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locked = append(m.Locked, &kvrpcpb.LockInfo{})
			if err := m.Locked[len(m.Locked)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorOther) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorOther: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorOther: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstablishDisaggTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstablishDisaggTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstablishDisaggTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &DisaggTaskMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutS", wireType)
			}
			m.TimeoutS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutS |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Regions = append(m.Regions, &coprocessor.RegionInfo{})
			if err := m.Regions[len(m.Regions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaVer", wireType)
			}
			m.SchemaVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaVer |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableRegions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableRegions = append(m.TableRegions, &coprocessor.TableRegions{})
			if err := m.TableRegions[len(m.TableRegions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedPlan", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedPlan = append(m.EncodedPlan[:0], dAtA[iNdEx:postIndex]...)
			if m.EncodedPlan == nil {
				m.EncodedPlan = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstablishDisaggTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstablishDisaggTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstablishDisaggTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &EstablishDisaggTaskError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			m.StoreId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SnapshotId == nil {
				m.SnapshotId = &DisaggTaskMeta{}
			}
			if err := m.SnapshotId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tables", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tables = append(m.Tables, make([]byte, postIndex-iNdEx))
			copy(m.Tables[len(m.Tables)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelDisaggTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelDisaggTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelDisaggTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &DisaggTaskMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelDisaggTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelDisaggTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelDisaggTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchDisaggPagesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchDisaggPagesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchDisaggPagesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SnapshotId == nil {
				m.SnapshotId = &DisaggTaskMeta{}
			}
			if err := m.SnapshotId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			m.TableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentId", wireType)
			}
			m.SegmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDisaggregated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PageIds = append(m.PageIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDisaggregated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDisaggregated
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDisaggregated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PageIds = append(m.PageIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PageIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PagesPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PagesPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PagesPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &DisaggReadError{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pages", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pages = append(m.Pages, make([]byte, postIndex-iNdEx))
			copy(m.Pages[len(m.Pages)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chunks = append(m.Chunks, make([]byte, postIndex-iNdEx))
			copy(m.Chunks[len(m.Chunks)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summaries", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDisaggregated
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summaries = append(m.Summaries, make([]byte, postIndex-iNdEx))
			copy(m.Summaries[len(m.Summaries)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDisaggregated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDisaggregated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDisaggregated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDisaggregated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDisaggregated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDisaggregated
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDisaggregated
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDisaggregated(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDisaggregated = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDisaggregated   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("disaggregated.proto", fileDescriptorDisaggregated) }

var fileDescriptorDisaggregated = []byte{
	// 1153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xce, 0xc6, 0x8e, 0xbd, 0x3e, 0x76, 0x4a, 0x3b, 0x2d, 0xcd, 0x26, 0xa5, 0x21, 0xac, 0x90,
	0x30, 0x37, 0x91, 0x9a, 0x14, 0x90, 0x2a, 0x28, 0xea, 0x2f, 0x59, 0x48, 0x69, 0x98, 0x84, 0x8a,
	0xbb, 0xd5, 0x64, 0xe7, 0xd4, 0x59, 0xed, 0x7a, 0x67, 0x33, 0x33, 0x0e, 0xe4, 0x29, 0xb8, 0xe5,
	0x29, 0xb8, 0x45, 0x82, 0x17, 0xe0, 0x0e, 0x1e, 0x01, 0x15, 0x1e, 0x04, 0xcd, 0xcf, 0xda, 0x89,
	0x1b, 0x7e, 0x2a, 0xb8, 0xf2, 0x7e, 0xe7, 0x6f, 0xce, 0xf9, 0xce, 0x39, 0x33, 0x86, 0xab, 0x3c,
	0x57, 0x6c, 0x34, 0x92, 0x38, 0x62, 0x1a, 0xf9, 0x66, 0x2d, 0x85, 0x16, 0x64, 0xf9, 0x9c, 0x70,
	0xed, 0x4a, 0x26, 0x6a, 0x29, 0x32, 0x54, 0x4a, 0x48, 0x67, 0xb1, 0xb6, 0x5c, 0x9c, 0xc8, 0x3a,
	0xab, 0x0f, 0x1d, 0x8c, 0x7f, 0x0c, 0x60, 0xb0, 0xbf, 0xbd, 0x2b, 0xb2, 0x82, 0xa2, 0x9a, 0x94,
	0x9a, 0x6c, 0x41, 0x57, 0x4d, 0x32, 0xe3, 0x12, 0x05, 0x1b, 0xc1, 0xb0, 0xbf, 0x75, 0x7d, 0xf3,
	0xfc, 0x41, 0xfb, 0x4e, 0xbb, 0xb3, 0x40, 0x1b, 0x43, 0xf2, 0x3e, 0xf4, 0x2a, 0xa1, 0x53, 0xf1,
	0x75, 0x85, 0x32, 0x5a, 0xb4, 0x5e, 0x2b, 0x73, 0x5e, 0x9f, 0x0b, 0xfd, 0xd4, 0xa8, 0x77, 0x16,
	0x68, 0x58, 0xf9, 0x6f, 0xf2, 0x1e, 0x84, 0x99, 0xa8, 0x9e, 0x97, 0x79, 0xa6, 0xa3, 0xd6, 0x85,
	0x6e, 0x0f, 0xbc, 0xda, 0xb8, 0x35, 0xa6, 0xf7, 0xbb, 0xb0, 0x84, 0x52, 0x0a, 0x19, 0xf7, 0xa0,
	0xeb, 0xb3, 0x89, 0x01, 0xc2, 0xe6, 0x88, 0x38, 0x86, 0xb0, 0xf1, 0x23, 0xd7, 0xa1, 0x23, 0x91,
	0x29, 0x51, 0xd9, 0x6a, 0x7a, 0xd4, 0xa3, 0xf8, 0x04, 0xae, 0x1c, 0xc8, 0xd3, 0x7b, 0x9c, 0xbb,
	0xd2, 0x8f, 0x27, 0xa8, 0x34, 0x89, 0x61, 0x99, 0x33, 0xcd, 0xd2, 0xe7, 0x79, 0x89, 0x69, 0x81,
	0xa7, 0xd6, 0x67, 0x40, 0xfb, 0x46, 0xf8, 0x38, 0x2f, 0xf1, 0x33, 0x3c, 0x35, 0x36, 0xa5, 0xc8,
	0x8a, 0x54, 0x69, 0x21, 0x31, 0xcd, 0xb9, 0x4d, 0xbc, 0x4d, 0xfb, 0x46, 0xb8, 0x6f, 0x64, 0x09,
	0x27, 0xab, 0x10, 0x3a, 0x1b, 0x3c, 0x8e, 0xda, 0x56, 0xdd, 0xb5, 0x6a, 0x3c, 0x8e, 0x13, 0x20,
	0x67, 0xcf, 0x55, 0xb5, 0xa8, 0x14, 0x92, 0x6d, 0x93, 0xa5, 0xa1, 0xdf, 0x73, 0x7e, 0x63, 0x9e,
	0xf3, 0x33, 0x1d, 0xa2, 0xde, 0x34, 0xbe, 0x03, 0xd7, 0x0e, 0xe4, 0xe9, 0x13, 0x26, 0x8b, 0x87,
	0x58, 0xa2, 0xc6, 0x57, 0xa8, 0x22, 0xde, 0x85, 0xd7, 0xe7, 0x7c, 0xff, 0x4b, 0x26, 0x11, 0x5c,
	0xff, 0x04, 0xf5, 0x43, 0x6b, 0x68, 0x98, 0xcf, 0x47, 0x3e, 0x97, 0xf8, 0x2b, 0xb8, 0xe4, 0xc4,
	0xfb, 0xdb, 0x4e, 0x61, 0x1a, 0x72, 0x38, 0xc9, 0x0a, 0xd4, 0x4d, 0x43, 0x1c, 0x22, 0x04, 0xda,
	0x52, 0x08, 0x6d, 0xc7, 0xa7, 0x47, 0xed, 0x37, 0x59, 0x83, 0x10, 0x2b, 0x5e, 0x8b, 0xbc, 0x72,
	0xf3, 0xd1, 0xa3, 0x53, 0x1c, 0x7f, 0x09, 0x2b, 0x2f, 0x9d, 0xe9, 0x6b, 0xb8, 0x03, 0x3d, 0xb5,
	0x9d, 0x66, 0x56, 0xe8, 0xcb, 0xb8, 0x39, 0x57, 0xc6, 0xf9, 0xa4, 0x68, 0xa8, 0xfc, 0x57, 0xfc,
	0xc3, 0x62, 0x93, 0xf1, 0x01, 0x53, 0xc5, 0x13, 0xd4, 0xcc, 0x74, 0x53, 0x69, 0x26, 0x75, 0xaa,
	0xdd, 0x4a, 0xb4, 0x69, 0xd7, 0xe2, 0x03, 0x65, 0x54, 0xc7, 0x13, 0x94, 0xa7, 0x46, 0xb5, 0xe8,
	0x54, 0x16, 0x1f, 0x28, 0x72, 0x03, 0x7a, 0x0a, 0xe5, 0x09, 0xca, 0xd9, 0x8c, 0x84, 0x4e, 0x90,
	0x70, 0xf2, 0x36, 0x5c, 0x2a, 0x45, 0xc6, 0xca, 0xd4, 0x79, 0xe7, 0xdc, 0x8f, 0xc9, 0xc0, 0x4a,
	0xbf, 0x30, 0xc2, 0x84, 0x93, 0x15, 0xe8, 0x6a, 0xa6, 0x0a, 0xa3, 0x5e, 0xda, 0x08, 0x86, 0x2d,
	0xda, 0x31, 0x30, 0xe1, 0xe4, 0x4d, 0xe8, 0xe3, 0x37, 0x98, 0x4d, 0xb4, 0xb0, 0xd1, 0x3b, 0x96,
	0x1a, 0x68, 0x44, 0xce, 0xa0, 0xc0, 0x53, 0x55, 0xb3, 0xcc, 0x8e, 0x68, 0x77, 0x23, 0x18, 0x2e,
	0x53, 0x68, 0x44, 0x09, 0x27, 0xb7, 0xa1, 0xcf, 0xea, 0x3c, 0x3d, 0x41, 0xa9, 0x72, 0x51, 0x45,
	0xe1, 0x46, 0x30, 0xbc, 0xb4, 0x75, 0x75, 0xb3, 0xb9, 0x1b, 0xee, 0xed, 0x25, 0xcf, 0x9c, 0x8a,
	0x02, 0xab, 0x73, 0xff, 0x6d, 0x6a, 0x1a, 0x31, 0x7d, 0xe4, 0x6a, 0xea, 0xd9, 0x94, 0x42, 0x27,
	0x48, 0x78, 0xfc, 0x01, 0xbc, 0xe6, 0x88, 0xa3, 0xc8, 0xf8, 0x23, 0xb3, 0x9f, 0xa6, 0xa7, 0x99,
	0xe0, 0x68, 0x59, 0x5b, 0xa2, 0xf6, 0x9b, 0x5c, 0x86, 0xd6, 0x58, 0x8d, 0x7c, 0x9b, 0xcd, 0x67,
	0xfc, 0x47, 0x00, 0xd1, 0x23, 0xa5, 0xd9, 0x61, 0x99, 0xab, 0xa3, 0x19, 0xf7, 0x2e, 0xc4, 0xc7,
	0x30, 0xb0, 0xbb, 0x9e, 0x4a, 0x1c, 0xe5, 0x7e, 0x8b, 0xfb, 0x5b, 0x6b, 0x73, 0xed, 0xb4, 0xb6,
	0xd4, 0x5a, 0xec, 0x2c, 0xd0, 0x3e, 0xce, 0xe0, 0x2c, 0x80, 0xd9, 0x40, 0xe4, 0xfe, 0x7a, 0xba,
	0x30, 0xc0, 0xae, 0xb5, 0x98, 0x06, 0x70, 0x90, 0x7c, 0x08, 0x0e, 0xa6, 0xc2, 0x14, 0x1a, 0x65,
	0xd6, 0x7f, 0xf5, 0x22, 0xff, 0xa7, 0xc6, 0x60, 0x67, 0x81, 0x02, 0x4e, 0xd1, 0xfd, 0x10, 0x3a,
	0x16, 0xa9, 0xf8, 0x2e, 0xf4, 0xcf, 0xa4, 0xd9, 0xf0, 0x10, 0x4c, 0x79, 0x20, 0x37, 0x01, 0x5c,
	0x91, 0x69, 0xce, 0xcd, 0x38, 0xb5, 0x86, 0x6d, 0xda, 0x73, 0x92, 0x84, 0xab, 0xf8, 0x53, 0xef,
	0xef, 0xd3, 0x7a, 0xd9, 0xff, 0x5d, 0xe8, 0x4c, 0x6b, 0x6c, 0x0d, 0xfb, 0x5b, 0x57, 0xa6, 0xed,
	0x34, 0x2e, 0x49, 0xf5, 0x5c, 0x50, 0x6f, 0x10, 0x6f, 0x01, 0xcc, 0x32, 0xfe, 0x97, 0x6d, 0xfa,
	0x69, 0x11, 0xd6, 0x2e, 0x68, 0x53, 0x73, 0xeb, 0xdc, 0x82, 0xf6, 0x18, 0x35, 0xfb, 0xdb, 0x7d,
	0x6b, 0x56, 0x8a, 0x5a, 0x53, 0x12, 0x41, 0x97, 0x71, 0x2e, 0xcd, 0x53, 0xe3, 0xce, 0x69, 0xa0,
	0x19, 0x34, 0x9d, 0x8f, 0x51, 0x4c, 0x74, 0xaa, 0xec, 0xf2, 0xb4, 0x68, 0xe8, 0x05, 0xfb, 0xe4,
	0x16, 0x74, 0x1d, 0x2b, 0x2a, 0x6a, 0xdb, 0x42, 0x57, 0x36, 0xcf, 0x3e, 0x73, 0x8e, 0x5f, 0x5b,
	0x6e, 0x63, 0x67, 0xa8, 0x55, 0xd9, 0x11, 0x8e, 0x99, 0x99, 0x78, 0xbf, 0x4c, 0x3d, 0x27, 0x79,
	0x86, 0x92, 0xdc, 0x85, 0x65, 0x53, 0x17, 0xa6, 0x4d, 0xdc, 0x8e, 0x8d, 0xbb, 0x7a, 0x2e, 0xee,
	0x81, 0xb1, 0x70, 0xc1, 0x15, 0x1d, 0xe8, 0x33, 0x88, 0xbc, 0x05, 0x03, 0xac, 0x0c, 0x6d, 0x3c,
	0xad, 0x4b, 0x56, 0xd9, 0x7d, 0x1b, 0xd0, 0xbe, 0x97, 0xed, 0x95, 0xac, 0x8a, 0x7f, 0x09, 0xe0,
	0xc6, 0x85, 0xec, 0xf9, 0x3b, 0xeb, 0x23, 0xff, 0xa6, 0x79, 0xfe, 0xde, 0x99, 0x9f, 0xaf, 0xbf,
	0xd8, 0x0f, 0xea, 0xbc, 0xdc, 0x1d, 0x75, 0xee, 0x41, 0xea, 0x2a, 0xff, 0x18, 0xdd, 0x85, 0xbe,
	0xaa, 0x58, 0xad, 0x8e, 0x84, 0x6e, 0x2e, 0x9a, 0x7f, 0xec, 0x0f, 0x34, 0x1e, 0x09, 0x37, 0x17,
	0xb6, 0x2d, 0x56, 0x45, 0x4b, 0x1b, 0xad, 0xe1, 0x80, 0x7a, 0x14, 0xef, 0xc2, 0xca, 0x03, 0x56,
	0x65, 0x58, 0xfe, 0x1f, 0xb3, 0x10, 0xaf, 0x41, 0xf4, 0x72, 0x34, 0xc7, 0x4d, 0xfc, 0x7d, 0x00,
	0x2b, 0x8f, 0x51, 0x67, 0xbe, 0xf8, 0x3d, 0x36, 0x42, 0xd5, 0x1c, 0x35, 0x57, 0x5d, 0xf0, 0xaa,
	0xd5, 0xad, 0x42, 0xe8, 0x5a, 0x9f, 0xbb, 0xab, 0xa1, 0x45, 0xbb, 0x16, 0x27, 0xdc, 0x0e, 0x0d,
	0x8e, 0xc6, 0x58, 0xe9, 0x19, 0xab, 0x3d, 0x2f, 0x71, 0x9e, 0x35, 0x1b, 0xa1, 0x5d, 0xd6, 0xb6,
	0x5d, 0xd6, 0xae, 0xc1, 0x66, 0x55, 0xbf, 0x0d, 0xa0, 0x6f, 0xb3, 0xdc, 0x63, 0xf6, 0x6d, 0xbb,
	0x7d, 0xbe, 0xb9, 0xeb, 0x17, 0xa6, 0x37, 0xbd, 0x36, 0x9b, 0x9e, 0x5e, 0x83, 0x25, 0x13, 0xd0,
	0x5d, 0x05, 0x03, 0xea, 0x80, 0x69, 0x47, 0x76, 0x34, 0xa9, 0x0a, 0xb3, 0x17, 0xb6, 0x1d, 0x0e,
	0x91, 0x37, 0xa0, 0xa7, 0x26, 0xe3, 0x31, 0x93, 0x39, 0xba, 0x7c, 0x06, 0x74, 0x26, 0xb8, 0x1f,
	0xff, 0xfc, 0x62, 0x3d, 0xf8, 0xf5, 0xc5, 0x7a, 0xf0, 0xdb, 0x8b, 0xf5, 0xe0, 0xbb, 0xdf, 0xd7,
	0x17, 0xe0, 0xb2, 0x90, 0xa3, 0x4d, 0x9d, 0x17, 0x27, 0x9b, 0xc5, 0x89, 0xfd, 0x2b, 0x78, 0xd8,
	0xb1, 0x3f, 0xdb, 0x7f, 0x06, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xb2, 0x79, 0x0d, 0x59, 0x0a, 0x00,
	0x00,
}
