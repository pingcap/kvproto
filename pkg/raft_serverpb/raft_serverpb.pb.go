// Code generated by protoc-gen-go.
// source: raft_serverpb.proto
// DO NOT EDIT!

/*
Package raft_serverpb is a generated protocol buffer package.

It is generated from these files:
	raft_serverpb.proto

It has these top-level messages:
	RaftMessage
	RaftTruncatedState
	KeyValue
	RaftSnapshotData
	StoreIdent
	RaftLocalState
	RaftApplyState
	RegionLocalState
*/
package raft_serverpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import eraftpb "github.com/pingcap/kvproto/pkg/eraftpb"
import metapb "github.com/pingcap/kvproto/pkg/metapb"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PeerState int32

const (
	PeerState_Normal     PeerState = 0
	PeerState_Applying   PeerState = 1
	PeerState_Tombstone  PeerState = 2
	PeerState_Destroying PeerState = 3
)

var PeerState_name = map[int32]string{
	0: "Normal",
	1: "Applying",
	2: "Tombstone",
	3: "Destroying",
}
var PeerState_value = map[string]int32{
	"Normal":     0,
	"Applying":   1,
	"Tombstone":  2,
	"Destroying": 3,
}

func (x PeerState) Enum() *PeerState {
	p := new(PeerState)
	*p = x
	return p
}
func (x PeerState) String() string {
	return proto.EnumName(PeerState_name, int32(x))
}
func (x *PeerState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeerState_value, data, "PeerState")
	if err != nil {
		return err
	}
	*x = PeerState(value)
	return nil
}
func (PeerState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RaftMessage struct {
	RegionId    *uint64             `protobuf:"varint,1,opt,name=region_id" json:"region_id,omitempty"`
	FromPeer    *metapb.Peer        `protobuf:"bytes,2,opt,name=from_peer" json:"from_peer,omitempty"`
	ToPeer      *metapb.Peer        `protobuf:"bytes,3,opt,name=to_peer" json:"to_peer,omitempty"`
	Message     *eraftpb.Message    `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	RegionEpoch *metapb.RegionEpoch `protobuf:"bytes,5,opt,name=region_epoch" json:"region_epoch,omitempty"`
	// true means to_peer is a tombstone peer and it should remove itself.
	IsTombstone      *bool  `protobuf:"varint,6,opt,name=is_tombstone" json:"is_tombstone,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RaftMessage) Reset()                    { *m = RaftMessage{} }
func (m *RaftMessage) String() string            { return proto.CompactTextString(m) }
func (*RaftMessage) ProtoMessage()               {}
func (*RaftMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RaftMessage) GetRegionId() uint64 {
	if m != nil && m.RegionId != nil {
		return *m.RegionId
	}
	return 0
}

func (m *RaftMessage) GetFromPeer() *metapb.Peer {
	if m != nil {
		return m.FromPeer
	}
	return nil
}

func (m *RaftMessage) GetToPeer() *metapb.Peer {
	if m != nil {
		return m.ToPeer
	}
	return nil
}

func (m *RaftMessage) GetMessage() *eraftpb.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *RaftMessage) GetRegionEpoch() *metapb.RegionEpoch {
	if m != nil {
		return m.RegionEpoch
	}
	return nil
}

func (m *RaftMessage) GetIsTombstone() bool {
	if m != nil && m.IsTombstone != nil {
		return *m.IsTombstone
	}
	return false
}

type RaftTruncatedState struct {
	Index            *uint64 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Term             *uint64 `protobuf:"varint,2,opt,name=term" json:"term,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RaftTruncatedState) Reset()                    { *m = RaftTruncatedState{} }
func (m *RaftTruncatedState) String() string            { return proto.CompactTextString(m) }
func (*RaftTruncatedState) ProtoMessage()               {}
func (*RaftTruncatedState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RaftTruncatedState) GetIndex() uint64 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *RaftTruncatedState) GetTerm() uint64 {
	if m != nil && m.Term != nil {
		return *m.Term
	}
	return 0
}

type KeyValue struct {
	Key              []byte `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value            []byte `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *KeyValue) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type RaftSnapshotData struct {
	Region           *metapb.Region `protobuf:"bytes,1,opt,name=region" json:"region,omitempty"`
	FileSize         *uint64        `protobuf:"varint,2,opt,name=file_size" json:"file_size,omitempty"`
	Data             []*KeyValue    `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *RaftSnapshotData) Reset()                    { *m = RaftSnapshotData{} }
func (m *RaftSnapshotData) String() string            { return proto.CompactTextString(m) }
func (*RaftSnapshotData) ProtoMessage()               {}
func (*RaftSnapshotData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RaftSnapshotData) GetRegion() *metapb.Region {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *RaftSnapshotData) GetFileSize() uint64 {
	if m != nil && m.FileSize != nil {
		return *m.FileSize
	}
	return 0
}

func (m *RaftSnapshotData) GetData() []*KeyValue {
	if m != nil {
		return m.Data
	}
	return nil
}

type StoreIdent struct {
	ClusterId        *uint64 `protobuf:"varint,1,opt,name=cluster_id" json:"cluster_id,omitempty"`
	StoreId          *uint64 `protobuf:"varint,2,opt,name=store_id" json:"store_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *StoreIdent) Reset()                    { *m = StoreIdent{} }
func (m *StoreIdent) String() string            { return proto.CompactTextString(m) }
func (*StoreIdent) ProtoMessage()               {}
func (*StoreIdent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StoreIdent) GetClusterId() uint64 {
	if m != nil && m.ClusterId != nil {
		return *m.ClusterId
	}
	return 0
}

func (m *StoreIdent) GetStoreId() uint64 {
	if m != nil && m.StoreId != nil {
		return *m.StoreId
	}
	return 0
}

type RaftLocalState struct {
	HardState        *eraftpb.HardState `protobuf:"bytes,1,opt,name=hard_state" json:"hard_state,omitempty"`
	LastIndex        *uint64            `protobuf:"varint,2,opt,name=last_index" json:"last_index,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *RaftLocalState) Reset()                    { *m = RaftLocalState{} }
func (m *RaftLocalState) String() string            { return proto.CompactTextString(m) }
func (*RaftLocalState) ProtoMessage()               {}
func (*RaftLocalState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RaftLocalState) GetHardState() *eraftpb.HardState {
	if m != nil {
		return m.HardState
	}
	return nil
}

func (m *RaftLocalState) GetLastIndex() uint64 {
	if m != nil && m.LastIndex != nil {
		return *m.LastIndex
	}
	return 0
}

type RaftApplyState struct {
	AppliedIndex     *uint64             `protobuf:"varint,1,opt,name=applied_index" json:"applied_index,omitempty"`
	TruncatedState   *RaftTruncatedState `protobuf:"bytes,2,opt,name=truncated_state" json:"truncated_state,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *RaftApplyState) Reset()                    { *m = RaftApplyState{} }
func (m *RaftApplyState) String() string            { return proto.CompactTextString(m) }
func (*RaftApplyState) ProtoMessage()               {}
func (*RaftApplyState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RaftApplyState) GetAppliedIndex() uint64 {
	if m != nil && m.AppliedIndex != nil {
		return *m.AppliedIndex
	}
	return 0
}

func (m *RaftApplyState) GetTruncatedState() *RaftTruncatedState {
	if m != nil {
		return m.TruncatedState
	}
	return nil
}

type RegionLocalState struct {
	State            *PeerState     `protobuf:"varint,1,opt,name=state,enum=raft_serverpb.PeerState" json:"state,omitempty"`
	Region           *metapb.Region `protobuf:"bytes,2,opt,name=region" json:"region,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *RegionLocalState) Reset()                    { *m = RegionLocalState{} }
func (m *RegionLocalState) String() string            { return proto.CompactTextString(m) }
func (*RegionLocalState) ProtoMessage()               {}
func (*RegionLocalState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RegionLocalState) GetState() PeerState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return PeerState_Normal
}

func (m *RegionLocalState) GetRegion() *metapb.Region {
	if m != nil {
		return m.Region
	}
	return nil
}

func init() {
	proto.RegisterType((*RaftMessage)(nil), "raft_serverpb.RaftMessage")
	proto.RegisterType((*RaftTruncatedState)(nil), "raft_serverpb.RaftTruncatedState")
	proto.RegisterType((*KeyValue)(nil), "raft_serverpb.KeyValue")
	proto.RegisterType((*RaftSnapshotData)(nil), "raft_serverpb.RaftSnapshotData")
	proto.RegisterType((*StoreIdent)(nil), "raft_serverpb.StoreIdent")
	proto.RegisterType((*RaftLocalState)(nil), "raft_serverpb.RaftLocalState")
	proto.RegisterType((*RaftApplyState)(nil), "raft_serverpb.RaftApplyState")
	proto.RegisterType((*RegionLocalState)(nil), "raft_serverpb.RegionLocalState")
	proto.RegisterEnum("raft_serverpb.PeerState", PeerState_name, PeerState_value)
}

func init() { proto.RegisterFile("raft_serverpb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x25, 0x89, 0x93, 0x26, 0x13, 0x27, 0x98, 0x2d, 0x08, 0xab, 0x12, 0x1f, 0xb5, 0x44, 0xf9,
	0x38, 0x44, 0x22, 0x47, 0x6e, 0x48, 0x41, 0x02, 0x51, 0x10, 0x6a, 0x2a, 0x2e, 0x1c, 0xac, 0xad,
	0x3d, 0x49, 0x2c, 0x6c, 0xaf, 0xb5, 0x3b, 0xa9, 0x08, 0xbf, 0x8f, 0x1f, 0xc6, 0x7e, 0x78, 0x49,
	0x53, 0x7a, 0xb1, 0xb4, 0xf3, 0xde, 0x3c, 0xbf, 0x79, 0x33, 0x70, 0x2c, 0xf9, 0x8a, 0x52, 0x85,
	0xf2, 0x1a, 0x65, 0x73, 0x35, 0x6b, 0xa4, 0x20, 0xc1, 0x26, 0x07, 0xc5, 0x93, 0x09, 0x9a, 0xb7,
	0x47, 0x4f, 0xc2, 0x0a, 0x89, 0xfb, 0x57, 0xf2, 0xa7, 0x03, 0xe3, 0x0b, 0x0d, 0x7f, 0x41, 0xa5,
	0xf8, 0x1a, 0xd9, 0x03, 0x18, 0x49, 0x5c, 0x17, 0xa2, 0x4e, 0x8b, 0x3c, 0xee, 0x3c, 0xef, 0xbc,
	0x0a, 0xd8, 0x33, 0x18, 0xad, 0xa4, 0xa8, 0xd2, 0x06, 0x51, 0xc6, 0x5d, 0x5d, 0x1a, 0xcf, 0xc3,
	0x59, 0x2b, 0xf2, 0x4d, 0xd7, 0xd8, 0x13, 0x38, 0x22, 0xe1, 0xe0, 0xde, 0x1d, 0xf0, 0x29, 0x1c,
	0x55, 0x4e, 0x3d, 0x0e, 0x2c, 0x1c, 0xcd, 0xbc, 0x23, 0xff, 0xd7, 0xd7, 0x10, 0xb6, 0x7f, 0xc5,
	0x46, 0x64, 0x9b, 0xb8, 0x6f, 0x79, 0xc7, 0x5e, 0xe6, 0xc2, 0x62, 0x1f, 0x0c, 0xc4, 0x1e, 0x42,
	0x58, 0xa8, 0x94, 0x44, 0x75, 0xa5, 0x48, 0xd4, 0x18, 0x0f, 0x34, 0x75, 0x98, 0xbc, 0x05, 0x66,
	0xa6, 0xb8, 0x94, 0xdb, 0x3a, 0xe3, 0x84, 0xf9, 0x92, 0xf4, 0x97, 0x4d, 0xa0, 0x5f, 0xd4, 0x39,
	0xfe, 0x6a, 0x07, 0x09, 0x21, 0x20, 0x94, 0x95, 0x9d, 0x21, 0x48, 0xce, 0x60, 0xf8, 0x19, 0x77,
	0xdf, 0x79, 0xb9, 0x45, 0x36, 0x86, 0xde, 0x4f, 0xdc, 0x59, 0x5a, 0x68, 0xba, 0xae, 0x4d, 0xd5,
	0xf2, 0xc2, 0xa4, 0x84, 0xc8, 0x48, 0x2f, 0x6b, 0xde, 0xa8, 0x8d, 0xa0, 0x05, 0x27, 0xce, 0x9e,
	0xc2, 0xc0, 0xf9, 0xb5, 0x2d, 0xe3, 0xf9, 0xf4, 0xd0, 0xa9, 0x49, 0x71, 0x55, 0x94, 0x98, 0xaa,
	0xe2, 0xb7, 0x93, 0x09, 0xd8, 0x0b, 0x08, 0x72, 0xdd, 0xaa, 0x13, 0xea, 0xe9, 0x86, 0xc7, 0xb3,
	0xc3, 0xc5, 0x79, 0x27, 0xc9, 0x1c, 0x60, 0x49, 0x42, 0xe2, 0xa7, 0x1c, 0x6b, 0x62, 0x0c, 0x20,
	0x2b, 0xb7, 0x4a, 0xbb, 0xde, 0xaf, 0x23, 0x82, 0xa1, 0x32, 0x0c, 0x53, 0x71, 0x93, 0x9c, 0xc3,
	0xd4, 0x38, 0x3c, 0x17, 0x19, 0x2f, 0xdd, 0xe0, 0x67, 0x00, 0x1b, 0x2e, 0xf3, 0x54, 0x99, 0x57,
	0xeb, 0x91, 0xfd, 0x4b, 0xfd, 0xa3, 0x86, 0x1c, 0x4f, 0xeb, 0x97, 0x5c, 0x51, 0xea, 0x52, 0x72,
	0x6a, 0x99, 0x53, 0x7b, 0xdf, 0x34, 0xe5, 0xce, 0xb1, 0x1e, 0xc1, 0x84, 0xeb, 0x57, 0x81, 0x79,
	0x7a, 0x33, 0xce, 0x77, 0x70, 0x9f, 0x7c, 0xde, 0xed, 0x9f, 0xdc, 0x75, 0x9c, 0xde, 0x1a, 0xee,
	0xff, 0xcd, 0x24, 0x3f, 0x74, 0xa8, 0x36, 0xaa, 0x1b, 0xa6, 0x5f, 0x42, 0x7f, 0xef, 0x77, 0x3a,
	0x8f, 0x6f, 0xa9, 0x98, 0x5b, 0x72, 0xc4, 0x7d, 0xfa, 0xdd, 0xbb, 0xd2, 0x7f, 0xb3, 0x80, 0xd1,
	0x9e, 0x0c, 0x30, 0xf8, 0x2a, 0x64, 0xc5, 0xcb, 0xe8, 0x9e, 0x3e, 0x80, 0xa1, 0x1d, 0xab, 0xa8,
	0xd7, 0x51, 0x47, 0xef, 0x79, 0x74, 0xe9, 0xcf, 0x28, 0xea, 0xb2, 0x29, 0xc0, 0x02, 0x15, 0x49,
	0x61, 0xe1, 0xde, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x43, 0xc2, 0x34, 0xbd, 0x5b, 0x03, 0x00,
	0x00,
}
