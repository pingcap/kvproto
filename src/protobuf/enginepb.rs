// This file is generated by rust-protobuf 2.0.6. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct CommandRequestHeader {
    // message fields
    pub region_id: u64,
    pub index: u64,
    pub term: u64,
    pub sync_log: bool,
    pub destroy: bool,
    pub context: ::std::vec::Vec<u8>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl CommandRequestHeader {
    pub fn new() -> CommandRequestHeader {
        ::std::default::Default::default()
    }

    // uint64 region_id = 1;

    pub fn clear_region_id(&mut self) {
        self.region_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_region_id(&mut self, v: u64) {
        self.region_id = v;
    }

    pub fn get_region_id(&self) -> u64 {
        self.region_id
    }

    // uint64 index = 2;

    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u64) {
        self.index = v;
    }

    pub fn get_index(&self) -> u64 {
        self.index
    }

    // uint64 term = 3;

    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u64) {
        self.term = v;
    }

    pub fn get_term(&self) -> u64 {
        self.term
    }

    // bool sync_log = 4;

    pub fn clear_sync_log(&mut self) {
        self.sync_log = false;
    }

    // Param is passed by value, moved
    pub fn set_sync_log(&mut self, v: bool) {
        self.sync_log = v;
    }

    pub fn get_sync_log(&self) -> bool {
        self.sync_log
    }

    // bool destroy = 5;

    pub fn clear_destroy(&mut self) {
        self.destroy = false;
    }

    // Param is passed by value, moved
    pub fn set_destroy(&mut self, v: bool) {
        self.destroy = v;
    }

    pub fn get_destroy(&self) -> bool {
        self.destroy
    }

    // bytes context = 6;

    pub fn clear_context(&mut self) {
        self.context.clear();
    }

    // Param is passed by value, moved
    pub fn set_context(&mut self, v: ::std::vec::Vec<u8>) {
        self.context = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_context(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.context
    }

    // Take field
    pub fn take_context(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.context, ::std::vec::Vec::new())
    }

    pub fn get_context(&self) -> &[u8] {
        &self.context
    }
}

impl ::protobuf::Message for CommandRequestHeader {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.region_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.index = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.term = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.sync_log = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.destroy = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.context)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.region_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.region_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(3, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sync_log != false {
            my_size += 2;
        }
        if self.destroy != false {
            my_size += 2;
        }
        if !self.context.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.context);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.region_id != 0 {
            os.write_uint64(1, self.region_id)?;
        }
        if self.index != 0 {
            os.write_uint64(2, self.index)?;
        }
        if self.term != 0 {
            os.write_uint64(3, self.term)?;
        }
        if self.sync_log != false {
            os.write_bool(4, self.sync_log)?;
        }
        if self.destroy != false {
            os.write_bool(5, self.destroy)?;
        }
        if !self.context.is_empty() {
            os.write_bytes(6, &self.context)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommandRequestHeader {
        CommandRequestHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "region_id",
                    |m: &CommandRequestHeader| { &m.region_id },
                    |m: &mut CommandRequestHeader| { &mut m.region_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "index",
                    |m: &CommandRequestHeader| { &m.index },
                    |m: &mut CommandRequestHeader| { &mut m.index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "term",
                    |m: &CommandRequestHeader| { &m.term },
                    |m: &mut CommandRequestHeader| { &mut m.term },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "sync_log",
                    |m: &CommandRequestHeader| { &m.sync_log },
                    |m: &mut CommandRequestHeader| { &mut m.sync_log },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "destroy",
                    |m: &CommandRequestHeader| { &m.destroy },
                    |m: &mut CommandRequestHeader| { &mut m.destroy },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "context",
                    |m: &CommandRequestHeader| { &m.context },
                    |m: &mut CommandRequestHeader| { &mut m.context },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CommandRequestHeader>(
                    "CommandRequestHeader",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CommandRequestHeader {
        static mut instance: ::protobuf::lazy::Lazy<CommandRequestHeader> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CommandRequestHeader,
        };
        unsafe {
            instance.get(CommandRequestHeader::new)
        }
    }
}

impl ::protobuf::Clear for CommandRequestHeader {
    fn clear(&mut self) {
        self.clear_region_id();
        self.clear_index();
        self.clear_term();
        self.clear_sync_log();
        self.clear_destroy();
        self.clear_context();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for CommandRequestHeader {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.region_id, "region_id", buf);
        crate::text::PbPrint::fmt(&self.index, "index", buf);
        crate::text::PbPrint::fmt(&self.term, "term", buf);
        crate::text::PbPrint::fmt(&self.sync_log, "sync_log", buf);
        crate::text::PbPrint::fmt(&self.destroy, "destroy", buf);
        crate::text::PbPrint::fmt(&self.context, "context", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for CommandRequestHeader {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.region_id, "region_id", &mut s);
        crate::text::PbPrint::fmt(&self.index, "index", &mut s);
        crate::text::PbPrint::fmt(&self.term, "term", &mut s);
        crate::text::PbPrint::fmt(&self.sync_log, "sync_log", &mut s);
        crate::text::PbPrint::fmt(&self.destroy, "destroy", &mut s);
        crate::text::PbPrint::fmt(&self.context, "context", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommandRequestHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommandRequest {
    // message fields
    pub header: ::protobuf::SingularPtrField<CommandRequestHeader>,
    pub requests: ::protobuf::RepeatedField<super::raft_cmdpb::Request>,
    pub admin_request: ::protobuf::SingularPtrField<super::raft_cmdpb::AdminRequest>,
    pub admin_response: ::protobuf::SingularPtrField<super::raft_cmdpb::AdminResponse>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl CommandRequest {
    pub fn new() -> CommandRequest {
        ::std::default::Default::default()
    }

    // .enginepb.CommandRequestHeader header = 1;

    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: CommandRequestHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut CommandRequestHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> CommandRequestHeader {
        self.header.take().unwrap_or_else(|| CommandRequestHeader::new())
    }

    pub fn get_header(&self) -> &CommandRequestHeader {
        self.header.as_ref().unwrap_or_else(|| CommandRequestHeader::default_instance())
    }

    // repeated .raft_cmdpb.Request requests = 2;

    pub fn clear_requests(&mut self) {
        self.requests.clear();
    }

    // Param is passed by value, moved
    pub fn set_requests(&mut self, v: ::protobuf::RepeatedField<super::raft_cmdpb::Request>) {
        self.requests = v;
    }

    // Mutable pointer to the field.
    pub fn mut_requests(&mut self) -> &mut ::protobuf::RepeatedField<super::raft_cmdpb::Request> {
        &mut self.requests
    }

    // Take field
    pub fn take_requests(&mut self) -> ::protobuf::RepeatedField<super::raft_cmdpb::Request> {
        ::std::mem::replace(&mut self.requests, ::protobuf::RepeatedField::new())
    }

    pub fn get_requests(&self) -> &[super::raft_cmdpb::Request] {
        &self.requests
    }

    // .raft_cmdpb.AdminRequest admin_request = 3;

    pub fn clear_admin_request(&mut self) {
        self.admin_request.clear();
    }

    pub fn has_admin_request(&self) -> bool {
        self.admin_request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_admin_request(&mut self, v: super::raft_cmdpb::AdminRequest) {
        self.admin_request = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_admin_request(&mut self) -> &mut super::raft_cmdpb::AdminRequest {
        if self.admin_request.is_none() {
            self.admin_request.set_default();
        }
        self.admin_request.as_mut().unwrap()
    }

    // Take field
    pub fn take_admin_request(&mut self) -> super::raft_cmdpb::AdminRequest {
        self.admin_request.take().unwrap_or_else(|| super::raft_cmdpb::AdminRequest::new())
    }

    pub fn get_admin_request(&self) -> &super::raft_cmdpb::AdminRequest {
        self.admin_request.as_ref().unwrap_or_else(|| super::raft_cmdpb::AdminRequest::default_instance())
    }

    // .raft_cmdpb.AdminResponse admin_response = 4;

    pub fn clear_admin_response(&mut self) {
        self.admin_response.clear();
    }

    pub fn has_admin_response(&self) -> bool {
        self.admin_response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_admin_response(&mut self, v: super::raft_cmdpb::AdminResponse) {
        self.admin_response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_admin_response(&mut self) -> &mut super::raft_cmdpb::AdminResponse {
        if self.admin_response.is_none() {
            self.admin_response.set_default();
        }
        self.admin_response.as_mut().unwrap()
    }

    // Take field
    pub fn take_admin_response(&mut self) -> super::raft_cmdpb::AdminResponse {
        self.admin_response.take().unwrap_or_else(|| super::raft_cmdpb::AdminResponse::new())
    }

    pub fn get_admin_response(&self) -> &super::raft_cmdpb::AdminResponse {
        self.admin_response.as_ref().unwrap_or_else(|| super::raft_cmdpb::AdminResponse::default_instance())
    }
}

impl ::protobuf::Message for CommandRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.requests {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.admin_request {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.admin_response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.requests)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.admin_request)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.admin_response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.requests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.admin_request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.admin_response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.requests {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.admin_request.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.admin_response.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommandRequest {
        CommandRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CommandRequestHeader>>(
                    "header",
                    |m: &CommandRequest| { &m.header },
                    |m: &mut CommandRequest| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::raft_cmdpb::Request>>(
                    "requests",
                    |m: &CommandRequest| { &m.requests },
                    |m: &mut CommandRequest| { &mut m.requests },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::raft_cmdpb::AdminRequest>>(
                    "admin_request",
                    |m: &CommandRequest| { &m.admin_request },
                    |m: &mut CommandRequest| { &mut m.admin_request },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::raft_cmdpb::AdminResponse>>(
                    "admin_response",
                    |m: &CommandRequest| { &m.admin_response },
                    |m: &mut CommandRequest| { &mut m.admin_response },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CommandRequest>(
                    "CommandRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CommandRequest {
        static mut instance: ::protobuf::lazy::Lazy<CommandRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CommandRequest,
        };
        unsafe {
            instance.get(CommandRequest::new)
        }
    }
}

impl ::protobuf::Clear for CommandRequest {
    fn clear(&mut self) {
        self.clear_header();
        self.clear_requests();
        self.clear_admin_request();
        self.clear_admin_response();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for CommandRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.header, "header", buf);
        crate::text::PbPrint::fmt(&self.requests, "requests", buf);
        crate::text::PbPrint::fmt(&self.admin_request, "admin_request", buf);
        crate::text::PbPrint::fmt(&self.admin_response, "admin_response", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for CommandRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.header, "header", &mut s);
        crate::text::PbPrint::fmt(&self.requests, "requests", &mut s);
        crate::text::PbPrint::fmt(&self.admin_request, "admin_request", &mut s);
        crate::text::PbPrint::fmt(&self.admin_response, "admin_response", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommandRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommandRequestBatch {
    // message fields
    pub requests: ::protobuf::RepeatedField<CommandRequest>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl CommandRequestBatch {
    pub fn new() -> CommandRequestBatch {
        ::std::default::Default::default()
    }

    // repeated .enginepb.CommandRequest requests = 1;

    pub fn clear_requests(&mut self) {
        self.requests.clear();
    }

    // Param is passed by value, moved
    pub fn set_requests(&mut self, v: ::protobuf::RepeatedField<CommandRequest>) {
        self.requests = v;
    }

    // Mutable pointer to the field.
    pub fn mut_requests(&mut self) -> &mut ::protobuf::RepeatedField<CommandRequest> {
        &mut self.requests
    }

    // Take field
    pub fn take_requests(&mut self) -> ::protobuf::RepeatedField<CommandRequest> {
        ::std::mem::replace(&mut self.requests, ::protobuf::RepeatedField::new())
    }

    pub fn get_requests(&self) -> &[CommandRequest] {
        &self.requests
    }
}

impl ::protobuf::Message for CommandRequestBatch {
    fn is_initialized(&self) -> bool {
        for v in &self.requests {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.requests)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.requests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.requests {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommandRequestBatch {
        CommandRequestBatch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CommandRequest>>(
                    "requests",
                    |m: &CommandRequestBatch| { &m.requests },
                    |m: &mut CommandRequestBatch| { &mut m.requests },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CommandRequestBatch>(
                    "CommandRequestBatch",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CommandRequestBatch {
        static mut instance: ::protobuf::lazy::Lazy<CommandRequestBatch> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CommandRequestBatch,
        };
        unsafe {
            instance.get(CommandRequestBatch::new)
        }
    }
}

impl ::protobuf::Clear for CommandRequestBatch {
    fn clear(&mut self) {
        self.clear_requests();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for CommandRequestBatch {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.requests, "requests", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for CommandRequestBatch {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.requests, "requests", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommandRequestBatch {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommandResponseHeader {
    // message fields
    pub region_id: u64,
    pub destroyed: bool,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl CommandResponseHeader {
    pub fn new() -> CommandResponseHeader {
        ::std::default::Default::default()
    }

    // uint64 region_id = 1;

    pub fn clear_region_id(&mut self) {
        self.region_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_region_id(&mut self, v: u64) {
        self.region_id = v;
    }

    pub fn get_region_id(&self) -> u64 {
        self.region_id
    }

    // bool destroyed = 2;

    pub fn clear_destroyed(&mut self) {
        self.destroyed = false;
    }

    // Param is passed by value, moved
    pub fn set_destroyed(&mut self, v: bool) {
        self.destroyed = v;
    }

    pub fn get_destroyed(&self) -> bool {
        self.destroyed
    }
}

impl ::protobuf::Message for CommandResponseHeader {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.region_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.destroyed = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.region_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.region_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.destroyed != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.region_id != 0 {
            os.write_uint64(1, self.region_id)?;
        }
        if self.destroyed != false {
            os.write_bool(2, self.destroyed)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommandResponseHeader {
        CommandResponseHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "region_id",
                    |m: &CommandResponseHeader| { &m.region_id },
                    |m: &mut CommandResponseHeader| { &mut m.region_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "destroyed",
                    |m: &CommandResponseHeader| { &m.destroyed },
                    |m: &mut CommandResponseHeader| { &mut m.destroyed },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CommandResponseHeader>(
                    "CommandResponseHeader",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CommandResponseHeader {
        static mut instance: ::protobuf::lazy::Lazy<CommandResponseHeader> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CommandResponseHeader,
        };
        unsafe {
            instance.get(CommandResponseHeader::new)
        }
    }
}

impl ::protobuf::Clear for CommandResponseHeader {
    fn clear(&mut self) {
        self.clear_region_id();
        self.clear_destroyed();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for CommandResponseHeader {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.region_id, "region_id", buf);
        crate::text::PbPrint::fmt(&self.destroyed, "destroyed", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for CommandResponseHeader {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.region_id, "region_id", &mut s);
        crate::text::PbPrint::fmt(&self.destroyed, "destroyed", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommandResponseHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommandResponse {
    // message fields
    pub header: ::protobuf::SingularPtrField<CommandResponseHeader>,
    pub apply_state: ::protobuf::SingularPtrField<super::raft_serverpb::RaftApplyState>,
    pub applied_term: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl CommandResponse {
    pub fn new() -> CommandResponse {
        ::std::default::Default::default()
    }

    // .enginepb.CommandResponseHeader header = 1;

    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: CommandResponseHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut CommandResponseHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> CommandResponseHeader {
        self.header.take().unwrap_or_else(|| CommandResponseHeader::new())
    }

    pub fn get_header(&self) -> &CommandResponseHeader {
        self.header.as_ref().unwrap_or_else(|| CommandResponseHeader::default_instance())
    }

    // .raft_serverpb.RaftApplyState apply_state = 2;

    pub fn clear_apply_state(&mut self) {
        self.apply_state.clear();
    }

    pub fn has_apply_state(&self) -> bool {
        self.apply_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_apply_state(&mut self, v: super::raft_serverpb::RaftApplyState) {
        self.apply_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_apply_state(&mut self) -> &mut super::raft_serverpb::RaftApplyState {
        if self.apply_state.is_none() {
            self.apply_state.set_default();
        }
        self.apply_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_apply_state(&mut self) -> super::raft_serverpb::RaftApplyState {
        self.apply_state.take().unwrap_or_else(|| super::raft_serverpb::RaftApplyState::new())
    }

    pub fn get_apply_state(&self) -> &super::raft_serverpb::RaftApplyState {
        self.apply_state.as_ref().unwrap_or_else(|| super::raft_serverpb::RaftApplyState::default_instance())
    }

    // uint64 applied_term = 3;

    pub fn clear_applied_term(&mut self) {
        self.applied_term = 0;
    }

    // Param is passed by value, moved
    pub fn set_applied_term(&mut self, v: u64) {
        self.applied_term = v;
    }

    pub fn get_applied_term(&self) -> u64 {
        self.applied_term
    }
}

impl ::protobuf::Message for CommandResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.apply_state {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.apply_state)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.applied_term = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.apply_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.applied_term != 0 {
            my_size += ::protobuf::rt::value_size(3, self.applied_term, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.apply_state.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.applied_term != 0 {
            os.write_uint64(3, self.applied_term)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommandResponse {
        CommandResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CommandResponseHeader>>(
                    "header",
                    |m: &CommandResponse| { &m.header },
                    |m: &mut CommandResponse| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::raft_serverpb::RaftApplyState>>(
                    "apply_state",
                    |m: &CommandResponse| { &m.apply_state },
                    |m: &mut CommandResponse| { &mut m.apply_state },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "applied_term",
                    |m: &CommandResponse| { &m.applied_term },
                    |m: &mut CommandResponse| { &mut m.applied_term },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CommandResponse>(
                    "CommandResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CommandResponse {
        static mut instance: ::protobuf::lazy::Lazy<CommandResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CommandResponse,
        };
        unsafe {
            instance.get(CommandResponse::new)
        }
    }
}

impl ::protobuf::Clear for CommandResponse {
    fn clear(&mut self) {
        self.clear_header();
        self.clear_apply_state();
        self.clear_applied_term();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for CommandResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.header, "header", buf);
        crate::text::PbPrint::fmt(&self.apply_state, "apply_state", buf);
        crate::text::PbPrint::fmt(&self.applied_term, "applied_term", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for CommandResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.header, "header", &mut s);
        crate::text::PbPrint::fmt(&self.apply_state, "apply_state", &mut s);
        crate::text::PbPrint::fmt(&self.applied_term, "applied_term", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommandResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommandResponseBatch {
    // message fields
    pub responses: ::protobuf::RepeatedField<CommandResponse>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl CommandResponseBatch {
    pub fn new() -> CommandResponseBatch {
        ::std::default::Default::default()
    }

    // repeated .enginepb.CommandResponse responses = 1;

    pub fn clear_responses(&mut self) {
        self.responses.clear();
    }

    // Param is passed by value, moved
    pub fn set_responses(&mut self, v: ::protobuf::RepeatedField<CommandResponse>) {
        self.responses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_responses(&mut self) -> &mut ::protobuf::RepeatedField<CommandResponse> {
        &mut self.responses
    }

    // Take field
    pub fn take_responses(&mut self) -> ::protobuf::RepeatedField<CommandResponse> {
        ::std::mem::replace(&mut self.responses, ::protobuf::RepeatedField::new())
    }

    pub fn get_responses(&self) -> &[CommandResponse] {
        &self.responses
    }
}

impl ::protobuf::Message for CommandResponseBatch {
    fn is_initialized(&self) -> bool {
        for v in &self.responses {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.responses)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.responses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.responses {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommandResponseBatch {
        CommandResponseBatch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CommandResponse>>(
                    "responses",
                    |m: &CommandResponseBatch| { &m.responses },
                    |m: &mut CommandResponseBatch| { &mut m.responses },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CommandResponseBatch>(
                    "CommandResponseBatch",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CommandResponseBatch {
        static mut instance: ::protobuf::lazy::Lazy<CommandResponseBatch> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CommandResponseBatch,
        };
        unsafe {
            instance.get(CommandResponseBatch::new)
        }
    }
}

impl ::protobuf::Clear for CommandResponseBatch {
    fn clear(&mut self) {
        self.clear_responses();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for CommandResponseBatch {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.responses, "responses", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for CommandResponseBatch {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.responses, "responses", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommandResponseBatch {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SnapshotState {
    // message fields
    pub region: ::protobuf::SingularPtrField<super::metapb::Region>,
    pub peer: ::protobuf::SingularPtrField<super::metapb::Peer>,
    pub apply_state: ::protobuf::SingularPtrField<super::raft_serverpb::RaftApplyState>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl SnapshotState {
    pub fn new() -> SnapshotState {
        ::std::default::Default::default()
    }

    // .metapb.Region region = 1;

    pub fn clear_region(&mut self) {
        self.region.clear();
    }

    pub fn has_region(&self) -> bool {
        self.region.is_some()
    }

    // Param is passed by value, moved
    pub fn set_region(&mut self, v: super::metapb::Region) {
        self.region = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_region(&mut self) -> &mut super::metapb::Region {
        if self.region.is_none() {
            self.region.set_default();
        }
        self.region.as_mut().unwrap()
    }

    // Take field
    pub fn take_region(&mut self) -> super::metapb::Region {
        self.region.take().unwrap_or_else(|| super::metapb::Region::new())
    }

    pub fn get_region(&self) -> &super::metapb::Region {
        self.region.as_ref().unwrap_or_else(|| super::metapb::Region::default_instance())
    }

    // .metapb.Peer peer = 2;

    pub fn clear_peer(&mut self) {
        self.peer.clear();
    }

    pub fn has_peer(&self) -> bool {
        self.peer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_peer(&mut self, v: super::metapb::Peer) {
        self.peer = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_peer(&mut self) -> &mut super::metapb::Peer {
        if self.peer.is_none() {
            self.peer.set_default();
        }
        self.peer.as_mut().unwrap()
    }

    // Take field
    pub fn take_peer(&mut self) -> super::metapb::Peer {
        self.peer.take().unwrap_or_else(|| super::metapb::Peer::new())
    }

    pub fn get_peer(&self) -> &super::metapb::Peer {
        self.peer.as_ref().unwrap_or_else(|| super::metapb::Peer::default_instance())
    }

    // .raft_serverpb.RaftApplyState apply_state = 3;

    pub fn clear_apply_state(&mut self) {
        self.apply_state.clear();
    }

    pub fn has_apply_state(&self) -> bool {
        self.apply_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_apply_state(&mut self, v: super::raft_serverpb::RaftApplyState) {
        self.apply_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_apply_state(&mut self) -> &mut super::raft_serverpb::RaftApplyState {
        if self.apply_state.is_none() {
            self.apply_state.set_default();
        }
        self.apply_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_apply_state(&mut self) -> super::raft_serverpb::RaftApplyState {
        self.apply_state.take().unwrap_or_else(|| super::raft_serverpb::RaftApplyState::new())
    }

    pub fn get_apply_state(&self) -> &super::raft_serverpb::RaftApplyState {
        self.apply_state.as_ref().unwrap_or_else(|| super::raft_serverpb::RaftApplyState::default_instance())
    }
}

impl ::protobuf::Message for SnapshotState {
    fn is_initialized(&self) -> bool {
        for v in &self.region {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.peer {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.apply_state {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.region)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.peer)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.apply_state)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.region.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.peer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.apply_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.region.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.peer.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.apply_state.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SnapshotState {
        SnapshotState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::metapb::Region>>(
                    "region",
                    |m: &SnapshotState| { &m.region },
                    |m: &mut SnapshotState| { &mut m.region },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::metapb::Peer>>(
                    "peer",
                    |m: &SnapshotState| { &m.peer },
                    |m: &mut SnapshotState| { &mut m.peer },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::raft_serverpb::RaftApplyState>>(
                    "apply_state",
                    |m: &SnapshotState| { &m.apply_state },
                    |m: &mut SnapshotState| { &mut m.apply_state },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SnapshotState>(
                    "SnapshotState",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SnapshotState {
        static mut instance: ::protobuf::lazy::Lazy<SnapshotState> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SnapshotState,
        };
        unsafe {
            instance.get(SnapshotState::new)
        }
    }
}

impl ::protobuf::Clear for SnapshotState {
    fn clear(&mut self) {
        self.clear_region();
        self.clear_peer();
        self.clear_apply_state();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for SnapshotState {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.region, "region", buf);
        crate::text::PbPrint::fmt(&self.peer, "peer", buf);
        crate::text::PbPrint::fmt(&self.apply_state, "apply_state", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for SnapshotState {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.region, "region", &mut s);
        crate::text::PbPrint::fmt(&self.peer, "peer", &mut s);
        crate::text::PbPrint::fmt(&self.apply_state, "apply_state", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for SnapshotState {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SnapshotData {
    // message fields
    pub cf: ::std::string::String,
    pub checksum: u32,
    pub data: ::protobuf::RepeatedField<super::raft_serverpb::KeyValue>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl SnapshotData {
    pub fn new() -> SnapshotData {
        ::std::default::Default::default()
    }

    // string cf = 1;

    pub fn clear_cf(&mut self) {
        self.cf.clear();
    }

    // Param is passed by value, moved
    pub fn set_cf(&mut self, v: ::std::string::String) {
        self.cf = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cf(&mut self) -> &mut ::std::string::String {
        &mut self.cf
    }

    // Take field
    pub fn take_cf(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cf, ::std::string::String::new())
    }

    pub fn get_cf(&self) -> &str {
        &self.cf
    }

    // uint32 checksum = 2;

    pub fn clear_checksum(&mut self) {
        self.checksum = 0;
    }

    // Param is passed by value, moved
    pub fn set_checksum(&mut self, v: u32) {
        self.checksum = v;
    }

    pub fn get_checksum(&self) -> u32 {
        self.checksum
    }

    // repeated .raft_serverpb.KeyValue data = 3;

    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::protobuf::RepeatedField<super::raft_serverpb::KeyValue>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_data(&mut self) -> &mut ::protobuf::RepeatedField<super::raft_serverpb::KeyValue> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::protobuf::RepeatedField<super::raft_serverpb::KeyValue> {
        ::std::mem::replace(&mut self.data, ::protobuf::RepeatedField::new())
    }

    pub fn get_data(&self) -> &[super::raft_serverpb::KeyValue] {
        &self.data
    }
}

impl ::protobuf::Message for SnapshotData {
    fn is_initialized(&self) -> bool {
        for v in &self.data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cf)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.checksum = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.cf.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.cf);
        }
        if self.checksum != 0 {
            my_size += ::protobuf::rt::value_size(2, self.checksum, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.cf.is_empty() {
            os.write_string(1, &self.cf)?;
        }
        if self.checksum != 0 {
            os.write_uint32(2, self.checksum)?;
        }
        for v in &self.data {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SnapshotData {
        SnapshotData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "cf",
                    |m: &SnapshotData| { &m.cf },
                    |m: &mut SnapshotData| { &mut m.cf },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "checksum",
                    |m: &SnapshotData| { &m.checksum },
                    |m: &mut SnapshotData| { &mut m.checksum },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::raft_serverpb::KeyValue>>(
                    "data",
                    |m: &SnapshotData| { &m.data },
                    |m: &mut SnapshotData| { &mut m.data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SnapshotData>(
                    "SnapshotData",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SnapshotData {
        static mut instance: ::protobuf::lazy::Lazy<SnapshotData> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SnapshotData,
        };
        unsafe {
            instance.get(SnapshotData::new)
        }
    }
}

impl ::protobuf::Clear for SnapshotData {
    fn clear(&mut self) {
        self.clear_cf();
        self.clear_checksum();
        self.clear_data();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for SnapshotData {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.cf, "cf", buf);
        crate::text::PbPrint::fmt(&self.checksum, "checksum", buf);
        crate::text::PbPrint::fmt(&self.data, "data", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for SnapshotData {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.cf, "cf", &mut s);
        crate::text::PbPrint::fmt(&self.checksum, "checksum", &mut s);
        crate::text::PbPrint::fmt(&self.data, "data", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for SnapshotData {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SnapshotRequest {
    // message oneof groups
    pub chunk: ::std::option::Option<SnapshotRequest_oneof_chunk>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum SnapshotRequest_oneof_chunk {
    state(SnapshotState),
    data(SnapshotData),
}

impl crate::text::PbPrint for SnapshotRequest_oneof_chunk {
    fn fmt(&self, name: &str, buf: &mut String) {
        match self {
            SnapshotRequest_oneof_chunk::state(v) => crate::text::PbPrint::fmt(v, name, buf),
            SnapshotRequest_oneof_chunk::data(v) => crate::text::PbPrint::fmt(v, name, buf),
        }
    }
}

impl SnapshotRequest {
    pub fn new() -> SnapshotRequest {
        ::std::default::Default::default()
    }

    // .enginepb.SnapshotState state = 1;

    pub fn clear_state(&mut self) {
        self.chunk = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        match self.chunk {
            ::std::option::Option::Some(SnapshotRequest_oneof_chunk::state(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: SnapshotState) {
        self.chunk = ::std::option::Option::Some(SnapshotRequest_oneof_chunk::state(v))
    }

    // Mutable pointer to the field.
    pub fn mut_state(&mut self) -> &mut SnapshotState {
        if let ::std::option::Option::Some(SnapshotRequest_oneof_chunk::state(_)) = self.chunk {
        } else {
            self.chunk = ::std::option::Option::Some(SnapshotRequest_oneof_chunk::state(SnapshotState::new()));
        }
        match self.chunk {
            ::std::option::Option::Some(SnapshotRequest_oneof_chunk::state(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_state(&mut self) -> SnapshotState {
        if self.has_state() {
            match self.chunk.take() {
                ::std::option::Option::Some(SnapshotRequest_oneof_chunk::state(v)) => v,
                _ => panic!(),
            }
        } else {
            SnapshotState::new()
        }
    }

    pub fn get_state(&self) -> &SnapshotState {
        match self.chunk {
            ::std::option::Option::Some(SnapshotRequest_oneof_chunk::state(ref v)) => v,
            _ => SnapshotState::default_instance(),
        }
    }

    // .enginepb.SnapshotData data = 2;

    pub fn clear_data(&mut self) {
        self.chunk = ::std::option::Option::None;
    }

    pub fn has_data(&self) -> bool {
        match self.chunk {
            ::std::option::Option::Some(SnapshotRequest_oneof_chunk::data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: SnapshotData) {
        self.chunk = ::std::option::Option::Some(SnapshotRequest_oneof_chunk::data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_data(&mut self) -> &mut SnapshotData {
        if let ::std::option::Option::Some(SnapshotRequest_oneof_chunk::data(_)) = self.chunk {
        } else {
            self.chunk = ::std::option::Option::Some(SnapshotRequest_oneof_chunk::data(SnapshotData::new()));
        }
        match self.chunk {
            ::std::option::Option::Some(SnapshotRequest_oneof_chunk::data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_data(&mut self) -> SnapshotData {
        if self.has_data() {
            match self.chunk.take() {
                ::std::option::Option::Some(SnapshotRequest_oneof_chunk::data(v)) => v,
                _ => panic!(),
            }
        } else {
            SnapshotData::new()
        }
    }

    pub fn get_data(&self) -> &SnapshotData {
        match self.chunk {
            ::std::option::Option::Some(SnapshotRequest_oneof_chunk::data(ref v)) => v,
            _ => SnapshotData::default_instance(),
        }
    }
}

impl ::protobuf::Message for SnapshotRequest {
    fn is_initialized(&self) -> bool {
        if let Some(SnapshotRequest_oneof_chunk::state(ref v)) = self.chunk {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SnapshotRequest_oneof_chunk::data(ref v)) = self.chunk {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.chunk = ::std::option::Option::Some(SnapshotRequest_oneof_chunk::state(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.chunk = ::std::option::Option::Some(SnapshotRequest_oneof_chunk::data(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.chunk {
            match v {
                &SnapshotRequest_oneof_chunk::state(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SnapshotRequest_oneof_chunk::data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.chunk {
            match v {
                &SnapshotRequest_oneof_chunk::state(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SnapshotRequest_oneof_chunk::data(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SnapshotRequest {
        SnapshotRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SnapshotState>(
                    "state",
                    SnapshotRequest::has_state,
                    SnapshotRequest::get_state,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SnapshotData>(
                    "data",
                    SnapshotRequest::has_data,
                    SnapshotRequest::get_data,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SnapshotRequest>(
                    "SnapshotRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SnapshotRequest {
        static mut instance: ::protobuf::lazy::Lazy<SnapshotRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SnapshotRequest,
        };
        unsafe {
            instance.get(SnapshotRequest::new)
        }
    }
}

impl ::protobuf::Clear for SnapshotRequest {
    fn clear(&mut self) {
        self.clear_state();
        self.clear_data();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for SnapshotRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.chunk, "chunk", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for SnapshotRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.chunk, "chunk", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for SnapshotRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SnapshotDone {
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl SnapshotDone {
    pub fn new() -> SnapshotDone {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for SnapshotDone {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SnapshotDone {
        SnapshotDone::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<SnapshotDone>(
                    "SnapshotDone",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SnapshotDone {
        static mut instance: ::protobuf::lazy::Lazy<SnapshotDone> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SnapshotDone,
        };
        unsafe {
            instance.get(SnapshotDone::new)
        }
    }
}

impl ::protobuf::Clear for SnapshotDone {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for SnapshotDone {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
    }
}
impl ::std::fmt::Debug for SnapshotDone {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        Ok(())
    }
}

impl ::protobuf::reflect::ProtobufValue for SnapshotDone {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eenginepb.proto\x12\x08enginepb\x1a\x0cmetapb.proto\x1a\x10raft_cmd\
    pb.proto\x1a\x13raft_serverpb.proto\"\xac\x01\n\x14CommandRequestHeader\
    \x12\x1b\n\tregion_id\x18\x01\x20\x01(\x04R\x08regionId\x12\x14\n\x05ind\
    ex\x18\x02\x20\x01(\x04R\x05index\x12\x12\n\x04term\x18\x03\x20\x01(\x04\
    R\x04term\x12\x19\n\x08sync_log\x18\x04\x20\x01(\x08R\x07syncLog\x12\x18\
    \n\x07destroy\x18\x05\x20\x01(\x08R\x07destroy\x12\x18\n\x07context\x18\
    \x06\x20\x01(\x0cR\x07context\"\xfa\x01\n\x0eCommandRequest\x126\n\x06he\
    ader\x18\x01\x20\x01(\x0b2\x1e.enginepb.CommandRequestHeaderR\x06header\
    \x12/\n\x08requests\x18\x02\x20\x03(\x0b2\x13.raft_cmdpb.RequestR\x08req\
    uests\x12=\n\radmin_request\x18\x03\x20\x01(\x0b2\x18.raft_cmdpb.AdminRe\
    questR\x0cadminRequest\x12@\n\x0eadmin_response\x18\x04\x20\x01(\x0b2\
    \x19.raft_cmdpb.AdminResponseR\radminResponse\"K\n\x13CommandRequestBatc\
    h\x124\n\x08requests\x18\x01\x20\x03(\x0b2\x18.enginepb.CommandRequestR\
    \x08requests\"R\n\x15CommandResponseHeader\x12\x1b\n\tregion_id\x18\x01\
    \x20\x01(\x04R\x08regionId\x12\x1c\n\tdestroyed\x18\x02\x20\x01(\x08R\td\
    estroyed\"\xad\x01\n\x0fCommandResponse\x127\n\x06header\x18\x01\x20\x01\
    (\x0b2\x1f.enginepb.CommandResponseHeaderR\x06header\x12>\n\x0bapply_sta\
    te\x18\x02\x20\x01(\x0b2\x1d.raft_serverpb.RaftApplyStateR\napplyState\
    \x12!\n\x0capplied_term\x18\x03\x20\x01(\x04R\x0bappliedTerm\"O\n\x14Com\
    mandResponseBatch\x127\n\tresponses\x18\x01\x20\x03(\x0b2\x19.enginepb.C\
    ommandResponseR\tresponses\"\x99\x01\n\rSnapshotState\x12&\n\x06region\
    \x18\x01\x20\x01(\x0b2\x0e.metapb.RegionR\x06region\x12\x20\n\x04peer\
    \x18\x02\x20\x01(\x0b2\x0c.metapb.PeerR\x04peer\x12>\n\x0bapply_state\
    \x18\x03\x20\x01(\x0b2\x1d.raft_serverpb.RaftApplyStateR\napplyState\"g\
    \n\x0cSnapshotData\x12\x0e\n\x02cf\x18\x01\x20\x01(\tR\x02cf\x12\x1a\n\
    \x08checksum\x18\x02\x20\x01(\rR\x08checksum\x12+\n\x04data\x18\x03\x20\
    \x03(\x0b2\x17.raft_serverpb.KeyValueR\x04data\"y\n\x0fSnapshotRequest\
    \x12/\n\x05state\x18\x01\x20\x01(\x0b2\x17.enginepb.SnapshotStateH\0R\
    \x05state\x12,\n\x04data\x18\x02\x20\x01(\x0b2\x16.enginepb.SnapshotData\
    H\0R\x04dataB\x07\n\x05chunk\"\x0e\n\x0cSnapshotDone2\xaa\x01\n\x06Engin\
    e\x12X\n\x11ApplyCommandBatch\x12\x1d.enginepb.CommandRequestBatch\x1a\
    \x1e.enginepb.CommandResponseBatch\"\0(\x010\x01\x12F\n\rApplySnapshot\
    \x12\x19.enginepb.SnapshotRequest\x1a\x16.enginepb.SnapshotDone\"\0(\x01\
    b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
