// This file is generated by rust-protobuf 2.0.6. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct WaitForEntriesRequest {
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl WaitForEntriesRequest {
    pub fn new() -> WaitForEntriesRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for WaitForEntriesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WaitForEntriesRequest {
        WaitForEntriesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<WaitForEntriesRequest>(
                    "WaitForEntriesRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WaitForEntriesRequest {
        static mut instance: ::protobuf::lazy::Lazy<WaitForEntriesRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WaitForEntriesRequest,
        };
        unsafe {
            instance.get(WaitForEntriesRequest::new)
        }
    }
}

impl ::protobuf::Clear for WaitForEntriesRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for WaitForEntriesRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
    }
}
impl ::std::fmt::Debug for WaitForEntriesRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        Ok(())
    }
}

impl ::protobuf::reflect::ProtobufValue for WaitForEntriesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WaitForEntriesResponse {
    // message fields
    pub entries: ::protobuf::RepeatedField<WaitForEntry>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl WaitForEntriesResponse {
    pub fn new() -> WaitForEntriesResponse {
        ::std::default::Default::default()
    }

    // repeated .deadlockpb.WaitForEntry entries = 1;

    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<WaitForEntry>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<WaitForEntry> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<WaitForEntry> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }

    pub fn get_entries(&self) -> &[WaitForEntry] {
        &self.entries
    }
}

impl ::protobuf::Message for WaitForEntriesResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entries {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WaitForEntriesResponse {
        WaitForEntriesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WaitForEntry>>(
                    "entries",
                    |m: &WaitForEntriesResponse| { &m.entries },
                    |m: &mut WaitForEntriesResponse| { &mut m.entries },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<WaitForEntriesResponse>(
                    "WaitForEntriesResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WaitForEntriesResponse {
        static mut instance: ::protobuf::lazy::Lazy<WaitForEntriesResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WaitForEntriesResponse,
        };
        unsafe {
            instance.get(WaitForEntriesResponse::new)
        }
    }
}

impl ::protobuf::Clear for WaitForEntriesResponse {
    fn clear(&mut self) {
        self.clear_entries();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for WaitForEntriesResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.entries, "entries", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for WaitForEntriesResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.entries, "entries", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for WaitForEntriesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WaitForEntry {
    // message fields
    pub txn: u64,
    pub wait_for_txn: u64,
    pub key_hash: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl WaitForEntry {
    pub fn new() -> WaitForEntry {
        ::std::default::Default::default()
    }

    // uint64 txn = 1;

    pub fn clear_txn(&mut self) {
        self.txn = 0;
    }

    // Param is passed by value, moved
    pub fn set_txn(&mut self, v: u64) {
        self.txn = v;
    }

    pub fn get_txn(&self) -> u64 {
        self.txn
    }

    // uint64 wait_for_txn = 2;

    pub fn clear_wait_for_txn(&mut self) {
        self.wait_for_txn = 0;
    }

    // Param is passed by value, moved
    pub fn set_wait_for_txn(&mut self, v: u64) {
        self.wait_for_txn = v;
    }

    pub fn get_wait_for_txn(&self) -> u64 {
        self.wait_for_txn
    }

    // uint64 key_hash = 3;

    pub fn clear_key_hash(&mut self) {
        self.key_hash = 0;
    }

    // Param is passed by value, moved
    pub fn set_key_hash(&mut self, v: u64) {
        self.key_hash = v;
    }

    pub fn get_key_hash(&self) -> u64 {
        self.key_hash
    }
}

impl ::protobuf::Message for WaitForEntry {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.txn = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.wait_for_txn = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.key_hash = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.txn != 0 {
            my_size += ::protobuf::rt::value_size(1, self.txn, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.wait_for_txn != 0 {
            my_size += ::protobuf::rt::value_size(2, self.wait_for_txn, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.key_hash != 0 {
            my_size += ::protobuf::rt::value_size(3, self.key_hash, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.txn != 0 {
            os.write_uint64(1, self.txn)?;
        }
        if self.wait_for_txn != 0 {
            os.write_uint64(2, self.wait_for_txn)?;
        }
        if self.key_hash != 0 {
            os.write_uint64(3, self.key_hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WaitForEntry {
        WaitForEntry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "txn",
                    |m: &WaitForEntry| { &m.txn },
                    |m: &mut WaitForEntry| { &mut m.txn },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "wait_for_txn",
                    |m: &WaitForEntry| { &m.wait_for_txn },
                    |m: &mut WaitForEntry| { &mut m.wait_for_txn },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "key_hash",
                    |m: &WaitForEntry| { &m.key_hash },
                    |m: &mut WaitForEntry| { &mut m.key_hash },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<WaitForEntry>(
                    "WaitForEntry",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WaitForEntry {
        static mut instance: ::protobuf::lazy::Lazy<WaitForEntry> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WaitForEntry,
        };
        unsafe {
            instance.get(WaitForEntry::new)
        }
    }
}

impl ::protobuf::Clear for WaitForEntry {
    fn clear(&mut self) {
        self.clear_txn();
        self.clear_wait_for_txn();
        self.clear_key_hash();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for WaitForEntry {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.txn, "txn", buf);
        crate::text::PbPrint::fmt(&self.wait_for_txn, "wait_for_txn", buf);
        crate::text::PbPrint::fmt(&self.key_hash, "key_hash", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for WaitForEntry {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.txn, "txn", &mut s);
        crate::text::PbPrint::fmt(&self.wait_for_txn, "wait_for_txn", &mut s);
        crate::text::PbPrint::fmt(&self.key_hash, "key_hash", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for WaitForEntry {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeadlockRequest {
    // message fields
    pub tp: DeadlockRequestType,
    pub entry: ::protobuf::SingularPtrField<WaitForEntry>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl DeadlockRequest {
    pub fn new() -> DeadlockRequest {
        ::std::default::Default::default()
    }

    // .deadlockpb.DeadlockRequestType tp = 1;

    pub fn clear_tp(&mut self) {
        self.tp = DeadlockRequestType::Detect;
    }

    // Param is passed by value, moved
    pub fn set_tp(&mut self, v: DeadlockRequestType) {
        self.tp = v;
    }

    pub fn get_tp(&self) -> DeadlockRequestType {
        self.tp
    }

    // .deadlockpb.WaitForEntry entry = 2;

    pub fn clear_entry(&mut self) {
        self.entry.clear();
    }

    pub fn has_entry(&self) -> bool {
        self.entry.is_some()
    }

    // Param is passed by value, moved
    pub fn set_entry(&mut self, v: WaitForEntry) {
        self.entry = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entry(&mut self) -> &mut WaitForEntry {
        if self.entry.is_none() {
            self.entry.set_default();
        }
        self.entry.as_mut().unwrap()
    }

    // Take field
    pub fn take_entry(&mut self) -> WaitForEntry {
        self.entry.take().unwrap_or_else(|| WaitForEntry::new())
    }

    pub fn get_entry(&self) -> &WaitForEntry {
        self.entry.as_ref().unwrap_or_else(|| WaitForEntry::default_instance())
    }
}

impl ::protobuf::Message for DeadlockRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.entry {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.tp = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.entry)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.tp != DeadlockRequestType::Detect {
            my_size += ::protobuf::rt::enum_size(1, self.tp);
        }
        if let Some(ref v) = self.entry.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.tp != DeadlockRequestType::Detect {
            os.write_enum(1, self.tp.value())?;
        }
        if let Some(ref v) = self.entry.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeadlockRequest {
        DeadlockRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<DeadlockRequestType>>(
                    "tp",
                    |m: &DeadlockRequest| { &m.tp },
                    |m: &mut DeadlockRequest| { &mut m.tp },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WaitForEntry>>(
                    "entry",
                    |m: &DeadlockRequest| { &m.entry },
                    |m: &mut DeadlockRequest| { &mut m.entry },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeadlockRequest>(
                    "DeadlockRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeadlockRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeadlockRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeadlockRequest,
        };
        unsafe {
            instance.get(DeadlockRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeadlockRequest {
    fn clear(&mut self) {
        self.clear_tp();
        self.clear_entry();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for DeadlockRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.tp, "tp", buf);
        crate::text::PbPrint::fmt(&self.entry, "entry", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for DeadlockRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.tp, "tp", &mut s);
        crate::text::PbPrint::fmt(&self.entry, "entry", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeadlockRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeadlockResponse {
    // message fields
    pub entry: ::protobuf::SingularPtrField<WaitForEntry>,
    pub deadlock_key_hash: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl DeadlockResponse {
    pub fn new() -> DeadlockResponse {
        ::std::default::Default::default()
    }

    // .deadlockpb.WaitForEntry entry = 1;

    pub fn clear_entry(&mut self) {
        self.entry.clear();
    }

    pub fn has_entry(&self) -> bool {
        self.entry.is_some()
    }

    // Param is passed by value, moved
    pub fn set_entry(&mut self, v: WaitForEntry) {
        self.entry = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entry(&mut self) -> &mut WaitForEntry {
        if self.entry.is_none() {
            self.entry.set_default();
        }
        self.entry.as_mut().unwrap()
    }

    // Take field
    pub fn take_entry(&mut self) -> WaitForEntry {
        self.entry.take().unwrap_or_else(|| WaitForEntry::new())
    }

    pub fn get_entry(&self) -> &WaitForEntry {
        self.entry.as_ref().unwrap_or_else(|| WaitForEntry::default_instance())
    }

    // uint64 deadlock_key_hash = 2;

    pub fn clear_deadlock_key_hash(&mut self) {
        self.deadlock_key_hash = 0;
    }

    // Param is passed by value, moved
    pub fn set_deadlock_key_hash(&mut self, v: u64) {
        self.deadlock_key_hash = v;
    }

    pub fn get_deadlock_key_hash(&self) -> u64 {
        self.deadlock_key_hash
    }
}

impl ::protobuf::Message for DeadlockResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.entry {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.entry)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.deadlock_key_hash = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.entry.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.deadlock_key_hash != 0 {
            my_size += ::protobuf::rt::value_size(2, self.deadlock_key_hash, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.entry.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.deadlock_key_hash != 0 {
            os.write_uint64(2, self.deadlock_key_hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeadlockResponse {
        DeadlockResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WaitForEntry>>(
                    "entry",
                    |m: &DeadlockResponse| { &m.entry },
                    |m: &mut DeadlockResponse| { &mut m.entry },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "deadlock_key_hash",
                    |m: &DeadlockResponse| { &m.deadlock_key_hash },
                    |m: &mut DeadlockResponse| { &mut m.deadlock_key_hash },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeadlockResponse>(
                    "DeadlockResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeadlockResponse {
        static mut instance: ::protobuf::lazy::Lazy<DeadlockResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeadlockResponse,
        };
        unsafe {
            instance.get(DeadlockResponse::new)
        }
    }
}

impl ::protobuf::Clear for DeadlockResponse {
    fn clear(&mut self) {
        self.clear_entry();
        self.clear_deadlock_key_hash();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for DeadlockResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.entry, "entry", buf);
        crate::text::PbPrint::fmt(&self.deadlock_key_hash, "deadlock_key_hash", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for DeadlockResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.entry, "entry", &mut s);
        crate::text::PbPrint::fmt(&self.deadlock_key_hash, "deadlock_key_hash", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeadlockResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum DeadlockRequestType {
    Detect = 0,
    CleanUpWaitFor = 1,
    CleanUp = 2,
}

impl ::protobuf::ProtobufEnum for DeadlockRequestType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DeadlockRequestType> {
        match value {
            0 => ::std::option::Option::Some(DeadlockRequestType::Detect),
            1 => ::std::option::Option::Some(DeadlockRequestType::CleanUpWaitFor),
            2 => ::std::option::Option::Some(DeadlockRequestType::CleanUp),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [DeadlockRequestType] = &[
            DeadlockRequestType::Detect,
            DeadlockRequestType::CleanUpWaitFor,
            DeadlockRequestType::CleanUp,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("DeadlockRequestType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for DeadlockRequestType {
}

impl crate::text::PbPrint for DeadlockRequestType {
    fn fmt(&self, name: &str, buf: &mut String) {
        use std::fmt::Write;
        if *self == DeadlockRequestType::default() {
            return;
        }
        crate::text::push_field_start(name, buf);
        write!(buf, "{:?}", self).unwrap();
    }
}

impl ::std::default::Default for DeadlockRequestType {
    fn default() -> Self {
        DeadlockRequestType::Detect
    }
}

impl ::protobuf::reflect::ProtobufValue for DeadlockRequestType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0edeadlock.proto\x12\ndeadlockpb\x1a\x14gogoproto/gogo.proto\"\x17\n\
    \x15WaitForEntriesRequest\"R\n\x16WaitForEntriesResponse\x128\n\x07entri\
    es\x18\x01\x20\x03(\x0b2\x18.deadlockpb.WaitForEntryR\x07entriesB\x04\
    \xc8\xde\x1f\0\"]\n\x0cWaitForEntry\x12\x10\n\x03txn\x18\x01\x20\x01(\
    \x04R\x03txn\x12\x20\n\x0cwait_for_txn\x18\x02\x20\x01(\x04R\nwaitForTxn\
    \x12\x19\n\x08key_hash\x18\x03\x20\x01(\x04R\x07keyHash\"x\n\x0fDeadlock\
    Request\x12/\n\x02tp\x18\x01\x20\x01(\x0e2\x1f.deadlockpb.DeadlockReques\
    tTypeR\x02tp\x124\n\x05entry\x18\x02\x20\x01(\x0b2\x18.deadlockpb.WaitFo\
    rEntryR\x05entryB\x04\xc8\xde\x1f\0\"t\n\x10DeadlockResponse\x124\n\x05e\
    ntry\x18\x01\x20\x01(\x0b2\x18.deadlockpb.WaitForEntryR\x05entryB\x04\
    \xc8\xde\x1f\0\x12*\n\x11deadlock_key_hash\x18\x02\x20\x01(\x04R\x0fdead\
    lockKeyHash*B\n\x13DeadlockRequestType\x12\n\n\x06Detect\x10\0\x12\x12\n\
    \x0eCleanUpWaitFor\x10\x01\x12\x0b\n\x07CleanUp\x10\x022\xb3\x01\n\x08De\
    adlock\x12\\\n\x11GetWaitForEntries\x12!.deadlockpb.WaitForEntriesReques\
    t\x1a\".deadlockpb.WaitForEntriesResponse\"\0\x12I\n\x06Detect\x12\x1b.d\
    eadlockpb.DeadlockRequest\x1a\x1c.deadlockpb.DeadlockResponse\"\0(\x010\
    \x01b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
