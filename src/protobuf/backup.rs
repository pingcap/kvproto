// This file is generated by rust-protobuf 2.0.6. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct BackupMeta {
    // message fields
    pub cluster_id: u64,
    pub cluster_version: ::std::string::String,
    pub files: ::protobuf::RepeatedField<File>,
    pub start_version: u64,
    pub end_version: u64,
    pub schemas: ::protobuf::RepeatedField<Schema>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BackupMeta {
    pub fn new() -> BackupMeta {
        ::std::default::Default::default()
    }

    // uint64 cluster_id = 1;

    pub fn clear_cluster_id(&mut self) {
        self.cluster_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_cluster_id(&mut self, v: u64) {
        self.cluster_id = v;
    }

    pub fn get_cluster_id(&self) -> u64 {
        self.cluster_id
    }

    // string cluster_version = 2;

    pub fn clear_cluster_version(&mut self) {
        self.cluster_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster_version(&mut self, v: ::std::string::String) {
        self.cluster_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster_version(&mut self) -> &mut ::std::string::String {
        &mut self.cluster_version
    }

    // Take field
    pub fn take_cluster_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cluster_version, ::std::string::String::new())
    }

    pub fn get_cluster_version(&self) -> &str {
        &self.cluster_version
    }

    // repeated .backup.File files = 4;

    pub fn clear_files(&mut self) {
        self.files.clear();
    }

    // Param is passed by value, moved
    pub fn set_files(&mut self, v: ::protobuf::RepeatedField<File>) {
        self.files = v;
    }

    // Mutable pointer to the field.
    pub fn mut_files(&mut self) -> &mut ::protobuf::RepeatedField<File> {
        &mut self.files
    }

    // Take field
    pub fn take_files(&mut self) -> ::protobuf::RepeatedField<File> {
        ::std::mem::replace(&mut self.files, ::protobuf::RepeatedField::new())
    }

    pub fn get_files(&self) -> &[File] {
        &self.files
    }

    // uint64 start_version = 5;

    pub fn clear_start_version(&mut self) {
        self.start_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_version(&mut self, v: u64) {
        self.start_version = v;
    }

    pub fn get_start_version(&self) -> u64 {
        self.start_version
    }

    // uint64 end_version = 6;

    pub fn clear_end_version(&mut self) {
        self.end_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_end_version(&mut self, v: u64) {
        self.end_version = v;
    }

    pub fn get_end_version(&self) -> u64 {
        self.end_version
    }

    // repeated .backup.Schema schemas = 7;

    pub fn clear_schemas(&mut self) {
        self.schemas.clear();
    }

    // Param is passed by value, moved
    pub fn set_schemas(&mut self, v: ::protobuf::RepeatedField<Schema>) {
        self.schemas = v;
    }

    // Mutable pointer to the field.
    pub fn mut_schemas(&mut self) -> &mut ::protobuf::RepeatedField<Schema> {
        &mut self.schemas
    }

    // Take field
    pub fn take_schemas(&mut self) -> ::protobuf::RepeatedField<Schema> {
        ::std::mem::replace(&mut self.schemas, ::protobuf::RepeatedField::new())
    }

    pub fn get_schemas(&self) -> &[Schema] {
        &self.schemas
    }
}

impl ::protobuf::Message for BackupMeta {
    fn is_initialized(&self) -> bool {
        for v in &self.files {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.schemas {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.cluster_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cluster_version)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.files)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.start_version = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.end_version = tmp;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.schemas)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.cluster_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.cluster_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.cluster_version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.cluster_version);
        }
        for value in &self.files {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.start_version != 0 {
            my_size += ::protobuf::rt::value_size(5, self.start_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.end_version != 0 {
            my_size += ::protobuf::rt::value_size(6, self.end_version, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.schemas {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.cluster_id != 0 {
            os.write_uint64(1, self.cluster_id)?;
        }
        if !self.cluster_version.is_empty() {
            os.write_string(2, &self.cluster_version)?;
        }
        for v in &self.files {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.start_version != 0 {
            os.write_uint64(5, self.start_version)?;
        }
        if self.end_version != 0 {
            os.write_uint64(6, self.end_version)?;
        }
        for v in &self.schemas {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BackupMeta {
        BackupMeta::new()
    }

    fn default_instance() -> &'static BackupMeta {
        static mut instance: ::protobuf::lazy::Lazy<BackupMeta> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BackupMeta,
        };
        unsafe {
            instance.get(BackupMeta::new)
        }
    }
}

impl ::protobuf::Clear for BackupMeta {
    fn clear(&mut self) {
        self.clear_cluster_id();
        self.clear_cluster_version();
        self.clear_files();
        self.clear_start_version();
        self.clear_end_version();
        self.clear_schemas();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for BackupMeta {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.cluster_id, "cluster_id", buf);
        crate::text::PbPrint::fmt(&self.cluster_version, "cluster_version", buf);
        crate::text::PbPrint::fmt(&self.files, "files", buf);
        crate::text::PbPrint::fmt(&self.start_version, "start_version", buf);
        crate::text::PbPrint::fmt(&self.end_version, "end_version", buf);
        crate::text::PbPrint::fmt(&self.schemas, "schemas", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BackupMeta {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.cluster_id, "cluster_id", &mut s);
        crate::text::PbPrint::fmt(&self.cluster_version, "cluster_version", &mut s);
        crate::text::PbPrint::fmt(&self.files, "files", &mut s);
        crate::text::PbPrint::fmt(&self.start_version, "start_version", &mut s);
        crate::text::PbPrint::fmt(&self.end_version, "end_version", &mut s);
        crate::text::PbPrint::fmt(&self.schemas, "schemas", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BackupMeta {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct File {
    // message fields
    pub name: ::std::string::String,
    pub sha256: ::std::vec::Vec<u8>,
    pub start_key: ::std::vec::Vec<u8>,
    pub end_key: ::std::vec::Vec<u8>,
    pub start_version: u64,
    pub end_version: u64,
    pub crc64xor: u64,
    pub total_kvs: u64,
    pub total_bytes: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl File {
    pub fn new() -> File {
        ::std::default::Default::default()
    }

    // string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }

    // bytes sha256 = 2;

    pub fn clear_sha256(&mut self) {
        self.sha256.clear();
    }

    // Param is passed by value, moved
    pub fn set_sha256(&mut self, v: ::std::vec::Vec<u8>) {
        self.sha256 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sha256(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sha256
    }

    // Take field
    pub fn take_sha256(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sha256, ::std::vec::Vec::new())
    }

    pub fn get_sha256(&self) -> &[u8] {
        &self.sha256
    }

    // bytes start_key = 3;

    pub fn clear_start_key(&mut self) {
        self.start_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_start_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.start_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.start_key
    }

    // Take field
    pub fn take_start_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.start_key, ::std::vec::Vec::new())
    }

    pub fn get_start_key(&self) -> &[u8] {
        &self.start_key
    }

    // bytes end_key = 4;

    pub fn clear_end_key(&mut self) {
        self.end_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_end_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.end_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.end_key
    }

    // Take field
    pub fn take_end_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.end_key, ::std::vec::Vec::new())
    }

    pub fn get_end_key(&self) -> &[u8] {
        &self.end_key
    }

    // uint64 start_version = 5;

    pub fn clear_start_version(&mut self) {
        self.start_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_version(&mut self, v: u64) {
        self.start_version = v;
    }

    pub fn get_start_version(&self) -> u64 {
        self.start_version
    }

    // uint64 end_version = 6;

    pub fn clear_end_version(&mut self) {
        self.end_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_end_version(&mut self, v: u64) {
        self.end_version = v;
    }

    pub fn get_end_version(&self) -> u64 {
        self.end_version
    }

    // uint64 crc64xor = 7;

    pub fn clear_crc64xor(&mut self) {
        self.crc64xor = 0;
    }

    // Param is passed by value, moved
    pub fn set_crc64xor(&mut self, v: u64) {
        self.crc64xor = v;
    }

    pub fn get_crc64xor(&self) -> u64 {
        self.crc64xor
    }

    // uint64 total_kvs = 8;

    pub fn clear_total_kvs(&mut self) {
        self.total_kvs = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_kvs(&mut self, v: u64) {
        self.total_kvs = v;
    }

    pub fn get_total_kvs(&self) -> u64 {
        self.total_kvs
    }

    // uint64 total_bytes = 9;

    pub fn clear_total_bytes(&mut self) {
        self.total_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_bytes(&mut self, v: u64) {
        self.total_bytes = v;
    }

    pub fn get_total_bytes(&self) -> u64 {
        self.total_bytes
    }
}

impl ::protobuf::Message for File {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sha256)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.start_key)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.end_key)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.start_version = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.end_version = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.crc64xor = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.total_kvs = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.total_bytes = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.sha256.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.sha256);
        }
        if !self.start_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.start_key);
        }
        if !self.end_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.end_key);
        }
        if self.start_version != 0 {
            my_size += ::protobuf::rt::value_size(5, self.start_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.end_version != 0 {
            my_size += ::protobuf::rt::value_size(6, self.end_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.crc64xor != 0 {
            my_size += ::protobuf::rt::value_size(7, self.crc64xor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.total_kvs != 0 {
            my_size += ::protobuf::rt::value_size(8, self.total_kvs, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.total_bytes != 0 {
            my_size += ::protobuf::rt::value_size(9, self.total_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.sha256.is_empty() {
            os.write_bytes(2, &self.sha256)?;
        }
        if !self.start_key.is_empty() {
            os.write_bytes(3, &self.start_key)?;
        }
        if !self.end_key.is_empty() {
            os.write_bytes(4, &self.end_key)?;
        }
        if self.start_version != 0 {
            os.write_uint64(5, self.start_version)?;
        }
        if self.end_version != 0 {
            os.write_uint64(6, self.end_version)?;
        }
        if self.crc64xor != 0 {
            os.write_uint64(7, self.crc64xor)?;
        }
        if self.total_kvs != 0 {
            os.write_uint64(8, self.total_kvs)?;
        }
        if self.total_bytes != 0 {
            os.write_uint64(9, self.total_bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> File {
        File::new()
    }

    fn default_instance() -> &'static File {
        static mut instance: ::protobuf::lazy::Lazy<File> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const File,
        };
        unsafe {
            instance.get(File::new)
        }
    }
}

impl ::protobuf::Clear for File {
    fn clear(&mut self) {
        self.clear_name();
        self.clear_sha256();
        self.clear_start_key();
        self.clear_end_key();
        self.clear_start_version();
        self.clear_end_version();
        self.clear_crc64xor();
        self.clear_total_kvs();
        self.clear_total_bytes();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for File {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.name, "name", buf);
        crate::text::PbPrint::fmt(&self.sha256, "sha256", buf);
        crate::text::PbPrint::fmt(&self.start_key, "start_key", buf);
        crate::text::PbPrint::fmt(&self.end_key, "end_key", buf);
        crate::text::PbPrint::fmt(&self.start_version, "start_version", buf);
        crate::text::PbPrint::fmt(&self.end_version, "end_version", buf);
        crate::text::PbPrint::fmt(&self.crc64xor, "crc64xor", buf);
        crate::text::PbPrint::fmt(&self.total_kvs, "total_kvs", buf);
        crate::text::PbPrint::fmt(&self.total_bytes, "total_bytes", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for File {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.name, "name", &mut s);
        crate::text::PbPrint::fmt(&self.sha256, "sha256", &mut s);
        crate::text::PbPrint::fmt(&self.start_key, "start_key", &mut s);
        crate::text::PbPrint::fmt(&self.end_key, "end_key", &mut s);
        crate::text::PbPrint::fmt(&self.start_version, "start_version", &mut s);
        crate::text::PbPrint::fmt(&self.end_version, "end_version", &mut s);
        crate::text::PbPrint::fmt(&self.crc64xor, "crc64xor", &mut s);
        crate::text::PbPrint::fmt(&self.total_kvs, "total_kvs", &mut s);
        crate::text::PbPrint::fmt(&self.total_bytes, "total_bytes", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for File {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Schema {
    // message fields
    pub db: ::std::vec::Vec<u8>,
    pub table: ::std::vec::Vec<u8>,
    pub crc64xor: u64,
    pub total_kvs: u64,
    pub total_bytes: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Schema {
    pub fn new() -> Schema {
        ::std::default::Default::default()
    }

    // bytes db = 1;

    pub fn clear_db(&mut self) {
        self.db.clear();
    }

    // Param is passed by value, moved
    pub fn set_db(&mut self, v: ::std::vec::Vec<u8>) {
        self.db = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_db(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.db
    }

    // Take field
    pub fn take_db(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.db, ::std::vec::Vec::new())
    }

    pub fn get_db(&self) -> &[u8] {
        &self.db
    }

    // bytes table = 2;

    pub fn clear_table(&mut self) {
        self.table.clear();
    }

    // Param is passed by value, moved
    pub fn set_table(&mut self, v: ::std::vec::Vec<u8>) {
        self.table = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.table
    }

    // Take field
    pub fn take_table(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.table, ::std::vec::Vec::new())
    }

    pub fn get_table(&self) -> &[u8] {
        &self.table
    }

    // uint64 crc64xor = 3;

    pub fn clear_crc64xor(&mut self) {
        self.crc64xor = 0;
    }

    // Param is passed by value, moved
    pub fn set_crc64xor(&mut self, v: u64) {
        self.crc64xor = v;
    }

    pub fn get_crc64xor(&self) -> u64 {
        self.crc64xor
    }

    // uint64 total_kvs = 4;

    pub fn clear_total_kvs(&mut self) {
        self.total_kvs = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_kvs(&mut self, v: u64) {
        self.total_kvs = v;
    }

    pub fn get_total_kvs(&self) -> u64 {
        self.total_kvs
    }

    // uint64 total_bytes = 5;

    pub fn clear_total_bytes(&mut self) {
        self.total_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_bytes(&mut self, v: u64) {
        self.total_bytes = v;
    }

    pub fn get_total_bytes(&self) -> u64 {
        self.total_bytes
    }
}

impl ::protobuf::Message for Schema {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.db)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.table)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.crc64xor = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.total_kvs = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.total_bytes = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.db.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.db);
        }
        if !self.table.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.table);
        }
        if self.crc64xor != 0 {
            my_size += ::protobuf::rt::value_size(3, self.crc64xor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.total_kvs != 0 {
            my_size += ::protobuf::rt::value_size(4, self.total_kvs, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.total_bytes != 0 {
            my_size += ::protobuf::rt::value_size(5, self.total_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.db.is_empty() {
            os.write_bytes(1, &self.db)?;
        }
        if !self.table.is_empty() {
            os.write_bytes(2, &self.table)?;
        }
        if self.crc64xor != 0 {
            os.write_uint64(3, self.crc64xor)?;
        }
        if self.total_kvs != 0 {
            os.write_uint64(4, self.total_kvs)?;
        }
        if self.total_bytes != 0 {
            os.write_uint64(5, self.total_bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Schema {
        Schema::new()
    }

    fn default_instance() -> &'static Schema {
        static mut instance: ::protobuf::lazy::Lazy<Schema> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Schema,
        };
        unsafe {
            instance.get(Schema::new)
        }
    }
}

impl ::protobuf::Clear for Schema {
    fn clear(&mut self) {
        self.clear_db();
        self.clear_table();
        self.clear_crc64xor();
        self.clear_total_kvs();
        self.clear_total_bytes();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for Schema {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.db, "db", buf);
        crate::text::PbPrint::fmt(&self.table, "table", buf);
        crate::text::PbPrint::fmt(&self.crc64xor, "crc64xor", buf);
        crate::text::PbPrint::fmt(&self.total_kvs, "total_kvs", buf);
        crate::text::PbPrint::fmt(&self.total_bytes, "total_bytes", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for Schema {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.db, "db", &mut s);
        crate::text::PbPrint::fmt(&self.table, "table", &mut s);
        crate::text::PbPrint::fmt(&self.crc64xor, "crc64xor", &mut s);
        crate::text::PbPrint::fmt(&self.total_kvs, "total_kvs", &mut s);
        crate::text::PbPrint::fmt(&self.total_bytes, "total_bytes", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for Schema {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClusterIDError {
    // message fields
    pub current: u64,
    pub request: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ClusterIDError {
    pub fn new() -> ClusterIDError {
        ::std::default::Default::default()
    }

    // uint64 current = 1;

    pub fn clear_current(&mut self) {
        self.current = 0;
    }

    // Param is passed by value, moved
    pub fn set_current(&mut self, v: u64) {
        self.current = v;
    }

    pub fn get_current(&self) -> u64 {
        self.current
    }

    // uint64 request = 2;

    pub fn clear_request(&mut self) {
        self.request = 0;
    }

    // Param is passed by value, moved
    pub fn set_request(&mut self, v: u64) {
        self.request = v;
    }

    pub fn get_request(&self) -> u64 {
        self.request
    }
}

impl ::protobuf::Message for ClusterIDError {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.current = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.request = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.current != 0 {
            my_size += ::protobuf::rt::value_size(1, self.current, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.request != 0 {
            my_size += ::protobuf::rt::value_size(2, self.request, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.current != 0 {
            os.write_uint64(1, self.current)?;
        }
        if self.request != 0 {
            os.write_uint64(2, self.request)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClusterIDError {
        ClusterIDError::new()
    }

    fn default_instance() -> &'static ClusterIDError {
        static mut instance: ::protobuf::lazy::Lazy<ClusterIDError> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClusterIDError,
        };
        unsafe {
            instance.get(ClusterIDError::new)
        }
    }
}

impl ::protobuf::Clear for ClusterIDError {
    fn clear(&mut self) {
        self.clear_current();
        self.clear_request();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for ClusterIDError {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.current, "current", buf);
        crate::text::PbPrint::fmt(&self.request, "request", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for ClusterIDError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.current, "current", &mut s);
        crate::text::PbPrint::fmt(&self.request, "request", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClusterIDError {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Error {
    // message fields
    pub msg: ::std::string::String,
    // message oneof groups
    pub detail: ::std::option::Option<Error_oneof_detail>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum Error_oneof_detail {
    cluster_id_error(ClusterIDError),
    kv_error(super::kvrpcpb::KeyError),
    region_error(super::errorpb::Error),
}

impl crate::text::PbPrint for Error_oneof_detail {
    fn fmt(&self, name: &str, buf: &mut String) {
        match self {
            Error_oneof_detail::cluster_id_error(v) => crate::text::PbPrint::fmt(v, name, buf),
            Error_oneof_detail::kv_error(v) => crate::text::PbPrint::fmt(v, name, buf),
            Error_oneof_detail::region_error(v) => crate::text::PbPrint::fmt(v, name, buf),
        }
    }
}

impl Error {
    pub fn new() -> Error {
        ::std::default::Default::default()
    }

    // string msg = 1;

    pub fn clear_msg(&mut self) {
        self.msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_msg(&mut self, v: ::std::string::String) {
        self.msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_msg(&mut self) -> &mut ::std::string::String {
        &mut self.msg
    }

    // Take field
    pub fn take_msg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.msg, ::std::string::String::new())
    }

    pub fn get_msg(&self) -> &str {
        &self.msg
    }

    // .backup.ClusterIDError cluster_id_error = 3;

    pub fn clear_cluster_id_error(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_cluster_id_error(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::cluster_id_error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cluster_id_error(&mut self, v: ClusterIDError) {
        self.detail = ::std::option::Option::Some(Error_oneof_detail::cluster_id_error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cluster_id_error(&mut self) -> &mut ClusterIDError {
        if let ::std::option::Option::Some(Error_oneof_detail::cluster_id_error(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(Error_oneof_detail::cluster_id_error(ClusterIDError::new()));
        }
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::cluster_id_error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cluster_id_error(&mut self) -> ClusterIDError {
        if self.has_cluster_id_error() {
            match self.detail.take() {
                ::std::option::Option::Some(Error_oneof_detail::cluster_id_error(v)) => v,
                _ => panic!(),
            }
        } else {
            ClusterIDError::new()
        }
    }

    pub fn get_cluster_id_error(&self) -> &ClusterIDError {
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::cluster_id_error(ref v)) => v,
            _ => ClusterIDError::default_instance(),
        }
    }

    // .kvrpcpb.KeyError kv_error = 4;

    pub fn clear_kv_error(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_kv_error(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::kv_error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_kv_error(&mut self, v: super::kvrpcpb::KeyError) {
        self.detail = ::std::option::Option::Some(Error_oneof_detail::kv_error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_kv_error(&mut self) -> &mut super::kvrpcpb::KeyError {
        if let ::std::option::Option::Some(Error_oneof_detail::kv_error(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(Error_oneof_detail::kv_error(super::kvrpcpb::KeyError::new()));
        }
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::kv_error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_kv_error(&mut self) -> super::kvrpcpb::KeyError {
        if self.has_kv_error() {
            match self.detail.take() {
                ::std::option::Option::Some(Error_oneof_detail::kv_error(v)) => v,
                _ => panic!(),
            }
        } else {
            super::kvrpcpb::KeyError::new()
        }
    }

    pub fn get_kv_error(&self) -> &super::kvrpcpb::KeyError {
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::kv_error(ref v)) => v,
            _ => super::kvrpcpb::KeyError::default_instance(),
        }
    }

    // .errorpb.Error region_error = 5;

    pub fn clear_region_error(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_region_error(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::region_error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_region_error(&mut self, v: super::errorpb::Error) {
        self.detail = ::std::option::Option::Some(Error_oneof_detail::region_error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_region_error(&mut self) -> &mut super::errorpb::Error {
        if let ::std::option::Option::Some(Error_oneof_detail::region_error(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(Error_oneof_detail::region_error(super::errorpb::Error::new()));
        }
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::region_error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_region_error(&mut self) -> super::errorpb::Error {
        if self.has_region_error() {
            match self.detail.take() {
                ::std::option::Option::Some(Error_oneof_detail::region_error(v)) => v,
                _ => panic!(),
            }
        } else {
            super::errorpb::Error::new()
        }
    }

    pub fn get_region_error(&self) -> &super::errorpb::Error {
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::region_error(ref v)) => v,
            _ => super::errorpb::Error::default_instance(),
        }
    }
}

impl ::protobuf::Message for Error {
    fn is_initialized(&self) -> bool {
        if let Some(Error_oneof_detail::cluster_id_error(ref v)) = self.detail {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Error_oneof_detail::kv_error(ref v)) = self.detail {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Error_oneof_detail::region_error(ref v)) = self.detail {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.msg)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.detail = ::std::option::Option::Some(Error_oneof_detail::cluster_id_error(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.detail = ::std::option::Option::Some(Error_oneof_detail::kv_error(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.detail = ::std::option::Option::Some(Error_oneof_detail::region_error(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.msg);
        }
        if let ::std::option::Option::Some(ref v) = self.detail {
            match v {
                &Error_oneof_detail::cluster_id_error(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Error_oneof_detail::kv_error(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Error_oneof_detail::region_error(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.msg.is_empty() {
            os.write_string(1, &self.msg)?;
        }
        if let ::std::option::Option::Some(ref v) = self.detail {
            match v {
                &Error_oneof_detail::cluster_id_error(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Error_oneof_detail::kv_error(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Error_oneof_detail::region_error(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Error {
        Error::new()
    }

    fn default_instance() -> &'static Error {
        static mut instance: ::protobuf::lazy::Lazy<Error> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Error,
        };
        unsafe {
            instance.get(Error::new)
        }
    }
}

impl ::protobuf::Clear for Error {
    fn clear(&mut self) {
        self.clear_msg();
        self.clear_cluster_id_error();
        self.clear_kv_error();
        self.clear_region_error();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for Error {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.msg, "msg", buf);
        crate::text::PbPrint::fmt(&self.detail, "detail", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for Error {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.msg, "msg", &mut s);
        crate::text::PbPrint::fmt(&self.detail, "detail", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for Error {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BackupRequest {
    // message fields
    pub cluster_id: u64,
    pub start_key: ::std::vec::Vec<u8>,
    pub end_key: ::std::vec::Vec<u8>,
    pub start_version: u64,
    pub end_version: u64,
    pub rate_limit: u64,
    pub concurrency: u32,
    pub storage_backend: ::protobuf::SingularPtrField<StorageBackend>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BackupRequest {
    pub fn new() -> BackupRequest {
        ::std::default::Default::default()
    }

    // uint64 cluster_id = 1;

    pub fn clear_cluster_id(&mut self) {
        self.cluster_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_cluster_id(&mut self, v: u64) {
        self.cluster_id = v;
    }

    pub fn get_cluster_id(&self) -> u64 {
        self.cluster_id
    }

    // bytes start_key = 2;

    pub fn clear_start_key(&mut self) {
        self.start_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_start_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.start_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.start_key
    }

    // Take field
    pub fn take_start_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.start_key, ::std::vec::Vec::new())
    }

    pub fn get_start_key(&self) -> &[u8] {
        &self.start_key
    }

    // bytes end_key = 3;

    pub fn clear_end_key(&mut self) {
        self.end_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_end_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.end_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.end_key
    }

    // Take field
    pub fn take_end_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.end_key, ::std::vec::Vec::new())
    }

    pub fn get_end_key(&self) -> &[u8] {
        &self.end_key
    }

    // uint64 start_version = 4;

    pub fn clear_start_version(&mut self) {
        self.start_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_version(&mut self, v: u64) {
        self.start_version = v;
    }

    pub fn get_start_version(&self) -> u64 {
        self.start_version
    }

    // uint64 end_version = 5;

    pub fn clear_end_version(&mut self) {
        self.end_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_end_version(&mut self, v: u64) {
        self.end_version = v;
    }

    pub fn get_end_version(&self) -> u64 {
        self.end_version
    }

    // uint64 rate_limit = 7;

    pub fn clear_rate_limit(&mut self) {
        self.rate_limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_rate_limit(&mut self, v: u64) {
        self.rate_limit = v;
    }

    pub fn get_rate_limit(&self) -> u64 {
        self.rate_limit
    }

    // uint32 concurrency = 8;

    pub fn clear_concurrency(&mut self) {
        self.concurrency = 0;
    }

    // Param is passed by value, moved
    pub fn set_concurrency(&mut self, v: u32) {
        self.concurrency = v;
    }

    pub fn get_concurrency(&self) -> u32 {
        self.concurrency
    }

    // .backup.StorageBackend storage_backend = 9;

    pub fn clear_storage_backend(&mut self) {
        self.storage_backend.clear();
    }

    pub fn has_storage_backend(&self) -> bool {
        self.storage_backend.is_some()
    }

    // Param is passed by value, moved
    pub fn set_storage_backend(&mut self, v: StorageBackend) {
        self.storage_backend = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storage_backend(&mut self) -> &mut StorageBackend {
        if self.storage_backend.is_none() {
            self.storage_backend.set_default();
        }
        self.storage_backend.as_mut().unwrap()
    }

    // Take field
    pub fn take_storage_backend(&mut self) -> StorageBackend {
        self.storage_backend.take().unwrap_or_else(|| StorageBackend::new())
    }

    pub fn get_storage_backend(&self) -> &StorageBackend {
        self.storage_backend.as_ref().unwrap_or_else(|| StorageBackend::default_instance())
    }
}

impl ::protobuf::Message for BackupRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.storage_backend {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.cluster_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.start_key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.end_key)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.start_version = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.end_version = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.rate_limit = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.concurrency = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.storage_backend)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.cluster_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.cluster_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.start_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.start_key);
        }
        if !self.end_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.end_key);
        }
        if self.start_version != 0 {
            my_size += ::protobuf::rt::value_size(4, self.start_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.end_version != 0 {
            my_size += ::protobuf::rt::value_size(5, self.end_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rate_limit != 0 {
            my_size += ::protobuf::rt::value_size(7, self.rate_limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.concurrency != 0 {
            my_size += ::protobuf::rt::value_size(8, self.concurrency, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.storage_backend.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.cluster_id != 0 {
            os.write_uint64(1, self.cluster_id)?;
        }
        if !self.start_key.is_empty() {
            os.write_bytes(2, &self.start_key)?;
        }
        if !self.end_key.is_empty() {
            os.write_bytes(3, &self.end_key)?;
        }
        if self.start_version != 0 {
            os.write_uint64(4, self.start_version)?;
        }
        if self.end_version != 0 {
            os.write_uint64(5, self.end_version)?;
        }
        if self.rate_limit != 0 {
            os.write_uint64(7, self.rate_limit)?;
        }
        if self.concurrency != 0 {
            os.write_uint32(8, self.concurrency)?;
        }
        if let Some(ref v) = self.storage_backend.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BackupRequest {
        BackupRequest::new()
    }

    fn default_instance() -> &'static BackupRequest {
        static mut instance: ::protobuf::lazy::Lazy<BackupRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BackupRequest,
        };
        unsafe {
            instance.get(BackupRequest::new)
        }
    }
}

impl ::protobuf::Clear for BackupRequest {
    fn clear(&mut self) {
        self.clear_cluster_id();
        self.clear_start_key();
        self.clear_end_key();
        self.clear_start_version();
        self.clear_end_version();
        self.clear_rate_limit();
        self.clear_concurrency();
        self.clear_storage_backend();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for BackupRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.cluster_id, "cluster_id", buf);
        crate::text::PbPrint::fmt(&self.start_key, "start_key", buf);
        crate::text::PbPrint::fmt(&self.end_key, "end_key", buf);
        crate::text::PbPrint::fmt(&self.start_version, "start_version", buf);
        crate::text::PbPrint::fmt(&self.end_version, "end_version", buf);
        crate::text::PbPrint::fmt(&self.rate_limit, "rate_limit", buf);
        crate::text::PbPrint::fmt(&self.concurrency, "concurrency", buf);
        crate::text::PbPrint::fmt(&self.storage_backend, "storage_backend", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BackupRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.cluster_id, "cluster_id", &mut s);
        crate::text::PbPrint::fmt(&self.start_key, "start_key", &mut s);
        crate::text::PbPrint::fmt(&self.end_key, "end_key", &mut s);
        crate::text::PbPrint::fmt(&self.start_version, "start_version", &mut s);
        crate::text::PbPrint::fmt(&self.end_version, "end_version", &mut s);
        crate::text::PbPrint::fmt(&self.rate_limit, "rate_limit", &mut s);
        crate::text::PbPrint::fmt(&self.concurrency, "concurrency", &mut s);
        crate::text::PbPrint::fmt(&self.storage_backend, "storage_backend", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BackupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StorageBackend {
    // message oneof groups
    pub backend: ::std::option::Option<StorageBackend_oneof_backend>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum StorageBackend_oneof_backend {
    noop(Noop),
    local(Local),
    s3(S3),
}

impl crate::text::PbPrint for StorageBackend_oneof_backend {
    fn fmt(&self, name: &str, buf: &mut String) {
        match self {
            StorageBackend_oneof_backend::noop(v) => crate::text::PbPrint::fmt(v, name, buf),
            StorageBackend_oneof_backend::local(v) => crate::text::PbPrint::fmt(v, name, buf),
            StorageBackend_oneof_backend::s3(v) => crate::text::PbPrint::fmt(v, name, buf),
        }
    }
}

impl StorageBackend {
    pub fn new() -> StorageBackend {
        ::std::default::Default::default()
    }

    // .backup.Noop noop = 1;

    pub fn clear_noop(&mut self) {
        self.backend = ::std::option::Option::None;
    }

    pub fn has_noop(&self) -> bool {
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::noop(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_noop(&mut self, v: Noop) {
        self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::noop(v))
    }

    // Mutable pointer to the field.
    pub fn mut_noop(&mut self) -> &mut Noop {
        if let ::std::option::Option::Some(StorageBackend_oneof_backend::noop(_)) = self.backend {
        } else {
            self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::noop(Noop::new()));
        }
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::noop(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_noop(&mut self) -> Noop {
        if self.has_noop() {
            match self.backend.take() {
                ::std::option::Option::Some(StorageBackend_oneof_backend::noop(v)) => v,
                _ => panic!(),
            }
        } else {
            Noop::new()
        }
    }

    pub fn get_noop(&self) -> &Noop {
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::noop(ref v)) => v,
            _ => Noop::default_instance(),
        }
    }

    // .backup.Local local = 2;

    pub fn clear_local(&mut self) {
        self.backend = ::std::option::Option::None;
    }

    pub fn has_local(&self) -> bool {
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::local(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_local(&mut self, v: Local) {
        self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::local(v))
    }

    // Mutable pointer to the field.
    pub fn mut_local(&mut self) -> &mut Local {
        if let ::std::option::Option::Some(StorageBackend_oneof_backend::local(_)) = self.backend {
        } else {
            self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::local(Local::new()));
        }
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::local(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_local(&mut self) -> Local {
        if self.has_local() {
            match self.backend.take() {
                ::std::option::Option::Some(StorageBackend_oneof_backend::local(v)) => v,
                _ => panic!(),
            }
        } else {
            Local::new()
        }
    }

    pub fn get_local(&self) -> &Local {
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::local(ref v)) => v,
            _ => Local::default_instance(),
        }
    }

    // .backup.S3 s3 = 3;

    pub fn clear_s3(&mut self) {
        self.backend = ::std::option::Option::None;
    }

    pub fn has_s3(&self) -> bool {
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::s3(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_s3(&mut self, v: S3) {
        self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::s3(v))
    }

    // Mutable pointer to the field.
    pub fn mut_s3(&mut self) -> &mut S3 {
        if let ::std::option::Option::Some(StorageBackend_oneof_backend::s3(_)) = self.backend {
        } else {
            self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::s3(S3::new()));
        }
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::s3(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_s3(&mut self) -> S3 {
        if self.has_s3() {
            match self.backend.take() {
                ::std::option::Option::Some(StorageBackend_oneof_backend::s3(v)) => v,
                _ => panic!(),
            }
        } else {
            S3::new()
        }
    }

    pub fn get_s3(&self) -> &S3 {
        match self.backend {
            ::std::option::Option::Some(StorageBackend_oneof_backend::s3(ref v)) => v,
            _ => S3::default_instance(),
        }
    }
}

impl ::protobuf::Message for StorageBackend {
    fn is_initialized(&self) -> bool {
        if let Some(StorageBackend_oneof_backend::noop(ref v)) = self.backend {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StorageBackend_oneof_backend::local(ref v)) = self.backend {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StorageBackend_oneof_backend::s3(ref v)) = self.backend {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::noop(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::local(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.backend = ::std::option::Option::Some(StorageBackend_oneof_backend::s3(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.backend {
            match v {
                &StorageBackend_oneof_backend::noop(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StorageBackend_oneof_backend::local(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StorageBackend_oneof_backend::s3(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.backend {
            match v {
                &StorageBackend_oneof_backend::noop(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StorageBackend_oneof_backend::local(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StorageBackend_oneof_backend::s3(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StorageBackend {
        StorageBackend::new()
    }

    fn default_instance() -> &'static StorageBackend {
        static mut instance: ::protobuf::lazy::Lazy<StorageBackend> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StorageBackend,
        };
        unsafe {
            instance.get(StorageBackend::new)
        }
    }
}

impl ::protobuf::Clear for StorageBackend {
    fn clear(&mut self) {
        self.clear_noop();
        self.clear_local();
        self.clear_s3();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for StorageBackend {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.backend, "backend", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for StorageBackend {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.backend, "backend", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageBackend {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Noop {
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Noop {
    pub fn new() -> Noop {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Noop {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Noop {
        Noop::new()
    }

    fn default_instance() -> &'static Noop {
        static mut instance: ::protobuf::lazy::Lazy<Noop> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Noop,
        };
        unsafe {
            instance.get(Noop::new)
        }
    }
}

impl ::protobuf::Clear for Noop {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for Noop {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
    }
}
impl ::std::fmt::Debug for Noop {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        Ok(())
    }
}

impl ::protobuf::reflect::ProtobufValue for Noop {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Local {
    // message fields
    pub path: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Local {
    pub fn new() -> Local {
        ::std::default::Default::default()
    }

    // string path = 1;

    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    pub fn get_path(&self) -> &str {
        &self.path
    }
}

impl ::protobuf::Message for Local {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Local {
        Local::new()
    }

    fn default_instance() -> &'static Local {
        static mut instance: ::protobuf::lazy::Lazy<Local> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Local,
        };
        unsafe {
            instance.get(Local::new)
        }
    }
}

impl ::protobuf::Clear for Local {
    fn clear(&mut self) {
        self.clear_path();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for Local {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.path, "path", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for Local {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.path, "path", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for Local {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct S3 {
    // message fields
    pub endpoint: ::std::string::String,
    pub region: ::std::string::String,
    pub bucket: ::std::string::String,
    pub prefix: ::std::string::String,
    pub storage_class: ::std::string::String,
    pub sse: ::std::string::String,
    pub acl: ::std::string::String,
    pub access_key: ::std::string::String,
    pub secret_access_key: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl S3 {
    pub fn new() -> S3 {
        ::std::default::Default::default()
    }

    // string endpoint = 1;

    pub fn clear_endpoint(&mut self) {
        self.endpoint.clear();
    }

    // Param is passed by value, moved
    pub fn set_endpoint(&mut self, v: ::std::string::String) {
        self.endpoint = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_endpoint(&mut self) -> &mut ::std::string::String {
        &mut self.endpoint
    }

    // Take field
    pub fn take_endpoint(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.endpoint, ::std::string::String::new())
    }

    pub fn get_endpoint(&self) -> &str {
        &self.endpoint
    }

    // string region = 2;

    pub fn clear_region(&mut self) {
        self.region.clear();
    }

    // Param is passed by value, moved
    pub fn set_region(&mut self, v: ::std::string::String) {
        self.region = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_region(&mut self) -> &mut ::std::string::String {
        &mut self.region
    }

    // Take field
    pub fn take_region(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.region, ::std::string::String::new())
    }

    pub fn get_region(&self) -> &str {
        &self.region
    }

    // string bucket = 3;

    pub fn clear_bucket(&mut self) {
        self.bucket.clear();
    }

    // Param is passed by value, moved
    pub fn set_bucket(&mut self, v: ::std::string::String) {
        self.bucket = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bucket(&mut self) -> &mut ::std::string::String {
        &mut self.bucket
    }

    // Take field
    pub fn take_bucket(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bucket, ::std::string::String::new())
    }

    pub fn get_bucket(&self) -> &str {
        &self.bucket
    }

    // string prefix = 4;

    pub fn clear_prefix(&mut self) {
        self.prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_prefix(&mut self, v: ::std::string::String) {
        self.prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.prefix
    }

    // Take field
    pub fn take_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prefix, ::std::string::String::new())
    }

    pub fn get_prefix(&self) -> &str {
        &self.prefix
    }

    // string storage_class = 5;

    pub fn clear_storage_class(&mut self) {
        self.storage_class.clear();
    }

    // Param is passed by value, moved
    pub fn set_storage_class(&mut self, v: ::std::string::String) {
        self.storage_class = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storage_class(&mut self) -> &mut ::std::string::String {
        &mut self.storage_class
    }

    // Take field
    pub fn take_storage_class(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.storage_class, ::std::string::String::new())
    }

    pub fn get_storage_class(&self) -> &str {
        &self.storage_class
    }

    // string sse = 6;

    pub fn clear_sse(&mut self) {
        self.sse.clear();
    }

    // Param is passed by value, moved
    pub fn set_sse(&mut self, v: ::std::string::String) {
        self.sse = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sse(&mut self) -> &mut ::std::string::String {
        &mut self.sse
    }

    // Take field
    pub fn take_sse(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sse, ::std::string::String::new())
    }

    pub fn get_sse(&self) -> &str {
        &self.sse
    }

    // string acl = 7;

    pub fn clear_acl(&mut self) {
        self.acl.clear();
    }

    // Param is passed by value, moved
    pub fn set_acl(&mut self, v: ::std::string::String) {
        self.acl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acl(&mut self) -> &mut ::std::string::String {
        &mut self.acl
    }

    // Take field
    pub fn take_acl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acl, ::std::string::String::new())
    }

    pub fn get_acl(&self) -> &str {
        &self.acl
    }

    // string access_key = 8;

    pub fn clear_access_key(&mut self) {
        self.access_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_access_key(&mut self, v: ::std::string::String) {
        self.access_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_access_key(&mut self) -> &mut ::std::string::String {
        &mut self.access_key
    }

    // Take field
    pub fn take_access_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.access_key, ::std::string::String::new())
    }

    pub fn get_access_key(&self) -> &str {
        &self.access_key
    }

    // string secret_access_key = 9;

    pub fn clear_secret_access_key(&mut self) {
        self.secret_access_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_secret_access_key(&mut self, v: ::std::string::String) {
        self.secret_access_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secret_access_key(&mut self) -> &mut ::std::string::String {
        &mut self.secret_access_key
    }

    // Take field
    pub fn take_secret_access_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.secret_access_key, ::std::string::String::new())
    }

    pub fn get_secret_access_key(&self) -> &str {
        &self.secret_access_key
    }
}

impl ::protobuf::Message for S3 {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.endpoint)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.region)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bucket)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prefix)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.storage_class)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sse)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acl)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.access_key)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.secret_access_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.endpoint.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.endpoint);
        }
        if !self.region.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.region);
        }
        if !self.bucket.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.bucket);
        }
        if !self.prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.prefix);
        }
        if !self.storage_class.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.storage_class);
        }
        if !self.sse.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.sse);
        }
        if !self.acl.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.acl);
        }
        if !self.access_key.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.access_key);
        }
        if !self.secret_access_key.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.secret_access_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.endpoint.is_empty() {
            os.write_string(1, &self.endpoint)?;
        }
        if !self.region.is_empty() {
            os.write_string(2, &self.region)?;
        }
        if !self.bucket.is_empty() {
            os.write_string(3, &self.bucket)?;
        }
        if !self.prefix.is_empty() {
            os.write_string(4, &self.prefix)?;
        }
        if !self.storage_class.is_empty() {
            os.write_string(5, &self.storage_class)?;
        }
        if !self.sse.is_empty() {
            os.write_string(6, &self.sse)?;
        }
        if !self.acl.is_empty() {
            os.write_string(7, &self.acl)?;
        }
        if !self.access_key.is_empty() {
            os.write_string(8, &self.access_key)?;
        }
        if !self.secret_access_key.is_empty() {
            os.write_string(9, &self.secret_access_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> S3 {
        S3::new()
    }

    fn default_instance() -> &'static S3 {
        static mut instance: ::protobuf::lazy::Lazy<S3> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const S3,
        };
        unsafe {
            instance.get(S3::new)
        }
    }
}

impl ::protobuf::Clear for S3 {
    fn clear(&mut self) {
        self.clear_endpoint();
        self.clear_region();
        self.clear_bucket();
        self.clear_prefix();
        self.clear_storage_class();
        self.clear_sse();
        self.clear_acl();
        self.clear_access_key();
        self.clear_secret_access_key();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for S3 {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.endpoint, "endpoint", buf);
        crate::text::PbPrint::fmt(&self.region, "region", buf);
        crate::text::PbPrint::fmt(&self.bucket, "bucket", buf);
        crate::text::PbPrint::fmt(&self.prefix, "prefix", buf);
        crate::text::PbPrint::fmt(&self.storage_class, "storage_class", buf);
        crate::text::PbPrint::fmt(&self.sse, "sse", buf);
        crate::text::PbPrint::fmt(&self.acl, "acl", buf);
        crate::text::PbPrint::fmt(&self.access_key, "access_key", buf);
        crate::text::PbPrint::fmt(&self.secret_access_key, "secret_access_key", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for S3 {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.endpoint, "endpoint", &mut s);
        crate::text::PbPrint::fmt(&self.region, "region", &mut s);
        crate::text::PbPrint::fmt(&self.bucket, "bucket", &mut s);
        crate::text::PbPrint::fmt(&self.prefix, "prefix", &mut s);
        crate::text::PbPrint::fmt(&self.storage_class, "storage_class", &mut s);
        crate::text::PbPrint::fmt(&self.sse, "sse", &mut s);
        crate::text::PbPrint::fmt(&self.acl, "acl", &mut s);
        crate::text::PbPrint::fmt(&self.access_key, "access_key", &mut s);
        crate::text::PbPrint::fmt(&self.secret_access_key, "secret_access_key", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for S3 {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BackupResponse {
    // message fields
    pub error: ::protobuf::SingularPtrField<Error>,
    pub start_key: ::std::vec::Vec<u8>,
    pub end_key: ::std::vec::Vec<u8>,
    pub files: ::protobuf::RepeatedField<File>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BackupResponse {
    pub fn new() -> BackupResponse {
        ::std::default::Default::default()
    }

    // .backup.Error error = 1;

    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: Error) {
        self.error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut Error {
        if self.error.is_none() {
            self.error.set_default();
        }
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> Error {
        self.error.take().unwrap_or_else(|| Error::new())
    }

    pub fn get_error(&self) -> &Error {
        self.error.as_ref().unwrap_or_else(|| Error::default_instance())
    }

    // bytes start_key = 2;

    pub fn clear_start_key(&mut self) {
        self.start_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_start_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.start_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.start_key
    }

    // Take field
    pub fn take_start_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.start_key, ::std::vec::Vec::new())
    }

    pub fn get_start_key(&self) -> &[u8] {
        &self.start_key
    }

    // bytes end_key = 3;

    pub fn clear_end_key(&mut self) {
        self.end_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_end_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.end_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.end_key
    }

    // Take field
    pub fn take_end_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.end_key, ::std::vec::Vec::new())
    }

    pub fn get_end_key(&self) -> &[u8] {
        &self.end_key
    }

    // repeated .backup.File files = 4;

    pub fn clear_files(&mut self) {
        self.files.clear();
    }

    // Param is passed by value, moved
    pub fn set_files(&mut self, v: ::protobuf::RepeatedField<File>) {
        self.files = v;
    }

    // Mutable pointer to the field.
    pub fn mut_files(&mut self) -> &mut ::protobuf::RepeatedField<File> {
        &mut self.files
    }

    // Take field
    pub fn take_files(&mut self) -> ::protobuf::RepeatedField<File> {
        ::std::mem::replace(&mut self.files, ::protobuf::RepeatedField::new())
    }

    pub fn get_files(&self) -> &[File] {
        &self.files
    }
}

impl ::protobuf::Message for BackupResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.error {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.files {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.start_key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.end_key)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.files)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.error.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.start_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.start_key);
        }
        if !self.end_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.end_key);
        }
        for value in &self.files {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.error.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.start_key.is_empty() {
            os.write_bytes(2, &self.start_key)?;
        }
        if !self.end_key.is_empty() {
            os.write_bytes(3, &self.end_key)?;
        }
        for v in &self.files {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BackupResponse {
        BackupResponse::new()
    }

    fn default_instance() -> &'static BackupResponse {
        static mut instance: ::protobuf::lazy::Lazy<BackupResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BackupResponse,
        };
        unsafe {
            instance.get(BackupResponse::new)
        }
    }
}

impl ::protobuf::Clear for BackupResponse {
    fn clear(&mut self) {
        self.clear_error();
        self.clear_start_key();
        self.clear_end_key();
        self.clear_files();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for BackupResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.error, "error", buf);
        crate::text::PbPrint::fmt(&self.start_key, "start_key", buf);
        crate::text::PbPrint::fmt(&self.end_key, "end_key", buf);
        crate::text::PbPrint::fmt(&self.files, "files", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BackupResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.error, "error", &mut s);
        crate::text::PbPrint::fmt(&self.start_key, "start_key", &mut s);
        crate::text::PbPrint::fmt(&self.end_key, "end_key", &mut s);
        crate::text::PbPrint::fmt(&self.files, "files", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BackupResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}
