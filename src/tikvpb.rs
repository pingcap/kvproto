// This file is generated by rust-protobuf 2.1.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct BatchRaftMessage {
    // message fields
    pub msgs: ::protobuf::RepeatedField<super::raft_serverpb::RaftMessage>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BatchRaftMessage {
    pub fn new() -> BatchRaftMessage {
        ::std::default::Default::default()
    }

    // repeated .raft_serverpb.RaftMessage msgs = 1;

    pub fn clear_msgs(&mut self) {
        self.msgs.clear();
    }

    // Param is passed by value, moved
    pub fn set_msgs(&mut self, v: ::protobuf::RepeatedField<super::raft_serverpb::RaftMessage>) {
        self.msgs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_msgs(&mut self) -> &mut ::protobuf::RepeatedField<super::raft_serverpb::RaftMessage> {
        &mut self.msgs
    }

    // Take field
    pub fn take_msgs(&mut self) -> ::protobuf::RepeatedField<super::raft_serverpb::RaftMessage> {
        ::std::mem::replace(&mut self.msgs, ::protobuf::RepeatedField::new())
    }

    pub fn get_msgs(&self) -> &[super::raft_serverpb::RaftMessage] {
        &self.msgs
    }
}

impl ::protobuf::Message for BatchRaftMessage {
    fn is_initialized(&self) -> bool {
        for v in &self.msgs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.msgs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.msgs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.msgs {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchRaftMessage {
        BatchRaftMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::raft_serverpb::RaftMessage>>(
                    "msgs",
                    |m: &BatchRaftMessage| { &m.msgs },
                    |m: &mut BatchRaftMessage| { &mut m.msgs },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BatchRaftMessage>(
                    "BatchRaftMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BatchRaftMessage {
        static mut instance: ::protobuf::lazy::Lazy<BatchRaftMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BatchRaftMessage,
        };
        unsafe {
            instance.get(BatchRaftMessage::new)
        }
    }
}

impl ::protobuf::Clear for BatchRaftMessage {
    fn clear(&mut self) {
        self.clear_msgs();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BatchRaftMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchRaftMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ctikvpb.proto\x12\x06tikvpb\x1a\x11coprocessor.proto\x1a\rkvrpcpb.p\
    roto\x1a\x13raft_serverpb.proto\x1a\x14gogoproto/gogo.proto\"B\n\x10Batc\
    hRaftMessage\x12.\n\x04msgs\x18\x01\x20\x03(\x0b2\x1a.raft_serverpb.Raft\
    MessageR\x04msgs2\xd3\x10\n\x04Tikv\x124\n\x05KvGet\x12\x13.kvrpcpb.GetR\
    equest\x1a\x14.kvrpcpb.GetResponse\"\0\x127\n\x06KvScan\x12\x14.kvrpcpb.\
    ScanRequest\x1a\x15.kvrpcpb.ScanResponse\"\0\x12C\n\nKvPrewrite\x12\x18.\
    kvrpcpb.PrewriteRequest\x1a\x19.kvrpcpb.PrewriteResponse\"\0\x12=\n\x08K\
    vCommit\x12\x16.kvrpcpb.CommitRequest\x1a\x17.kvrpcpb.CommitResponse\"\0\
    \x12=\n\x08KvImport\x12\x16.kvrpcpb.ImportRequest\x1a\x17.kvrpcpb.Import\
    Response\"\0\x12@\n\tKvCleanup\x12\x17.kvrpcpb.CleanupRequest\x1a\x18.kv\
    rpcpb.CleanupResponse\"\0\x12C\n\nKvBatchGet\x12\x18.kvrpcpb.BatchGetReq\
    uest\x1a\x19.kvrpcpb.BatchGetResponse\"\0\x12R\n\x0fKvBatchRollback\x12\
    \x1d.kvrpcpb.BatchRollbackRequest\x1a\x1e.kvrpcpb.BatchRollbackResponse\
    \"\0\x12C\n\nKvScanLock\x12\x18.kvrpcpb.ScanLockRequest\x1a\x19.kvrpcpb.\
    ScanLockResponse\"\0\x12L\n\rKvResolveLock\x12\x1b.kvrpcpb.ResolveLockRe\
    quest\x1a\x1c.kvrpcpb.ResolveLockResponse\"\0\x121\n\x04KvGC\x12\x12.kvr\
    pcpb.GCRequest\x1a\x13.kvrpcpb.GCResponse\"\0\x12L\n\rKvDeleteRange\x12\
    \x1b.kvrpcpb.DeleteRangeRequest\x1a\x1c.kvrpcpb.DeleteRangeResponse\"\0\
    \x12;\n\x06RawGet\x12\x16.kvrpcpb.RawGetRequest\x1a\x17.kvrpcpb.RawGetRe\
    sponse\"\0\x12J\n\x0bRawBatchGet\x12\x1b.kvrpcpb.RawBatchGetRequest\x1a\
    \x1c.kvrpcpb.RawBatchGetResponse\"\0\x12;\n\x06RawPut\x12\x16.kvrpcpb.Ra\
    wPutRequest\x1a\x17.kvrpcpb.RawPutResponse\"\0\x12J\n\x0bRawBatchPut\x12\
    \x1b.kvrpcpb.RawBatchPutRequest\x1a\x1c.kvrpcpb.RawBatchPutResponse\"\0\
    \x12D\n\tRawDelete\x12\x19.kvrpcpb.RawDeleteRequest\x1a\x1a.kvrpcpb.RawD\
    eleteResponse\"\0\x12S\n\x0eRawBatchDelete\x12\x1e.kvrpcpb.RawBatchDelet\
    eRequest\x1a\x1f.kvrpcpb.RawBatchDeleteResponse\"\0\x12>\n\x07RawScan\
    \x12\x17.kvrpcpb.RawScanRequest\x1a\x18.kvrpcpb.RawScanResponse\"\0\x12S\
    \n\x0eRawDeleteRange\x12\x1e.kvrpcpb.RawDeleteRangeRequest\x1a\x1f.kvrpc\
    pb.RawDeleteRangeResponse\"\0\x12M\n\x0cRawBatchScan\x12\x1c.kvrpcpb.Raw\
    BatchScanRequest\x1a\x1d.kvrpcpb.RawBatchScanResponse\"\0\x12_\n\x12Unsa\
    feDestroyRange\x12\".kvrpcpb.UnsafeDestroyRangeRequest\x1a#.kvrpcpb.Unsa\
    feDestroyRangeResponse\"\0\x12<\n\x0bCoprocessor\x12\x14.coprocessor.Req\
    uest\x1a\x15.coprocessor.Response\"\0\x12D\n\x11CoprocessorStream\x12\
    \x14.coprocessor.Request\x1a\x15.coprocessor.Response\"\00\x01\x12;\n\
    \x04Raft\x12\x1a.raft_serverpb.RaftMessage\x1a\x13.raft_serverpb.Done\"\
    \0(\x01\x12>\n\tBatchRaft\x12\x18.tikvpb.BatchRaftMessage\x1a\x13.raft_s\
    erverpb.Done\"\0(\x01\x12A\n\x08Snapshot\x12\x1c.raft_serverpb.SnapshotC\
    hunk\x1a\x13.raft_serverpb.Done\"\0(\x01\x12J\n\x0bSplitRegion\x12\x1b.k\
    vrpcpb.SplitRegionRequest\x1a\x1c.kvrpcpb.SplitRegionResponse\"\0\x12M\n\
    \x0cMvccGetByKey\x12\x1c.kvrpcpb.MvccGetByKeyRequest\x1a\x1d.kvrpcpb.Mvc\
    cGetByKeyResponse\"\0\x12Y\n\x10MvccGetByStartTs\x12\x20.kvrpcpb.MvccGet\
    ByStartTsRequest\x1a!.kvrpcpb.MvccGetByStartTsResponse\"\0B\x1e\n\x10org\
    .tikv.kvproto\xe0\xe2\x1e\x01\xd0\xe2\x1e\x01\xc8\xe2\x1e\x01J\xc3\x13\n\
    \x06\x12\x04\0\0@\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x01\x08\x0e\n\t\n\x02\x03\0\x12\x03\x03\x07\x1a\n\t\n\x02\x03\
    \x01\x12\x03\x04\x07\x16\n\t\n\x02\x03\x02\x12\x03\x05\x07\x1c\n\t\n\x02\
    \x03\x03\x12\x03\x07\x07\x1d\n\x08\n\x01\x08\x12\x03\t\0$\n\x0b\n\x04\
    \x08\xe7\x07\0\x12\x03\t\0$\n\x0c\n\x05\x08\xe7\x07\0\x02\x12\x03\t\x07\
    \x1c\n\r\n\x06\x08\xe7\x07\0\x02\0\x12\x03\t\x07\x1c\n\x0e\n\x07\x08\xe7\
    \x07\0\x02\0\x01\x12\x03\t\x08\x1b\n\x0c\n\x05\x08\xe7\x07\0\x03\x12\x03\
    \t\x1f#\n\x08\n\x01\x08\x12\x03\n\0(\n\x0b\n\x04\x08\xe7\x07\x01\x12\x03\
    \n\0(\n\x0c\n\x05\x08\xe7\x07\x01\x02\x12\x03\n\x07\x20\n\r\n\x06\x08\
    \xe7\x07\x01\x02\0\x12\x03\n\x07\x20\n\x0e\n\x07\x08\xe7\x07\x01\x02\0\
    \x01\x12\x03\n\x08\x1f\n\x0c\n\x05\x08\xe7\x07\x01\x03\x12\x03\n#'\n\x08\
    \n\x01\x08\x12\x03\x0b\0*\n\x0b\n\x04\x08\xe7\x07\x02\x12\x03\x0b\0*\n\
    \x0c\n\x05\x08\xe7\x07\x02\x02\x12\x03\x0b\x07\"\n\r\n\x06\x08\xe7\x07\
    \x02\x02\0\x12\x03\x0b\x07\"\n\x0e\n\x07\x08\xe7\x07\x02\x02\0\x01\x12\
    \x03\x0b\x08!\n\x0c\n\x05\x08\xe7\x07\x02\x03\x12\x03\x0b%)\n\x08\n\x01\
    \x08\x12\x03\r\0)\n\x0b\n\x04\x08\xe7\x07\x03\x12\x03\r\0)\n\x0c\n\x05\
    \x08\xe7\x07\x03\x02\x12\x03\r\x07\x13\n\r\n\x06\x08\xe7\x07\x03\x02\0\
    \x12\x03\r\x07\x13\n\x0e\n\x07\x08\xe7\x07\x03\x02\0\x01\x12\x03\r\x07\
    \x13\n\x0c\n\x05\x08\xe7\x07\x03\x07\x12\x03\r\x16(\n1\n\x02\x06\0\x12\
    \x04\x10\0<\x01\x1a%\x20Serve\x20as\x20a\x20distributed\x20kv\x20databas\
    e.\n\n\n\n\x03\x06\0\x01\x12\x03\x10\x08\x0c\n3\n\x04\x06\0\x02\0\x12\
    \x03\x12\x04B\x1a&\x20KV\x20commands\x20with\x20mvcc/txn\x20supported.\n\
    \n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x12\x08\r\n\x0c\n\x05\x06\0\x02\0\
    \x02\x12\x03\x12\x0e\x20\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x12+>\n\x0b\
    \n\x04\x06\0\x02\x01\x12\x03\x13\x04E\n\x0c\n\x05\x06\0\x02\x01\x01\x12\
    \x03\x13\x08\x0e\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x13\x0f\"\n\x0c\n\
    \x05\x06\0\x02\x01\x03\x12\x03\x13-A\n\x0b\n\x04\x06\0\x02\x02\x12\x03\
    \x14\x04Q\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x14\x08\x12\n\x0c\n\x05\
    \x06\0\x02\x02\x02\x12\x03\x14\x13*\n\x0c\n\x05\x06\0\x02\x02\x03\x12\
    \x03\x145M\n\x0b\n\x04\x06\0\x02\x03\x12\x03\x15\x04K\n\x0c\n\x05\x06\0\
    \x02\x03\x01\x12\x03\x15\x08\x10\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\
    \x15\x11&\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\x151G\n\x0b\n\x04\x06\0\
    \x02\x04\x12\x03\x16\x04K\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03\x16\x08\
    \x10\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03\x16\x11&\n\x0c\n\x05\x06\0\
    \x02\x04\x03\x12\x03\x161G\n\x0b\n\x04\x06\0\x02\x05\x12\x03\x17\x04N\n\
    \x0c\n\x05\x06\0\x02\x05\x01\x12\x03\x17\x08\x11\n\x0c\n\x05\x06\0\x02\
    \x05\x02\x12\x03\x17\x12(\n\x0c\n\x05\x06\0\x02\x05\x03\x12\x03\x173J\n\
    \x0b\n\x04\x06\0\x02\x06\x12\x03\x18\x04Q\n\x0c\n\x05\x06\0\x02\x06\x01\
    \x12\x03\x18\x08\x12\n\x0c\n\x05\x06\0\x02\x06\x02\x12\x03\x18\x13*\n\
    \x0c\n\x05\x06\0\x02\x06\x03\x12\x03\x185M\n\x0b\n\x04\x06\0\x02\x07\x12\
    \x03\x19\x04`\n\x0c\n\x05\x06\0\x02\x07\x01\x12\x03\x19\x08\x17\n\x0c\n\
    \x05\x06\0\x02\x07\x02\x12\x03\x19\x184\n\x0c\n\x05\x06\0\x02\x07\x03\
    \x12\x03\x19?\\\n\x0b\n\x04\x06\0\x02\x08\x12\x03\x1a\x04Q\n\x0c\n\x05\
    \x06\0\x02\x08\x01\x12\x03\x1a\x08\x12\n\x0c\n\x05\x06\0\x02\x08\x02\x12\
    \x03\x1a\x13*\n\x0c\n\x05\x06\0\x02\x08\x03\x12\x03\x1a5M\n\x0b\n\x04\
    \x06\0\x02\t\x12\x03\x1b\x04Z\n\x0c\n\x05\x06\0\x02\t\x01\x12\x03\x1b\
    \x08\x15\n\x0c\n\x05\x06\0\x02\t\x02\x12\x03\x1b\x160\n\x0c\n\x05\x06\0\
    \x02\t\x03\x12\x03\x1b;V\n\x0b\n\x04\x06\0\x02\n\x12\x03\x1c\x04?\n\x0c\
    \n\x05\x06\0\x02\n\x01\x12\x03\x1c\x08\x0c\n\x0c\n\x05\x06\0\x02\n\x02\
    \x12\x03\x1c\r\x1e\n\x0c\n\x05\x06\0\x02\n\x03\x12\x03\x1c);\n\x0b\n\x04\
    \x06\0\x02\x0b\x12\x03\x1d\x04Z\n\x0c\n\x05\x06\0\x02\x0b\x01\x12\x03\
    \x1d\x08\x15\n\x0c\n\x05\x06\0\x02\x0b\x02\x12\x03\x1d\x160\n\x0c\n\x05\
    \x06\0\x02\x0b\x03\x12\x03\x1d;V\n\x1e\n\x04\x06\0\x02\x0c\x12\x03\x20\
    \x04I\x1a\x11\x20RawKV\x20commands.\n\n\x0c\n\x05\x06\0\x02\x0c\x01\x12\
    \x03\x20\x08\x0e\n\x0c\n\x05\x06\0\x02\x0c\x02\x12\x03\x20\x0f$\n\x0c\n\
    \x05\x06\0\x02\x0c\x03\x12\x03\x20/E\n\x0b\n\x04\x06\0\x02\r\x12\x03!\
    \x04X\n\x0c\n\x05\x06\0\x02\r\x01\x12\x03!\x08\x13\n\x0c\n\x05\x06\0\x02\
    \r\x02\x12\x03!\x14.\n\x0c\n\x05\x06\0\x02\r\x03\x12\x03!9T\n\x0b\n\x04\
    \x06\0\x02\x0e\x12\x03\"\x04I\n\x0c\n\x05\x06\0\x02\x0e\x01\x12\x03\"\
    \x08\x0e\n\x0c\n\x05\x06\0\x02\x0e\x02\x12\x03\"\x0f$\n\x0c\n\x05\x06\0\
    \x02\x0e\x03\x12\x03\"/E\n\x0b\n\x04\x06\0\x02\x0f\x12\x03#\x04X\n\x0c\n\
    \x05\x06\0\x02\x0f\x01\x12\x03#\x08\x13\n\x0c\n\x05\x06\0\x02\x0f\x02\
    \x12\x03#\x14.\n\x0c\n\x05\x06\0\x02\x0f\x03\x12\x03#9T\n\x0b\n\x04\x06\
    \0\x02\x10\x12\x03$\x04R\n\x0c\n\x05\x06\0\x02\x10\x01\x12\x03$\x08\x11\
    \n\x0c\n\x05\x06\0\x02\x10\x02\x12\x03$\x12*\n\x0c\n\x05\x06\0\x02\x10\
    \x03\x12\x03$5N\n\x0b\n\x04\x06\0\x02\x11\x12\x03%\x04a\n\x0c\n\x05\x06\
    \0\x02\x11\x01\x12\x03%\x08\x16\n\x0c\n\x05\x06\0\x02\x11\x02\x12\x03%\
    \x174\n\x0c\n\x05\x06\0\x02\x11\x03\x12\x03%?]\n\x0b\n\x04\x06\0\x02\x12\
    \x12\x03&\x04L\n\x0c\n\x05\x06\0\x02\x12\x01\x12\x03&\x08\x0f\n\x0c\n\
    \x05\x06\0\x02\x12\x02\x12\x03&\x10&\n\x0c\n\x05\x06\0\x02\x12\x03\x12\
    \x03&1H\n\x0b\n\x04\x06\0\x02\x13\x12\x03'\x04a\n\x0c\n\x05\x06\0\x02\
    \x13\x01\x12\x03'\x08\x16\n\x0c\n\x05\x06\0\x02\x13\x02\x12\x03'\x174\n\
    \x0c\n\x05\x06\0\x02\x13\x03\x12\x03'?]\n\x0b\n\x04\x06\0\x02\x14\x12\
    \x03(\x04[\n\x0c\n\x05\x06\0\x02\x14\x01\x12\x03(\x08\x14\n\x0c\n\x05\
    \x06\0\x02\x14\x02\x12\x03(\x150\n\x0c\n\x05\x06\0\x02\x14\x03\x12\x03(;\
    W\nJ\n\x04\x06\0\x02\x15\x12\x03+\x04m\x1a=\x20Store\x20commands\x20(to\
    \x20the\x20whole\x20tikv\x20but\x20not\x20a\x20certain\x20region)\n\n\
    \x0c\n\x05\x06\0\x02\x15\x01\x12\x03+\x08\x1a\n\x0c\n\x05\x06\0\x02\x15\
    \x02\x12\x03+\x1b<\n\x0c\n\x05\x06\0\x02\x15\x03\x12\x03+Gi\n&\n\x04\x06\
    \0\x02\x16\x12\x03.\x04J\x1a\x19\x20SQL\x20push\x20down\x20commands.\n\n\
    \x0c\n\x05\x06\0\x02\x16\x01\x12\x03.\x08\x13\n\x0c\n\x05\x06\0\x02\x16\
    \x02\x12\x03.\x14'\n\x0c\n\x05\x06\0\x02\x16\x03\x12\x03.2F\n\x0b\n\x04\
    \x06\0\x02\x17\x12\x03/\x04X\n\x0c\n\x05\x06\0\x02\x17\x01\x12\x03/\x08\
    \x19\n\x0c\n\x05\x06\0\x02\x17\x02\x12\x03/\x1a-\n\x0c\n\x05\x06\0\x02\
    \x17\x06\x12\x03/9?\n\x0c\n\x05\x06\0\x02\x17\x03\x12\x03/@T\n-\n\x04\
    \x06\0\x02\x18\x12\x032\x04N\x1a\x20\x20Raft\x20commands\x20(tikv\x20<->\
    \x20tikv).\n\n\x0c\n\x05\x06\0\x02\x18\x01\x12\x032\x08\x0c\n\x0c\n\x05\
    \x06\0\x02\x18\x05\x12\x032\r\x13\n\x0c\n\x05\x06\0\x02\x18\x02\x12\x032\
    \x14-\n\x0c\n\x05\x06\0\x02\x18\x03\x12\x0328J\n\x0b\n\x04\x06\0\x02\x19\
    \x12\x033\x04J\n\x0c\n\x05\x06\0\x02\x19\x01\x12\x033\x08\x11\n\x0c\n\
    \x05\x06\0\x02\x19\x05\x12\x033\x12\x18\n\x0c\n\x05\x06\0\x02\x19\x02\
    \x12\x033\x19)\n\x0c\n\x05\x06\0\x02\x19\x03\x12\x0334F\n\x0b\n\x04\x06\
    \0\x02\x1a\x12\x034\x04T\n\x0c\n\x05\x06\0\x02\x1a\x01\x12\x034\x08\x10\
    \n\x0c\n\x05\x06\0\x02\x1a\x05\x12\x034\x11\x17\n\x0c\n\x05\x06\0\x02\
    \x1a\x02\x12\x034\x183\n\x0c\n\x05\x06\0\x02\x1a\x03\x12\x034>P\n\x1f\n\
    \x04\x06\0\x02\x1b\x12\x037\x04Y\x1a\x12\x20Region\x20commands.\n\n\x0c\
    \n\x05\x06\0\x02\x1b\x01\x12\x037\x08\x13\n\x0c\n\x05\x06\0\x02\x1b\x02\
    \x12\x037\x15/\n\x0c\n\x05\x06\0\x02\x1b\x03\x12\x037:U\n-\n\x04\x06\0\
    \x02\x1c\x12\x03:\x04[\x1a\x20\x20transaction\x20debugger\x20commands.\n\
    \n\x0c\n\x05\x06\0\x02\x1c\x01\x12\x03:\x08\x14\n\x0c\n\x05\x06\0\x02\
    \x1c\x02\x12\x03:\x150\n\x0c\n\x05\x06\0\x02\x1c\x03\x12\x03:;W\n\x0b\n\
    \x04\x06\0\x02\x1d\x12\x03;\x04g\n\x0c\n\x05\x06\0\x02\x1d\x01\x12\x03;\
    \x08\x18\n\x0c\n\x05\x06\0\x02\x1d\x02\x12\x03;\x198\n\x0c\n\x05\x06\0\
    \x02\x1d\x03\x12\x03;Cc\n\n\n\x02\x04\0\x12\x04>\0@\x01\n\n\n\x03\x04\0\
    \x01\x12\x03>\x08\x18\n\x0b\n\x04\x04\0\x02\0\x12\x03?\x040\n\x0c\n\x05\
    \x04\0\x02\0\x04\x12\x03?\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03?\r\
    &\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03?'+\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03?./b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
